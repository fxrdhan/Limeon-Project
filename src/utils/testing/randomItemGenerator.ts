/**
 * Random Item Generator Utility
 *
 * Generates random item data for testing purposes using existing master data entities.
 * This utility creates realistic item data by randomly selecting from available
 * categories, types, packages, dosages, and manufacturers.
 */

import type { ItemFormData } from '@/features/item-management/shared/types/FormTypes';
import type { EntityData } from '@/features/item-management/application/hooks/collections/useEntityManager';

/**
 * Interface for entities required for random item generation
 */
export interface RandomItemEntities {
  categories: EntityData[];
  types: EntityData[];
  packages: EntityData[];
  dosages: EntityData[];
  manufacturers: EntityData[];
}

/**
 * Interface for generated random item data
 */
export interface GeneratedRandomItem {
  itemFormData: ItemFormData;
  manufacturer: string;
}

/**
 * Drug names library for random selection
 */
const DRUG_NAMES = [
  'Paracetamol',
  'Amoxicillin',
  'Cetirizine',
  'Metformin',
  'Simvastatin',
  'Omeprazole',
  'Amlodipine',
  'Losartan',
  'Atorvastatin',
  'Levothyroxine',
  'Gabapentin',
  'Sertraline',
  'Montelukast',
  'Pantoprazole',
  'Furosemide',
  'Ibuprofen',
  'Aspirin',
  'Dexamethasone',
  'Prednisolone',
  'Diclofenac',
];

/**
 * Validates that all required entities are available for random generation
 */
export function validateEntitiesForGeneration(
  entities: RandomItemEntities
): boolean {
  const { categories, types, packages, dosages, manufacturers } = entities;

  return (
    categories.length > 0 &&
    types.length > 0 &&
    packages.length > 0 &&
    dosages.length > 0 &&
    manufacturers.length > 0
  );
}

/**
 * Generates random item data using provided master data entities
 */
export function generateRandomItemData(
  entities: RandomItemEntities
): GeneratedRandomItem {
  const { categories, types, packages, dosages, manufacturers } = entities;

  // Validate entities are available
  if (!validateEntitiesForGeneration(entities)) {
    throw new Error('Insufficient master data entities for random generation');
  }

  // Random selections
  const randomName = DRUG_NAMES[Math.floor(Math.random() * DRUG_NAMES.length)];
  const randomCategory =
    categories[Math.floor(Math.random() * categories.length)];
  const randomType = types[Math.floor(Math.random() * types.length)];
  const randomPackage = packages[Math.floor(Math.random() * packages.length)];
  const randomDosage = dosages[Math.floor(Math.random() * dosages.length)];
  const randomManufacturer =
    manufacturers[Math.floor(Math.random() * manufacturers.length)];

  // Generate realistic pricing
  const basePrice = Math.floor(Math.random() * 100000) + 1000; // 1000 - 101000
  const sellPrice = Math.floor(basePrice * (1.2 + Math.random() * 0.5)); // 20%-70% markup

  // Create ItemFormData structure
  const itemFormData: ItemFormData = {
    name: `${randomName} ${Math.floor(Math.random() * 1000)}mg`,
    code: '', // Will be auto-generated by business logic
    barcode: `${Date.now()}${Math.floor(Math.random() * 1000)}`,
    base_price: basePrice,
    sell_price: sellPrice,
    min_stock: 10,
    category_id: randomCategory.id,
    type_id: randomType.id,
    package_id: randomPackage.id,
    dosage_id: randomDosage.id,
    manufacturer_id: randomManufacturer.id,
    description: '',
    quantity: 0,
    unit_id: randomPackage.id, // Using package as unit
    is_active: true,
    is_medicine: true,
    has_expiry_date: false,
  };

  return {
    itemFormData,
    manufacturer: randomManufacturer.name,
  };
}

/**
 * Gets entities loading status for UI state management
 */
export function getEntitiesLoadingStatus(entities: {
  categoriesLoading: boolean;
  typesLoading: boolean;
  packagesLoading: boolean;
  dosagesLoading: boolean;
  manufacturersLoading: boolean;
}): boolean {
  return (
    entities.categoriesLoading ||
    entities.typesLoading ||
    entities.packagesLoading ||
    entities.dosagesLoading ||
    entities.manufacturersLoading
  );
}
