.
├── .env
├── eslint.config.js
├── get-all
├── get-database
├── .gitignore
├── index.html
├── package.json
├── package-lock.json
├── project_files.txt
├── public
├── README.md
├── src
│   ├── App.css
│   ├── App.tsx
│   ├── assets
│   ├── components
│   │   ├── layout
│   │   │   ├── MainLayout.tsx
│   │   │   ├── Navbar.tsx
│   │   │   └── Sidebar.tsx
│   │   ├── purchases
│   │   │   ├── ItemSearchBar.tsx
│   │   │   ├── PurchaseInfoForm.tsx
│   │   │   └── PurchaseItemsTable.tsx
│   │   ├── tools
│   │   │   └── UnitConversionManager.tsx
│   │   └── ui
│   │       ├── Badge.tsx
│   │       ├── Button.tsx
│   │       ├── Card.tsx
│   │       ├── FormActions.tsx
│   │       ├── FormComponents.tsx
│   │       ├── Input.tsx
│   │       ├── Loading.tsx
│   │       ├── Pagination.tsx
│   │       └── Table.tsx
│   ├── hooks
│   │   ├── useAddItemForm.ts
│   │   ├── useItemSelection.ts
│   │   ├── usePurchaseForm.ts
│   │   └── useUnitConversion.ts
│   ├── index.css
│   ├── lib
│   │   ├── classNames.ts
│   │   ├── formatters.ts
│   │   └── supabase.ts
│   ├── main.tsx
│   ├── output.css
│   ├── pages
│   │   ├── auth
│   │   │   └── Login.tsx
│   │   ├── dashboard
│   │   │   └── Dashboard.tsx
│   │   ├── master-data
│   │   │   ├── AddItem.tsx
│   │   │   ├── CategoryList.tsx
│   │   │   ├── ItemList.tsx
│   │   │   ├── TypeList.tsx
│   │   │   └── UnitList.tsx
│   │   ├── purchases
│   │   │   ├── CreatePurchase.tsx
│   │   │   └── PurchaseList.tsx
│   │   └── sales
│   │       └── CreateSale.tsx
│   ├── store
│   │   └── authStore.ts
│   └── vite-env.d.ts
├── supabase_data
│   ├── database_export.txt
│   ├── definitions.txt
│   ├── doctors.json
│   ├── item_categories.json
│   ├── items.json
│   ├── item_types.json
│   ├── item_units.json
│   ├── patients.json
│   ├── purchase_items.json
│   ├── purchases.json
│   ├── sale_items.json
│   ├── sales.json
│   ├── suppliers.json
│   ├── unit_conversions.json
│   └── users.json
├── tailwind.config.js
├── tsconfig.app.json
├── tsconfig.json
├── tsconfig.node.json
└── vite.config.ts

19 directories, 70 files


===============================================
= File: ./project_files.txt 
===============================================

     1	.
     2	├── .env
     3	├── eslint.config.js
     4	├── get-all
     5	├── get-database
     6	├── .gitignore
     7	├── index.html
     8	├── package.json
     9	├── package-lock.json
    10	├── project_files.txt
    11	├── public
    12	├── README.md
    13	├── src
    14	│   ├── App.css
    15	│   ├── App.tsx
    16	│   ├── assets
    17	│   ├── components
    18	│   │   ├── layout
    19	│   │   │   ├── MainLayout.tsx
    20	│   │   │   ├── Navbar.tsx
    21	│   │   │   └── Sidebar.tsx
    22	│   │   ├── purchases
    23	│   │   │   ├── ItemSearchBar.tsx
    24	│   │   │   ├── PurchaseInfoForm.tsx
    25	│   │   │   └── PurchaseItemsTable.tsx
    26	│   │   ├── tools
    27	│   │   │   └── UnitConversionManager.tsx
    28	│   │   └── ui
    29	│   │       ├── Badge.tsx
    30	│   │       ├── Button.tsx
    31	│   │       ├── Card.tsx
    32	│   │       ├── FormActions.tsx
    33	│   │       ├── FormComponents.tsx
    34	│   │       ├── Input.tsx
    35	│   │       ├── Loading.tsx
    36	│   │       ├── Pagination.tsx
    37	│   │       └── Table.tsx
    38	│   ├── hooks
    39	│   │   ├── useAddItemForm.ts
    40	│   │   ├── useItemSelection.ts
    41	│   │   ├── usePurchaseForm.ts
    42	│   │   └── useUnitConversion.ts
    43	│   ├── index.css
    44	│   ├── lib
    45	│   │   ├── classNames.ts
    46	│   │   ├── formatters.ts
    47	│   │   └── supabase.ts
    48	│   ├── main.tsx
    49	│   ├── output.css
    50	│   ├── pages
    51	│   │   ├── auth
    52	│   │   │   └── Login.tsx
    53	│   │   ├── dashboard
    54	│   │   │   └── Dashboard.tsx
    55	│   │   ├── master-data
    56	│   │   │   ├── AddItem.tsx
    57	│   │   │   ├── CategoryList.tsx
    58	│   │   │   ├── ItemList.tsx
    59	│   │   │   ├── TypeList.tsx
    60	│   │   │   └── UnitList.tsx
    61	│   │   ├── purchases
    62	│   │   │   ├── CreatePurchase.tsx
    63	│   │   │   └── PurchaseList.tsx
    64	│   │   └── sales
    65	│   │       └── CreateSale.tsx
    66	│   ├── store
    67	│   │   └── authStore.ts
    68	│   └── vite-env.d.ts
    69	├── supabase_data
    70	│   ├── database_export.txt
    71	│   ├── definitions.txt
    72	│   ├── doctors.json
    73	│   ├── item_categories.json
    74	│   ├── items.json
    75	│   ├── item_types.json
    76	│   ├── item_units.json
    77	│   ├── patients.json
    78	│   ├── purchase_items.json
    79	│   ├── purchases.json
    80	│   ├── sale_items.json
    81	│   ├── sales.json
    82	│   ├── suppliers.json
    83	│   ├── unit_conversions.json
    84	│   └── users.json
    85	├── tailwind.config.js
    86	├── tsconfig.app.json
    87	├── tsconfig.json
    88	├── tsconfig.node.json
    89	└── vite.config.ts
    90	
    91	19 directories, 70 files
    92	
    93	
    94	===============================================
    95	= File: ./project_files.txt 
    96	===============================================
    97	


===============================================
= File: ./tsconfig.app.json 
===============================================

     1	{
     2	  "compilerOptions": {
     3	    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
     4	    "target": "ES2020",
     5	    "useDefineForClassFields": true,
     6	    "lib": ["ES2020", "DOM", "DOM.Iterable"],
     7	    "module": "ESNext",
     8	    "skipLibCheck": true,
     9	
    10	    /* Bundler mode */
    11	    "moduleResolution": "bundler",
    12	    "allowImportingTsExtensions": true,
    13	    "isolatedModules": true,
    14	    "moduleDetection": "force",
    15	    "noEmit": true,
    16	    "jsx": "react-jsx",
    17	
    18	    /* Linting */
    19	    "strict": true,
    20	    "noUnusedLocals": true,
    21	    "noUnusedParameters": true,
    22	    "noFallthroughCasesInSwitch": true,
    23	    "noUncheckedSideEffectImports": true
    24	  },
    25	  "include": ["src"]
    26	}


===============================================
= File: ./tsconfig.json 
===============================================

     1	{
     2	  "files": [],
     3	  "references": [
     4	    { "path": "./tsconfig.app.json" },
     5	    { "path": "./tsconfig.node.json" }
     6	  ]
     7	}


===============================================
= File: ./README.md 
===============================================

     1	# React + TypeScript + Vite
     2	
     3	This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.
     4	
     5	Currently, two official plugins are available:
     6	
     7	- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
     8	- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh
     9	
    10	## Expanding the ESLint configuration
    11	
    12	If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:
    13	
    14	```js
    15	export default tseslint.config({
    16	  extends: [
    17	    // Remove ...tseslint.configs.recommended and replace with this
    18	    ...tseslint.configs.recommendedTypeChecked,
    19	    // Alternatively, use this for stricter rules
    20	    ...tseslint.configs.strictTypeChecked,
    21	    // Optionally, add this for stylistic rules
    22	    ...tseslint.configs.stylisticTypeChecked,
    23	  ],
    24	  languageOptions: {
    25	    // other options...
    26	    parserOptions: {
    27	      project: ['./tsconfig.node.json', './tsconfig.app.json'],
    28	      tsconfigRootDir: import.meta.dirname,
    29	    },
    30	  },
    31	})
    32	```
    33	
    34	You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:
    35	
    36	```js
    37	// eslint.config.js
    38	import reactX from 'eslint-plugin-react-x'
    39	import reactDom from 'eslint-plugin-react-dom'
    40	
    41	export default tseslint.config({
    42	  plugins: {
    43	    // Add the react-x and react-dom plugins
    44	    'react-x': reactX,
    45	    'react-dom': reactDom,
    46	  },
    47	  rules: {
    48	    // other rules...
    49	    // Enable its recommended typescript rules
    50	    ...reactX.configs['recommended-typescript'].rules,
    51	    ...reactDom.configs.recommended.rules,
    52	  },
    53	})
    54	```


===============================================
= File: ./package.json 
===============================================

     1	{
     2	  "name": "apotek-klinik-app",
     3	  "private": true,
     4	  "version": "0.0.0",
     5	  "type": "module",
     6	  "scripts": {
     7	    "dev": "vite",
     8	    "build": "tsc -b && vite build",
     9	    "lint": "eslint .",
    10	    "preview": "vite preview"
    11	  },
    12	  "dependencies": {
    13	    "@google/genai": "^0.7.0",
    14	    "@headlessui/react": "^2.2.0",
    15	    "@supabase/supabase-js": "^2.49.3",
    16	    "@tanstack/react-table": "^8.21.2",
    17	    "autoprefixer": "^10.4.21",
    18	    "axios": "^1.8.4",
    19	    "chart.js": "^4.4.8",
    20	    "html2canvas": "^1.4.1",
    21	    "jspdf": "^3.0.1",
    22	    "postcss": "^8.5.3",
    23	    "react": "^19.0.0",
    24	    "react-chartjs-2": "^5.3.0",
    25	    "react-dom": "^19.0.0",
    26	    "react-icons": "^5.5.0",
    27	    "react-router-dom": "^6.30.0",
    28	    "zustand": "^5.0.3"
    29	  },
    30	  "devDependencies": {
    31	    "@eslint/js": "^9.21.0",
    32	    "@types/react": "^19.0.10",
    33	    "@types/react-dom": "^19.0.4",
    34	    "@vitejs/plugin-react": "^4.3.4",
    35	    "eslint": "^9.21.0",
    36	    "eslint-plugin-react-hooks": "^5.1.0",
    37	    "eslint-plugin-react-refresh": "^0.4.19",
    38	    "globals": "^15.15.0",
    39	    "tailwindcss": "^3.4.17",
    40	    "typescript": "~5.7.2",
    41	    "typescript-eslint": "^8.24.1",
    42	    "vite": "^6.2.0"
    43	  }
    44	}


===============================================
= File: ./tailwind.config.js 
===============================================

     1	/** @type {import('tailwindcss').Config} */
     2	module.exports = {
     3	  content: [
     4	    "./index.html",
     5	    "./src/**/*.{js,ts,jsx,tsx}",
     6	  ],
     7	  theme: {
     8	    extend: {
     9	      fontFamily: {
    10	        sans: [
    11	          'system-ui',
    12	          'Avenir',
    13	          'Helvetica',
    14	          'Arial',
    15	          'sans-serif',
    16	        ],
    17	      },
    18	      colors: {
    19	        primary: "#1a73e8",
    20	        secondary: "#4285f4",
    21	        accent: "#ea4335",
    22	        neutral: "#fbbc05",
    23	      },
    24	    },
    25	  },
    26	  plugins: [],
    27	}


===============================================
= File: ./src/main.tsx 
===============================================

     1	import { StrictMode } from 'react'
     2	import { createRoot } from 'react-dom/client'
     3	import './index.css'
     4	import App from './App.tsx'
     5	
     6	createRoot(document.getElementById('root')!).render(
     7	  <StrictMode>
     8	    <App />
     9	  </StrictMode>,
    10	)


===============================================
= File: ./src/App.css 
===============================================

     1	#root {
     2	  max-width: 1280px;
     3	  margin: 0 auto;
     4	  padding: 2rem;
     5	  text-align: center;
     6	}
     7	
     8	.logo {
     9	  height: 6em;
    10	  padding: 1.5em;
    11	  will-change: filter;
    12	  transition: filter 300ms;
    13	}
    14	.logo:hover {
    15	  filter: drop-shadow(0 0 2em #646cffaa);
    16	}
    17	.logo.react:hover {
    18	  filter: drop-shadow(0 0 2em #61dafbaa);
    19	}
    20	
    21	@keyframes logo-spin {
    22	  from {
    23	    transform: rotate(0deg);
    24	  }
    25	  to {
    26	    transform: rotate(360deg);
    27	  }
    28	}
    29	
    30	@media (prefers-reduced-motion: no-preference) {
    31	  a:nth-of-type(2) .logo {
    32	    animation: logo-spin infinite 20s linear;
    33	  }
    34	}
    35	
    36	.card {
    37	  padding: 2em;
    38	}
    39	
    40	.read-the-docs {
    41	  color: #888;
    42	}


===============================================
= File: ./src/components/ui/Pagination.tsx 
===============================================

     1	// src/components/ui/Pagination.tsx
     2	import { classNames } from "../../lib/classNames";
     3	import { Button } from "./Button";
     4	
     5	export interface PaginationProps {
     6	    currentPage: number;
     7	    totalPages: number;
     8	    totalItems: number;
     9	    itemsPerPage: number;
    10	    itemsCount: number;
    11	    onPageChange: (page: number) => void;
    12	    onItemsPerPageChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;
    13	    className?: string;
    14	}
    15	
    16	export const Pagination = ({
    17	    currentPage,
    18	    totalPages,
    19	    // totalItems,
    20	    itemsPerPage,
    21	    // itemsCount,
    22	    onPageChange,
    23	    onItemsPerPageChange,
    24	    className,
    25	}: PaginationProps) => {
    26	    // const pageNumbers = [];
    27	    // Sudah tidak memerlukan pageNumbers untuk tampilan semua halaman
    28	
    29	    // Fungsi untuk menangani perubahan jumlah item per halaman
    30	    const handleItemsPerPageClick = (value: number) => {
    31	        const event = {
    32	            target: { value: value.toString() }
    33	        } as React.ChangeEvent<HTMLSelectElement>;
    34	        onItemsPerPageChange(event);
    35	    };
    36	
    37	    return (
    38	        <div className={classNames("flex justify-between items-center mt-4 gap-4", className)}>
    39	            {/* Items per page selection - left side */}
    40	            <div className="flex items-center rounded-full bg-zinc-100 p-1 shadow-md text-gray-700 overflow-hidden">
    41	                <button 
    42	                    className={classNames(
    43	                        "px-3 py-1.5 rounded-full focus:outline-none transition-all duration-300 ease-in-out", 
    44	                        itemsPerPage === 10 ? "bg-blue-500 text-white font-medium shadow-sm transform scale-105" : "hover:bg-blue-100 hover:text-blue-600"
    45	                    )}
    46	                    onClick={() => handleItemsPerPageClick(10)}
    47	                >
    48	                    {itemsPerPage === 10 ? "10 items" : "10"}
    49	                </button>
    50	                <button 
    51	                    className={classNames(
    52	                        "px-3 py-1.5 rounded-full focus:outline-none transition-all duration-300 ease-in-out", 
    53	                        itemsPerPage === 20 ? "bg-blue-500 text-white font-medium shadow-sm transform scale-105" : "hover:bg-blue-100 hover:text-blue-600"
    54	                    )}
    55	                    onClick={() => handleItemsPerPageClick(20)}
    56	                >
    57	                    {itemsPerPage === 20 ? "20 items" : "20"}
    58	                </button>
    59	                <button 
    60	                    className={classNames(
    61	                        "px-3 py-1.5 rounded-full focus:outline-none transition-all duration-300 ease-in-out", 
    62	                        itemsPerPage === 40 ? "bg-blue-500 text-white font-medium shadow-sm transform scale-105" : "hover:bg-blue-100 hover:text-blue-600"
    63	                    )}
    64	                    onClick={() => handleItemsPerPageClick(40)}
    65	                >
    66	                    {itemsPerPage === 40 ? "40 items" : "40"}
    67	                </button>
    68	            </div>
    69	
    70	            {/* Page navigation - right side */}
    71	            <div className="flex items-center rounded-full bg-primary p-1 shadow-md text-white overflow-hidden">
    72	                <Button
    73	                    variant="text"
    74	                    size="sm"
    75	                    onClick={() => onPageChange(currentPage - 1)}
    76	                    disabled={currentPage === 1}
    77	                    className={classNames("px-3 py-1.5 rounded-full text-white focus:ring-0 focus:outline-none transition-all duration-300", currentPage === 1 ? "opacity-50 cursor-not-allowed" : "hover:bg-blue-600")}
    78	                >
    79	                    &lt;
    80	                </Button>
    81	
    82	                <div className="px-3 py-1.5 font-medium">
    83	                    {currentPage} of {totalPages}
    84	                </div>
    85	
    86	                <Button
    87	                    variant="text"
    88	                    size="sm"
    89	                    onClick={() => onPageChange(currentPage + 1)}
    90	                    disabled={currentPage === totalPages || totalPages === 0}
    91	                    className={classNames("px-3 py-1.5 rounded-full text-white focus:ring-0 focus:outline-none transition-all duration-300", (currentPage === totalPages || totalPages === 0) ? "opacity-50 cursor-not-allowed" : "hover:bg-blue-600")}
    92	                >
    93	                    &gt;
    94	                </Button>
    95	            </div>
    96	        </div>
    97	    );
    98	};


===============================================
= File: ./src/components/ui/Button.tsx 
===============================================

     1	// src/components/ui/Button.tsx
     2	import { classNames } from "../../lib/classNames";
     3	
     4	export type ButtonVariant =
     5	    | "primary"
     6	    | "secondary"
     7	    | "accent"
     8	    | "outline"
     9	    | "text"
    10	    | "danger";
    11	export type ButtonSize = "sm" | "md" | "lg";
    12	
    13	export interface ButtonProps
    14	    extends React.ButtonHTMLAttributes<HTMLButtonElement> {
    15	    variant?: ButtonVariant;
    16	    size?: ButtonSize;
    17	    isLoading?: boolean;
    18	    fullWidth?: boolean;
    19	}
    20	
    21	export const Button = ({
    22	    children,
    23	    className,
    24	    variant = "primary",
    25	    size = "md",
    26	    isLoading = false,
    27	    fullWidth = false,
    28	    ...props
    29	}: ButtonProps) => {
    30	    const variants = {
    31	        primary: "rounded-md shadow-md bg-blue-500 flex items-center hover:bg-blue-600 text-white hover:text-white",
    32	        secondary: "rounded-md bg-blue-600 bg-secondary hover:bg-blue-700 text-white hover:text-white",
    33	        accent: "bg-accent hover:bg-red-600 text-white",
    34	        outline: "border border-primary text-primary hover:bg-blue-50",
    35	        text: "bg-transparent hover:bg-opacity-10 focus:outline-none focus:ring-0 focus:shadow-none",
    36	        danger: "bg-red-600 hover:bg-red-700 text-white",
    37	    };
    38	
    39	    const sizes = {
    40	        sm: "px-3 py-1.5 text-sm",
    41	        md: "px-4 py-2",
    42	        lg: "px-6 py-3 text-lg",
    43	    };
    44	
    45	    const baseClasses = "font-medium rounded-md transition-colors disabled:opacity-50 disabled:cursor-not-allowed";
    46	    const focusClasses = variant === 'text' ? "" : "focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary";
    47	    
    48	    return (
    49	        <button
    50	            className={classNames(
    51	                baseClasses, focusClasses,
    52	                variants[variant],
    53	                sizes[size],
    54	                fullWidth ? "w-full" : "",
    55	                className
    56	            )}
    57	            disabled={isLoading || props.disabled}
    58	            {...props}
    59	        >
    60	            {isLoading ? (
    61	                <span className="flex items-center justify-center">
    62	                    <svg
    63	                        className="animate-spin -ml-1 mr-2 h-4 w-4 text-current"
    64	                        xmlns="http://www.w3.org/2000/svg"
    65	                        fill="none"
    66	                        viewBox="0 0 24 24"
    67	                    >
    68	                        <circle
    69	                            className="opacity-25"
    70	                            cx="12"
    71	                            cy="12"
    72	                            r="10"
    73	                            stroke="currentColor"
    74	                            strokeWidth="4"
    75	                        ></circle>
    76	                        <path
    77	                            className="opacity-75"
    78	                            fill="currentColor"
    79	                            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
    80	                        ></path>
    81	                    </svg>
    82	                    Loading...
    83	                </span>
    84	            ) : (
    85	                children
    86	            )}
    87	        </button>
    88	    );
    89	};


===============================================
= File: ./src/components/ui/Card.tsx 
===============================================

     1	// src/components/ui/Card.tsx
     2	import { classNames } from '../../lib/classNames';
     3	
     4	interface CardProps {
     5	    children: React.ReactNode;
     6	    className?: string;
     7	}
     8	
     9	export const Card = ({ children, className }: CardProps) => {
    10	    return (
    11	        <div className={classNames('bg-white p-6 rounded-lg shadow', className)}>
    12	            {children}
    13	        </div>
    14	    );
    15	};
    16	
    17	export const CardHeader = ({ children, className }: CardProps) => {
    18	    return (
    19	        <div className={classNames('mb-4', className)}>
    20	            {children}
    21	        </div>
    22	    );
    23	};
    24	
    25	export const CardTitle = ({ children, className }: CardProps) => {
    26	    return (
    27	        <h2 className={classNames('text-2xl font-semibold text-gray-800', className)}>
    28	            {children}
    29	        </h2>
    30	    );
    31	};
    32	
    33	export const CardContent = ({ children, className }: CardProps) => {
    34	    return (
    35	        <div className={classNames('', className)}>
    36	            {children}
    37	        </div>
    38	    );
    39	};
    40	
    41	export const CardFooter = ({ children, className }: CardProps) => {
    42	    return (
    43	        <div className={classNames('mt-4 pt-4 border-t', className)}>
    44	            {children}
    45	        </div>
    46	    );
    47	};


===============================================
= File: ./src/components/ui/Table.tsx 
===============================================

     1	// src/components/ui/Table.tsx
     2	import { classNames } from '../../lib/classNames';
     3	
     4	interface TableProps {
     5	    children: React.ReactNode;
     6	    className?: string;
     7	}
     8	
     9	interface TableCellProps extends TableProps {
    10	    colSpan?: number;
    11	    rowSpan?: number;
    12	    align?: 'left' | 'center' | 'right';
    13	}
    14	
    15	export const Table = ({ children, className }: TableProps) => {
    16	    return (
    17	        <div className={classNames('overflow-x-auto rounded-lg shadow', className)}>
    18	            <table className="min-w-full bg-white rounded-lg overflow-hidden">
    19	                {children}
    20	            </table>
    21	        </div>
    22	    );
    23	};
    24	
    25	export const TableHead = ({ children, className }: TableProps) => {
    26	    return (
    27	        <thead className={classNames('bg-gray-50 text-gray-700 border-b border-gray-200', className)}>
    28	            {children}
    29	        </thead>
    30	    );
    31	};
    32	
    33	export const TableBody = ({ children, className }: TableProps) => {
    34	    return (
    35	        <tbody className={classNames('divide-y divide-gray-100 bg-white', className)}>
    36	            {children}
    37	        </tbody>
    38	    );
    39	};
    40	
    41	export const TableRow = ({ children, className }: TableProps) => {
    42	    return (
    43	        <tr className={classNames('transition-colors duration-150 hover:bg-gray-100 even:bg-gray-50/30', className)}>
    44	            {children}
    45	        </tr>
    46	    );
    47	};
    48	
    49	export const TableCell = ({ children, className }: TableCellProps) => {
    50	    return (
    51	        <td className={classNames('py-3 px-4 text-gray-700 align-middle', className)}>
    52	            {children}
    53	        </td>
    54	    );
    55	};
    56	
    57	export const TableHeader = ({ children, className }: TableProps) => {
    58	    return (
    59	        <th className={classNames('py-3 px-4 text-left bg-gray-200 text-gray-700 uppercase tracking-wider text-sm', className)}>
    60	            {children}
    61	        </th>
    62	    );
    63	};


===============================================
= File: ./src/components/ui/Input.tsx 
===============================================

     1	// src/components/ui/Input.tsx
     2	import { classNames } from '../../lib/classNames';
     3	
     4	export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
     5	    label?: string;
     6	    error?: string;
     7	    fullWidth?: boolean;
     8	}
     9	
    10	export const Input = ({
    11	    label,
    12	    error,
    13	    className,
    14	    fullWidth = true,
    15	    ...props
    16	}: InputProps) => {
    17	    return (
    18	        <div className={fullWidth ? 'w-full' : ''}>
    19	            {label && (
    20	                <label className="block text-gray-700 mb-2" htmlFor={props.id}>
    21	                    {label}
    22	                </label>
    23	            )}
    24	            <input
    25	                className={classNames(
    26	                    'p-3 border rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent',
    27	                    error ? 'border-red-500' : 'border-gray-300',
    28	                    fullWidth ? 'w-full' : '',
    29	                    className
    30	                )}
    31	                {...props}
    32	            />
    33	            {error && <p className="mt-1 text-sm text-red-600">{error}</p>}
    34	        </div>
    35	    );
    36	};


===============================================
= File: ./src/components/ui/Badge.tsx 
===============================================

     1	// src/components/ui/Badge.tsx
     2	import { classNames } from "../../lib/classNames";
     3	
     4	export type BadgeVariant =
     5	    | "primary"
     6	    | "secondary"
     7	    | "accent"
     8	    | "success"
     9	    | "warning"
    10	    | "danger";
    11	
    12	interface BadgeProps {
    13	    children: React.ReactNode;
    14	    variant?: BadgeVariant;
    15	    className?: string;
    16	}
    17	
    18	export const Badge = ({
    19	    children,
    20	    variant = "primary",
    21	    className,
    22	}: BadgeProps) => {
    23	    const variants = {
    24	        primary: "bg-blue-100 text-blue-800",
    25	        secondary: "bg-gray-100 text-gray-800",
    26	        accent: "bg-red-100 text-red-800",
    27	        success: "bg-green-100 text-green-800",
    28	        warning: "bg-yellow-100 text-yellow-800",
    29	        danger: "bg-red-100 text-red-800",
    30	    };
    31	
    32	    return (
    33	        <span
    34	            className={classNames(
    35	                "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium",
    36	                variants[variant],
    37	                className
    38	            )}
    39	        >
    40	            {children}
    41	        </span>
    42	    );
    43	};


===============================================
= File: ./src/components/ui/FormComponents.tsx 
===============================================

     1	// src/components/ui/FormComponents.tsx
     2	import { classNames } from "../../lib/classNames";
     3	
     4	// FormSection component
     5	interface FormSectionProps {
     6	    title: string;
     7	    children: React.ReactNode;
     8	    className?: string;
     9	}
    10	
    11	export const FormSection: React.FC<FormSectionProps> = ({ title, children, className }) => {
    12	    return (
    13	        <div className={classNames("border border-gray-200 rounded-lg mb-6", className)}>
    14	            <h2 className="text-lg font-semibold bg-gray-100 p-3 border-b">
    15	                {title}
    16	            </h2>
    17	            <div className="p-4 space-y-4">
    18	                {children}
    19	            </div>
    20	        </div>
    21	    );
    22	};
    23	
    24	// FormField component
    25	interface FormFieldProps {
    26	    label: string;
    27	    children: React.ReactNode;
    28	    className?: string;
    29	}
    30	
    31	export const FormField: React.FC<FormFieldProps> = ({ label, children, className }) => {
    32	    return (
    33	        <div className={className}>
    34	            <label className="block text-sm font-medium text-gray-700 mb-1">
    35	                {label}
    36	            </label>
    37	            {children}
    38	        </div>
    39	    );
    40	};


===============================================
= File: ./src/components/ui/FormActions.tsx 
===============================================

     1	// src/components/ui/FormActions.tsx
     2	import { FaSave, FaTimes } from 'react-icons/fa';
     3	import { Button } from './Button';
     4	
     5	interface FormActionsProps {
     6	    onCancel: () => void;
     7	    isSaving: boolean;
     8	    isDisabled?: boolean;
     9	    cancelText?: string;
    10	    saveText?: string;
    11	}
    12	
    13	export const FormActions: React.FC<FormActionsProps> = ({
    14	    onCancel,
    15	    isSaving,
    16	    isDisabled = false,
    17	    cancelText = 'Batal',
    18	    saveText = 'Simpan'
    19	}) => {
    20	    return (
    21	        <div className="flex justify-between w-full">
    22	            <Button
    23	                type="button"
    24	                variant="outline"
    25	                onClick={onCancel}
    26	            >
    27	                <div className="flex items-center">
    28	                    <FaTimes className="mr-2" /> <span>{cancelText}</span>
    29	                </div>
    30	            </Button>
    31	            <Button 
    32	                type="submit"
    33	                disabled={isSaving || isDisabled}
    34	                isLoading={isSaving}
    35	            >
    36	                <FaSave className="mr-2" /> {saveText}
    37	            </Button>
    38	        </div>
    39	    );
    40	};


===============================================
= File: ./src/components/ui/Loading.tsx 
===============================================

     1	import { classNames } from "../../lib/classNames";
     2	
     3	interface LoadingProps {
     4	    className?: string;
     5	    message?: string;
     6	}
     7	
     8	export const Loading = ({ className, message = "" }: LoadingProps) => (
     9	    <div className={classNames("text-center py-6", className)}>
    10	        <div className="inline-block animate-spin rounded-full h-8 w-8 border-4 border-primary border-t-transparent"></div>
    11	        <p className="mt-2 text-gray-600">{message}</p>
    12	    </div>
    13	);


===============================================
= File: ./src/components/purchases/ItemSearchBar.tsx 
===============================================

     1	import React from 'react';
     2	import { FaPlus } from 'react-icons/fa';
     3	import { Button } from '../ui/Button';
     4	import { Item } from '../../hooks/useItemSelection';
     5	import { PurchaseItem } from '../../hooks/usePurchaseForm';
     6	
     7	interface ItemSearchBarProps {
     8	    searchItem: string;
     9	    setSearchItem: (value: string) => void;
    10	    showItemDropdown: boolean;
    11	    setShowItemDropdown: (value: boolean) => void;
    12	    filteredItems: Item[];
    13	    selectedItem: Item | null;
    14	    setSelectedItem: (item: Item | null) => void;
    15	    onAddItem: (item: PurchaseItem) => void;
    16	}
    17	
    18	const ItemSearchBar: React.FC<ItemSearchBarProps> = ({
    19	    searchItem,
    20	    setSearchItem,
    21	    showItemDropdown,
    22	    setShowItemDropdown,
    23	    filteredItems,
    24	    selectedItem,
    25	    setSelectedItem,
    26	    onAddItem
    27	}) => {
    28	    const addItem = () => {
    29	        if (!selectedItem) return;
    30	        
    31	        const newItem: PurchaseItem = {
    32	            id: Date.now().toString(),
    33	            item_id: selectedItem.id,
    34	            item_name: selectedItem.name,
    35	            quantity: 1,
    36	            price: selectedItem.base_price,
    37	            discount: 0,
    38	            subtotal: selectedItem.base_price,
    39	            unit: selectedItem.base_unit || 'Unit',
    40	            unit_conversion_rate: 1,
    41	            vat_percentage: 0,
    42	            batch_no: null,
    43	            expiry_date: null
    44	        };
    45	        
    46	        onAddItem(newItem);
    47	        setSelectedItem(null);
    48	        setSearchItem('');
    49	    };
    50	
    51	    return (
    52	        <div className="mb-4">
    53	            <div className="flex space-x-2">
    54	                <div className="relative flex-1">
    55	                    <input
    56	                        type="text"
    57	                        placeholder="Cari nama atau kode item..."
    58	                        className="w-full p-3 border rounded-md"
    59	                        value={searchItem}
    60	                        onChange={(e) => {
    61	                            setSearchItem(e.target.value);
    62	                            setShowItemDropdown(true);
    63	                        }}
    64	                        onFocus={() => setShowItemDropdown(true)}
    65	                    />
    66	                    
    67	                    {showItemDropdown && searchItem && (
    68	                        <div className="absolute z-10 w-full mt-1 bg-white border rounded-md shadow-lg max-h-60 overflow-y-auto">
    69	                            {filteredItems.length === 0 ? (
    70	                                <div className="p-3 text-gray-500">Tidak ada item yang ditemukan</div>
    71	                            ) : (
    72	                                filteredItems.map(item => (
    73	                                    <div
    74	                                        key={item.id}
    75	                                        className="p-3 hover:bg-gray-100 cursor-pointer"
    76	                                        onClick={() => {
    77	                                            setSelectedItem(item);
    78	                                            setSearchItem(item.name);
    79	                                            setShowItemDropdown(false);
    80	                                        }}
    81	                                    >
    82	                                        <div><span className="font-semibold">{item.code}</span> - {item.name}</div>
    83	                                        <div className="text-sm text-gray-500">
    84	                                            Harga Dasar: {item.base_price.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' })}
    85	                                        </div>
    86	                                    </div>
    87	                                ))
    88	                            )}
    89	                        </div>
    90	                    )}
    91	                </div>
    92	                <Button
    93	                    type="button"
    94	                    onClick={addItem}
    95	                    disabled={!selectedItem}
    96	                    className="flex items-center whitespace-nowrap"
    97	                >
    98	                    <FaPlus className="mr-2" />
    99	                    Tambah Item
   100	                </Button>
   101	            </div>
   102	        </div>
   103	    );
   104	};
   105	
   106	export default ItemSearchBar;


===============================================
= File: ./src/components/purchases/PurchaseInfoForm.tsx 
===============================================

     1	import React from 'react';
     2	import { FormSection, FormField } from '../ui/FormComponents';
     3	import { Input } from '../ui/Input';
     4	import { PurchaseFormData } from '../../hooks/usePurchaseForm';
     5	
     6	interface PurchaseInformationFormProps {
     7	    formData: PurchaseFormData;
     8	    suppliers: Array<{ id: string; name: string }>;
     9	    handleChange: (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => void;
    10	}
    11	
    12	const PurchaseInformationForm: React.FC<PurchaseInformationFormProps> = ({
    13	    formData,
    14	    suppliers,
    15	    handleChange
    16	}) => {
    17	    return (
    18	        <FormSection title="Informasi Pembelian">
    19	            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
    20	                <FormField label="Supplier">
    21	                    <select
    22	                        name="supplier_id"
    23	                        value={formData.supplier_id}
    24	                        onChange={handleChange}
    25	                        className="w-full p-3 border rounded-md"
    26	                    >
    27	                        <option value="">-- Pilih Supplier --</option>
    28	                        {suppliers.map(supplier => (
    29	                            <option key={supplier.id} value={supplier.id}>
    30	                                {supplier.name}
    31	                            </option>
    32	                        ))}
    33	                    </select>
    34	                </FormField>
    35	                
    36	                <FormField label="Nomor Faktur">
    37	                    <Input
    38	                        name="invoice_number"
    39	                        value={formData.invoice_number}
    40	                        onChange={handleChange}
    41	                        placeholder="Masukkan nomor faktur"
    42	                    />
    43	                </FormField>
    44	            </div>
    45	            
    46	            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
    47	                <FormField label="Persentase PPN">
    48	                    <div className="flex items-center">
    49	                        <Input
    50	                            type="number"
    51	                            name="vat_percentage"
    52	                            value={formData.vat_percentage}
    53	                            onChange={handleChange}
    54	                            min="0"
    55	                            max="100"
    56	                            className="w-24"
    57	                        />
    58	                        <span className="ml-2">%</span>
    59	                    </div>
    60	                </FormField>
    61	                
    62	                <FormField label="PPN Termasuk Harga">
    63	                    <input
    64	                        type="checkbox"
    65	                        name="is_vat_included"
    66	                        checked={formData.is_vat_included}
    67	                        onChange={handleChange}
    68	                        className="h-5 w-5 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
    69	                    />
    70	                </FormField>
    71	            </div>
    72	            
    73	            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
    74	                <FormField label="Tanggal Pembelian">
    75	                    <Input
    76	                        type="date"
    77	                        name="date"
    78	                        value={formData.date}
    79	                        onChange={handleChange}
    80	                    />
    81	                </FormField>
    82	                
    83	                <FormField label="Status Pembayaran">
    84	                    <select
    85	                        name="payment_status"
    86	                        value={formData.payment_status}
    87	                        onChange={handleChange}
    88	                        className="w-full p-3 border rounded-md"
    89	                    >
    90	                        <option value="unpaid">Belum Dibayar</option>
    91	                        <option value="partial">Sebagian</option>
    92	                        <option value="paid">Lunas</option>
    93	                    </select>
    94	                </FormField>
    95	                
    96	                <FormField label="Metode Pembayaran">
    97	                    <select
    98	                        name="payment_method"
    99	                        value={formData.payment_method}
   100	                        onChange={handleChange}
   101	                        className="w-full p-3 border rounded-md"
   102	                    >
   103	                        <option value="cash">Tunai</option>
   104	                        <option value="transfer">Transfer</option>
   105	                        <option value="credit">Kredit</option>
   106	                    </select>
   107	                </FormField>
   108	            </div>
   109	            
   110	            <FormField label="Catatan">
   111	                <textarea
   112	                    name="notes"
   113	                    value={formData.notes}
   114	                    onChange={handleChange}
   115	                    className="w-full p-3 border rounded-md"
   116	                    rows={3}
   117	                />
   118	            </FormField>
   119	        </FormSection>
   120	    );
   121	};
   122	
   123	export default PurchaseInformationForm;


===============================================
= File: ./src/components/purchases/PurchaseItemsTable.tsx 
===============================================

     1	import React from 'react';
     2	import { FaTrash } from 'react-icons/fa';
     3	import { Table, TableHead, TableBody, TableRow, TableCell, TableHeader } from '../ui/Table';
     4	import { Button } from '../ui/Button';
     5	import { Input } from '../ui/Input';
     6	import { formatRupiah, extractNumericValue } from '../../lib/formatters';
     7	import { PurchaseItem } from '../../hooks/usePurchaseForm';
     8	
     9	interface PurchaseItemsTableProps {
    10	    purchaseItems: PurchaseItem[];
    11	    total: number;
    12	    isVatIncluded: boolean;
    13	    onUpdateItem: (id: string, field: 'quantity' | 'price' | 'discount', value: number) => void;
    14	    onRemoveItem: (id: string) => void;
    15	    onUpdateItemVat: (id: string, vatPercentage: number) => void;
    16	    onUpdateItemExpiry: (id: string, expiryDate: string) => void;
    17	    onUpdateItemBatchNo: (id: string, batchNo: string) => void;
    18	    onUnitChange: (id: string, unitName: string) => void;
    19	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    20	    getItemByID: (itemId: string) => any;
    21	}
    22	
    23	const PurchaseItemsTable: React.FC<PurchaseItemsTableProps> = ({
    24	    purchaseItems,
    25	    total,
    26	    isVatIncluded,
    27	    onUpdateItem,
    28	    onRemoveItem,
    29	    onUnitChange,
    30	    onUpdateItemVat,
    31	    onUpdateItemExpiry,
    32	    onUpdateItemBatchNo,
    33	    getItemByID
    34	}) => {
    35	    return (
    36	        <Table>
    37	            <TableHead>
    38	                <TableRow>
    39	                    <TableHeader className="w-16 text-center">No</TableHeader>
    40	                    <TableHeader>Kode Item</TableHeader>
    41	                    <TableHeader>Nama Item</TableHeader>
    42	                    <TableHeader>Batch No.</TableHeader>
    43	                    <TableHeader>Kadaluarsa</TableHeader>
    44	                    <TableHeader className="text-center">Jumlah</TableHeader>
    45	                    <TableHeader className="text-center">Satuan</TableHeader>
    46	                    <TableHeader className="text-right">Harga</TableHeader>
    47	                    <TableHeader className="text-right">Diskon (%)</TableHeader>
    48	                    {!isVatIncluded && <TableHeader className="text-right">VAT (%)</TableHeader>}
    49	                    <TableHeader className="text-right">Subtotal</TableHeader>
    50	                    <TableHeader className="text-center">Aksi</TableHeader>
    51	                </TableRow>
    52	            </TableHead>
    53	            <TableBody>
    54	                {purchaseItems.length === 0 ? (
    55	                    <TableRow>
    56	                        <TableCell colSpan={12} className="text-center text-gray-500">
    57	                            Belum ada item ditambahkan
    58	                        </TableCell>
    59	                    </TableRow>
    60	                ) : (
    61	                    purchaseItems.map((item, index) => (
    62	                        <TableRow key={item.id}>
    63	                            <TableCell className="text-center">{index + 1}</TableCell>
    64	                            <TableCell>{getItemByID(item.item_id)?.code || '-'}</TableCell>
    65	                            <TableCell>{item.item_name}</TableCell>
    66	                            <TableCell>
    67	                                <Input
    68	                                    type="text"
    69	                                    value={item.batch_no || ''}
    70	                                    onChange={(e) => onUpdateItemBatchNo(item.id, e.target.value)}
    71	                                    className="w-24 text-center"
    72	                                    placeholder="No Batch"
    73	                                />
    74	                            </TableCell>
    75	                            <TableCell>
    76	                                <Input
    77	                                    type="date"
    78	                                    value={item.expiry_date || ''}
    79	                                    onChange={(e) => onUpdateItemExpiry(item.id, e.target.value)}
    80	                                    className="w-36 text-center"
    81	                                    min={new Date().toISOString().split('T')[0]}
    82	                                    title="Tanggal Kadaluarsa"
    83	                                    placeholder="Tgl. Kadaluarsa"
    84	                                />
    85	                            </TableCell>
    86	                            <TableCell className="text-center">
    87	                                <Input
    88	                                    type="number"
    89	                                    min="1"
    90	                                    value={item.quantity}
    91	                                    onChange={(e) => onUpdateItem(item.id, 'quantity', Number(e.target.value))}
    92	                                    className="w-20 text-center"
    93	                                />
    94	                            </TableCell>
    95	                            <TableCell className="text-center">
    96	                                <select
    97	                                    value={item.unit}
    98	                                    onChange={(e) => onUnitChange(item.id, e.target.value)}
    99	                                    className="p-2 border rounded-md"
   100	                                >
   101	                                    <option value={getItemByID(item.item_id)?.base_unit || 'Unit'}>
   102	                                        {getItemByID(item.item_id)?.base_unit || 'Unit'}
   103	                                    </option>
   104	                                    {getItemByID(item.item_id)?.unit_conversions?.map((uc: { id: string; unit_name: string }) => (
   105	                                        <option key={uc.id} value={uc.unit_name}>{uc.unit_name}</option>
   106	                                    ))}
   107	                                </select>
   108	                            </TableCell>
   109	                            <TableCell className="text-right">
   110	                                <Input
   111	                                    type="text"
   112	                                    value={item.price === 0 ? '' : formatRupiah(item.price)}
   113	                                    onChange={(e) => {
   114	                                        const numericValue = extractNumericValue(e.target.value);
   115	                                        onUpdateItem(item.id, 'price', numericValue);
   116	                                    }}
   117	                                    className="w-32 text-right"
   118	                                    placeholder="Rp 0"
   119	                                />
   120	                            </TableCell>
   121	                            <TableCell className="text-right">
   122	                                <Input
   123	                                    type="text"
   124	                                    value={item.discount === 0 ? '' : `${item.discount}%`}
   125	                                    onChange={(e) => {
   126	                                        const numericValue = extractNumericValue(e.target.value);
   127	                                        onUpdateItem(item.id, 'discount', Math.min(numericValue, 100));
   128	                                    }}
   129	                                    className="w-20 text-right"
   130	                                    placeholder="0%"
   131	                                />
   132	                            </TableCell>
   133	                            {!isVatIncluded && (
   134	                                <TableCell className="text-right">
   135	                                    <Input
   136	                                        type="text"
   137	                                        value={item.vat_percentage === 0 ? '' : `${item.vat_percentage}%`}
   138	                                        onChange={(e) => {
   139	                                            const numericValue = extractNumericValue(e.target.value);
   140	                                            onUpdateItemVat(item.id, Math.min(numericValue, 100));
   141	                                        }}
   142	                                        className="w-20 text-right"
   143	                                        placeholder="0%"
   144	                                    />
   145	                                </TableCell>
   146	                            )}
   147	                            <TableCell className="text-right">
   148	                                {item.subtotal.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' })}
   149	                            </TableCell>
   150	                            <TableCell className="text-center">
   151	                                <Button
   152	                                    type="button"
   153	                                    variant="danger"
   154	                                    size="sm"
   155	                                    onClick={() => onRemoveItem(item.id)}
   156	                                >
   157	                                    <FaTrash />
   158	                                </Button>
   159	                            </TableCell>
   160	                        </TableRow>
   161	                    ))
   162	                )}
   163	                <TableRow className="font-semibold bg-gray-50">
   164	                    <TableCell colSpan={isVatIncluded ? 9 : 10} className="text-right">Total:</TableCell>
   165	                    <TableCell className="text-right">
   166	                        {total.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' })}
   167	                    </TableCell>
   168	                    <TableCell children={undefined}></TableCell>
   169	                </TableRow>
   170	            </TableBody>
   171	        </Table>
   172	    );
   173	};
   174	
   175	export default PurchaseItemsTable;


===============================================
= File: ./src/components/tools/UnitConversionManager.tsx 
===============================================

     1	import { useEffect } from "react";
     2	import { Input } from "../ui/Input";
     3	import { Button } from "../ui/Button";
     4	import { Table, TableHead, TableBody, TableRow, TableCell, TableHeader } from "../ui/Table";
     5	import { FormSection, FormField } from "../ui/FormComponents";
     6	import { UseUnitConversionReturn } from "../../hooks/useUnitConversion";
     7	import { FaTrash } from "react-icons/fa";
     8	
     9	interface UnitConversionManagerProps {
    10	    unitConversionHook: UseUnitConversionReturn;
    11	}
    12	
    13	const UnitConversionManager: React.FC<UnitConversionManagerProps> = ({
    14	    unitConversionHook
    15	}) => {
    16	    const {
    17	        baseUnit,
    18	        // setBaseUnit,
    19	        basePrice,
    20	        // setBasePrice,
    21	        unitConversions,
    22	        addUnitConversion,
    23	        removeUnitConversion,
    24	        unitConversionFormData,
    25	        setUnitConversionFormData,
    26	        recalculateBasePrices,
    27	        availableUnits
    28	    } = unitConversionHook;
    29	
    30	    // Recalculate base prices when base price changes
    31	    useEffect(() => {
    32	        if (basePrice > 0 && unitConversions.length > 0) {
    33	            recalculateBasePrices();
    34	        }
    35	    // eslint-disable-next-line react-hooks/exhaustive-deps
    36	    }, [basePrice, recalculateBasePrices]);
    37	
    38	    // const handleBaseUnitChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    39	    //     const { name, value } = e.target;
    40	    //     if (name === "baseUnit") {
    41	    //         setBaseUnit(value);
    42	    //     } else if (name === "basePrice") {
    43	    //         setBasePrice(parseFloat(value) || 0);
    44	    //     }
    45	    // };
    46	
    47	    // Handler untuk form konversi satuan
    48	    const handleConversionFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    49	        const { name, value } = e.target;
    50	        setUnitConversionFormData({
    51	            ...unitConversionFormData,
    52	            [name]: name === "conversion" ? parseFloat(value) || 0 : value,
    53	        });
    54	    };
    55	
    56	    // Tambahkan konversi baru
    57	    const handleAddConversion = () => {
    58	        if (!unitConversionFormData.unit || unitConversionFormData.conversion <= 0) {
    59	            alert("Satuan dan konversi harus diisi dengan benar!");
    60	            return;
    61	        }
    62	
    63	        // Cek apakah satuan sudah ada
    64	        const existingUnit = unitConversions.find(uc => uc.unit.name === unitConversionFormData.unit);
    65	        if (existingUnit) {
    66	            alert("Satuan tersebut sudah ada dalam daftar!");
    67	            return;
    68	        }
    69	        
    70	        const selectedUnit = availableUnits.find(u => u.name === unitConversionFormData.unit);
    71	            if (!selectedUnit) {
    72	                alert("Satuan tidak valid!");
    73	            return;
    74	        }
    75	
    76	        addUnitConversion({
    77	            unit: selectedUnit,
    78	            conversion: unitConversionFormData.conversion,
    79	        });
    80	
    81	        // Reset form
    82	        setUnitConversionFormData({
    83	            unit: "",
    84	            conversion: 0,
    85	        });
    86	    };
    87	
    88	    return (
    89	        <FormSection title="Satuan dan Konversi">
    90	            <div>
    91	                <h3 className="text-lg font-medium mb-3">Konversi Satuan</h3>
    92	                <p className="text-sm text-gray-600 mb-3">
    93	                    Tentukan berapa banyak satuan turunan dalam satu satuan dasar.
    94	                </p>
    95	
    96	                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
    97	                    <FormField label="Satuan Konversi">
    98	                        <select
    99	                            name="unit"
   100	                            value={unitConversionFormData.unit}
   101	                            onChange={handleConversionFormChange}
   102	                            className="w-full p-3 border rounded-md"
   103	                        >
   104	                            <option value="">-- Pilih Satuan --</option>
   105	                            {availableUnits
   106	                                .filter(unit => unit.name !== baseUnit)
   107	                                .filter(unit => !unitConversions.some(uc => uc.unit.name === unit.name))
   108	                                .map(unit => (
   109	                                <option key={unit.id} value={unit.name}>
   110	                                    {unit.name}
   111	                                </option>
   112	                            ))}
   113	                        </select>
   114	                    </FormField>
   115	
   116	                    <FormField label={`1 ${baseUnit || 'satuan dasar'} = ? ${unitConversionFormData.unit || 'satuan'}`}>
   117	                        <div className="flex space-x-2">
   118	                            <Input
   119	                                name="conversion"
   120	                                value={unitConversionFormData.conversion || ""}
   121	                                onChange={handleConversionFormChange}
   122	                                type="number"
   123	                                min="1"
   124	                                placeholder="Jumlah satuan dasar"
   125	                                className="w-full"
   126	                            />
   127	                            <Button
   128	                                type="button"
   129	                                onClick={handleAddConversion}
   130	                                className="whitespace-nowrap"
   131	                            >
   132	                                Tambah Satuan
   133	                            </Button>
   134	                        </div>
   135	                    </FormField>
   136	                </div>
   137	
   138	                <div className="border rounded-lg overflow-hidden">
   139	                    <Table>
   140	                        <TableHead>
   141	                            <TableRow>
   142	                                <TableHeader>Satuan Turunan</TableHeader>
   143	                                <TableHeader>Konversi</TableHeader>
   144	                                <TableHeader>Harga Pokok</TableHeader>
   145	                                <TableHeader className="text-center">Aksi</TableHeader>
   146	                            </TableRow>
   147	                        </TableHead>
   148	                        <TableBody>
   149	                            {unitConversions.length === 0 ? (
   150	                                <TableRow>
   151	                                    <TableCell colSpan={4} className="text-center text-gray-500">
   152	                                        Belum ada data konversi
   153	                                    </TableCell>
   154	                                </TableRow>
   155	                            ) : (
   156	                                unitConversions.map((uc) => (
   157	                                    <TableRow key={uc.id}>
   158	                                        <TableCell>{uc.unit.name}</TableCell>
   159	                                        <TableCell>
   160	                                            1 {baseUnit} = {uc.conversion} {uc.unit.name}
   161	                                        </TableCell>
   162	                                        <TableCell>
   163	                                            {(uc.basePrice || 0).toLocaleString("id-ID", {
   164	                                                style: "currency",
   165	                                                currency: "IDR",
   166	                                            })}
   167	                                        </TableCell>
   168	                                        <TableCell className="text-center">
   169	                                            <Button
   170	                                                variant="danger"
   171	                                                size="sm"
   172	                                                onClick={() => removeUnitConversion(uc.id)}
   173	                                            >
   174	                                                <FaTrash />
   175	                                            </Button>
   176	                                        </TableCell>
   177	                                    </TableRow>
   178	                                ))
   179	                            )}
   180	                        </TableBody>
   181	                    </Table>
   182	                </div>
   183	
   184	                <div className="mt-4 text-sm text-gray-600">
   185	                    <ul className="list-disc pl-5 space-y-1">
   186	                        <li>Harga pokok satuan turunan dihitung dengan: Harga pokok satuan dasar ÷ jumlah satuan turunan.</li>
   187	                        <li className="text-red-500 font-semibold">PENTING: Disarankan untuk tidak mengubah satuan jika sudah terdapat transaksi yang berhubungan dengan item ini.</li>
   188	                    </ul>
   189	                </div>
   190	            </div>
   191	        </FormSection>
   192	    );
   193	};
   194	
   195	export default UnitConversionManager;


===============================================
= File: ./src/components/layout/MainLayout.tsx 
===============================================

     1	import { useState } from "react";
     2	import { Outlet } from "react-router-dom";
     3	import Navbar from "./Navbar";
     4	import Sidebar from "./Sidebar";
     5	
     6	const MainLayout = () => {
     7	    const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
     8	
     9	    const toggleSidebar = () => {
    10	        setSidebarCollapsed(!sidebarCollapsed);
    11	    };
    12	
    13	    return (
    14	        <div className="flex h-screen bg-gray-100 text-gray-800">
    15	            <Sidebar collapsed={sidebarCollapsed} toggleSidebar={toggleSidebar} />
    16	
    17	            <div className="flex flex-col flex-1 overflow-hidden">
    18	                <Navbar />
    19	
    20	                <main className="flex-1 overflow-y-auto p-4 text-gray-800">
    21	                    <Outlet />
    22	                </main>
    23	            </div>
    24	        </div>
    25	    );
    26	};
    27	
    28	export default MainLayout;


===============================================
= File: ./src/components/layout/Navbar.tsx 
===============================================

     1	// src/components/layout/Navbar.tsx
     2	import { useState } from 'react';
     3	import { useAuthStore } from '../../store/authStore';
     4	import { Button } from '../ui/Button';
     5	
     6	const Navbar = () => {
     7	    const { user, logout } = useAuthStore();
     8	    const [dropdownOpen, setDropdownOpen] = useState(false);
     9	
    10	    const toggleDropdown = () => {
    11	        setDropdownOpen(!dropdownOpen);
    12	    };
    13	
    14	    const handleLogout = async () => {
    15	        await logout();
    16	    };
    17	
    18	    return (
    19	        <nav className="bg-white border-b px-6 py-3">
    20	            <div className="flex justify-between items-center">
    21	                <div>
    22	                    <h1 className="text-xl font-semibold text-gray-800">PharmaSys</h1>
    23	                </div>
    24	
    25	                <div className="relative">
    26	                    <button
    27	                        className="flex items-center space-x-2"
    28	                        onClick={toggleDropdown}
    29	                    >
    30	                        <div className="w-8 h-8 rounded-full bg-primary text-white flex items-center justify-center">
    31	                            {user?.name ? user.name.charAt(0).toUpperCase() : 'U'}
    32	                        </div>
    33	                        <span className="font-medium">{user?.name || 'User'}</span>
    34	                    </button>
    35	
    36	                    {dropdownOpen && (
    37	                        <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg z-10">
    38	                            <div className="py-1">
    39	                                <Button
    40	                                    variant="outline"
    41	                                    className="w-full justify-start rounded-none"
    42	                                    onClick={handleLogout}
    43	                                >
    44	                                    Logout
    45	                                </Button>
    46	                            </div>
    47	                        </div>
    48	                    )}
    49	                </div>
    50	            </div>
    51	        </nav>
    52	    );
    53	};
    54	
    55	export default Navbar;


===============================================
= File: ./src/components/layout/Sidebar.tsx 
===============================================

     1	import { Link } from "react-router-dom";
     2	import { useState, useEffect, useCallback } from "react";
     3	import { useLocation } from "react-router-dom";
     4	import {
     5	    FaDatabase,
     6	    FaBoxes,
     7	    FaShoppingCart,
     8	    FaHome,
     9	    FaArrowLeft,
    10	    FaAngleDown,
    11	    FaChartBar,
    12	    FaHospital,
    13	    FaShoppingBag,
    14	    FaCog
    15	} from "react-icons/fa";
    16	import { JSX } from "react/jsx-runtime";
    17	
    18	interface SidebarProps {
    19	    collapsed: boolean;
    20	    toggleSidebar: () => void;
    21	}
    22	
    23	interface MenuItem {
    24	    name: string;
    25	    path: string;
    26	    icon: JSX.Element;
    27	    children?: {
    28	        name: string;
    29	        path: string;
    30	    }[];
    31	}
    32	
    33	const Sidebar = ({ collapsed, toggleSidebar }: SidebarProps) => {
    34	    const location = useLocation();
    35	    const [openMenus, setOpenMenus] = useState<Record<string, boolean>>({
    36	        masterData: false,
    37	        inventory: false,
    38	        purchasing: false,
    39	        sales: false,
    40	        clinic: false,
    41	        finance: false,
    42	        reports: false,
    43	        settings: false,
    44	    });
    45	
    46	    const [savedOpenMenus, setSavedOpenMenus] = useState<Record<string, boolean>>({});
    47	    const [hoverMenu, setHoverMenu] = useState<string | null>(null);
    48	
    49	    // Define menu structure
    50	    const menuItems: MenuItem[] = [
    51	        {
    52	            name: "Dashboard",
    53	            path: "/",
    54	            icon: <FaHome className="text-lg" />,
    55	        },
    56	        {
    57	            name: "Master Data",
    58	            path: "/master-data",
    59	            icon: <FaDatabase className="text-lg" />,
    60	            children: [
    61	                { name: "Daftar Item", path: "/master-data/items" },
    62	                { name: "Kategori Item", path: "/master-data/categories" },
    63	                { name: "Jenis Item", path: "/master-data/types" },
    64	                { name: "Satuan", path: "/master-data/units" },
    65	                { name: "Supplier", path: "/master-data/suppliers" },
    66	                { name: "Pasien", path: "/master-data/patients" },
    67	                { name: "Dokter", path: "/master-data/doctors" },
    68	            ],
    69	        },
    70	        {
    71	            name: "Persediaan",
    72	            path: "/inventory",
    73	            icon: <FaBoxes className="text-lg" />,
    74	            children: [
    75	                { name: "Stok Obat", path: "/inventory/stock" },
    76	                { name: "Stok Opname", path: "/inventory/stock-opname" },
    77	                { name: "Obat Kadaluarsa", path: "/inventory/expired" },
    78	            ],
    79	        },
    80	        {
    81	            name: "Pembelian",
    82	            path: "/purchases",
    83	            icon: <FaShoppingCart className="text-lg" />,
    84	            children: [
    85	                { name: "Daftar Pesanan Beli", path: "/purchases/orders" },
    86	                { name: "Daftar Pembelian", path: "/purchases" },
    87	                { name: "Riwayat Harga Beli", path: "/purchases/price-history" },
    88	            ],
    89	        },
    90	        {
    91	            name: "Penjualan",
    92	            path: "/sales",
    93	            icon: <FaShoppingBag className="text-lg" />,
    94	            children: [
    95	                { name: "Daftar Penjualan", path: "/sales" },
    96	                { name: "Tambah Penjualan", path: "/sales/create" },
    97	            ],
    98	        },
    99	        {
   100	            name: "Klinik",
   101	            path: "/clinic",
   102	            icon: <FaHospital className="text-lg" />,
   103	            children: [
   104	                { name: "Daftar Pasien", path: "/clinic/patients" },
   105	                { name: "Antrian", path: "/clinic/queue" },
   106	                { name: "Rekam Medis", path: "/clinic/medical-records" },
   107	            ],
   108	        },
   109	        {
   110	            name: "Laporan",
   111	            path: "/reports",
   112	            icon: <FaChartBar className="text-lg" />,
   113	            children: [
   114	                { name: "Penjualan", path: "/reports/sales" },
   115	                { name: "Pembelian", path: "/reports/purchases" },
   116	                { name: "Stok", path: "/reports/stock" },
   117	            ],
   118	        },
   119	        {
   120	            name: "Pengaturan",
   121	            path: "/settings",
   122	            icon: <FaCog className="text-lg" />,
   123	            children: [
   124	                { name: "Profil", path: "/settings/profile" },
   125	                { name: "Pengguna", path: "/settings/users" },
   126	                { name: "Aplikasi", path: "/settings/app" },
   127	            ],
   128	        },
   129	    ];
   130	
   131	    useEffect(() => {
   132	        if (collapsed) {
   133	            setSavedOpenMenus({ ...openMenus });
   134	            setOpenMenus({
   135	                masterData: false,
   136	                inventory: false,
   137	                purchasing: false,
   138	                sales: false,
   139	                clinic: false,
   140	                finance: false,
   141	                reports: false,
   142	                settings: false,
   143	            });
   144	        } else {
   145	            setOpenMenus(savedOpenMenus);
   146	        }
   147	        // eslint-disable-next-line react-hooks/exhaustive-deps
   148	    }, [collapsed]);
   149	
   150	    // Check if path is active
   151	    const isActive = useCallback((path: string) => {
   152	        if (path === '/') {
   153	            return location.pathname === '/';
   154	        }
   155	        return location.pathname.startsWith(path);
   156	    }, [location]);
   157	
   158	    // Check if submenu is active
   159	    const hasActiveChild = useCallback((children?: { path: string }[]) => {
   160	        if (!children) return false;
   161	        return children.some(child => isActive(child.path));
   162	    }, [isActive]);
   163	
   164	    // Toggle menu open/closed
   165	    const toggleMenu = useCallback((menu: string) => {
   166	        if (!collapsed) {
   167	            setOpenMenus((prev) => ({
   168	                ...prev,
   169	                [menu]: !prev[menu],
   170	            }));
   171	        }
   172	    }, [collapsed]);
   173	
   174	    // Handle hover for collapsed sidebar
   175	    const handleMouseEnter = useCallback((menu: string) => {
   176	        if (collapsed) {
   177	            setHoverMenu(menu);
   178	        }
   179	    }, [collapsed]);
   180	
   181	    const handleMouseLeave = useCallback(() => {
   182	        setHoverMenu(null);
   183	    }, []);
   184	
   185	    return (
   186	        <aside
   187	            className={`bg-gradient-to-b from-blue-600 to-blue-800 text-white 
   188	                        transition-all duration-500 ease-in-out h-screen 
   189	                        ${collapsed ? 'w-16' : 'w-64'} relative group z-10`}
   190	        >
   191	            <div className="flex flex-col h-full">
   192	                {/* Logo Area */}
   193	                <div className={`p-4 border-b border-blue-500/30 flex items-center justify-between group`}>
   194	                    {!collapsed ? (
   195	                        <>
   196	                        <div className="flex items-center">
   197	                            <div className="h-8 w-8 bg-white rounded-md flex items-center justify-center">
   198	                                <span className="text-blue-600 text-xl font-bold">P</span>
   199	                            </div>
   200	                            <h2 className="ml-2 text-lg font-bold transition-opacity duration-200">PharmaSys</h2>
   201	                        </div>
   202	                        <button onClick={toggleSidebar} className="p-1.5 rounded-full bg-blue-500/20 hover:bg-blue-500/40 transition-all duration-300">
   203	                            <FaArrowLeft size={14} />
   204	                        </button>
   205	                        </>
   206	                    ) : (
   207	                        <div className="h-8 w-8 bg-white rounded-md flex items-center justify-center mx-auto cursor-pointer" onClick={toggleSidebar}>
   208	                            <span className="text-blue-600 text-xl font-bold">P</span>
   209	                        </div>
   210	                    )}
   211	                </div>
   212	
   213	                {/* Menu Items */}
   214	                <nav className="flex-grow overflow-y-auto py-2 scrollbar-thin">
   215	                    {menuItems.map((item) => (
   216	                        <div key={item.name} className="mb-1" onMouseEnter={() => handleMouseEnter(item.name)} onMouseLeave={handleMouseLeave}>
   217	                            {/* Menu Item Button */}
   218	                            <button
   219	                                onClick={() => item.children ? toggleMenu(item.name.toLowerCase().replace(' ', '')) : null}
   220	                                className={`w-full text-left flex items-center justify-between px-2 py-3
   221	                                          ${isActive(item.path) || hasActiveChild(item.children)
   222	                                        ? 'bg-white/20 font-medium border-l-4 border-white'
   223	                                        : collapsed ? '' : 'border-l-4 border-transparent'} 
   224	                                            : 'hover:bg-white/5'} 
   225	                                          transition-all duration-150 group relative`}
   226	                            >
   227	                                <div className={`flex items-center ${collapsed ? 'justify-start pl-3 w-full' : ''}`}>
   228	                                    <div className={`${isActive(item.path) || hasActiveChild(item.children)
   229	                                        ? 'text-white'
   230	                                        : 'text-blue-100'} 
   231	                                                  transition-colors duration-200`}>
   232	                                        {item.icon}
   233	                                    </div>
   234	
   235	                                    {!collapsed && (
   236	                                        <span className="ml-3 truncate">{item.name}</span>
   237	                                    )}
   238	                                </div>
   239	
   240	                                {!collapsed && item.children && (
   241	                                    <FaAngleDown
   242	                                        className={`text-sm transition-transform duration-300 ${openMenus[item.name.toLowerCase().replace(' ', '')] ? "rotate-180" : ""
   243	                                            }`}
   244	                                    />
   245	                                )}
   246	
   247	                                {/* Hover tooltip for collapsed state */}
   248	                                {collapsed && (
   249	                                    <div className={`
   250	                                        absolute left-full ml-2 bg-blue-800 text-white rounded-md py-1 px-3 
   251	                                        text-sm whitespace-nowrap shadow-lg opacity-0 pointer-events-none
   252	                                        transition-opacity duration-150 z-20
   253	                                        ${hoverMenu === item.name ? 'opacity-100' : 'opacity-0'}
   254	                                    `}>
   255	                                        {item.name}
   256	                                    </div>
   257	                                )}
   258	                            </button>
   259	
   260	                            {/* Submenu Items */}
   261	                            {item.children && openMenus[item.name.toLowerCase().replace(' ', '')] && !collapsed && (
   262	                                <div className="overflow-hidden transition-all duration-300 ease-in-out max-h-96 bg-blue-700/20">
   263	                                    <div className="pl-12 pr-4 py-1 space-y-1">
   264	                                        {item.children.map((child) => (
   265	                                            <Link
   266	                                                key={child.path}
   267	                                                to={child.path}
   268	                                                className={`block py-2 px-2 text-sm rounded-md transition-all duration-150 text-blue-100 hover:text-white visited:text-blue-100 
   269	                                                          ${isActive(child.path)
   270	                                                        ? 'bg-white/20 text-white font-medium'
   271	                                                        : 'text-blue-100 hover:bg-white/5 hover:text-white'}`}
   272	                                            >
   273	                                                {child.name}
   274	                                            </Link>
   275	                                        ))}
   276	                                    </div>
   277	                                </div>
   278	                            )}
   279	
   280	                            {/* Submenu dropdown for collapsed sidebar on hover */}
   281	                            {collapsed && item.children && hoverMenu === item.name && (
   282	                                <div
   283	                                    className="absolute left-full ml-2 top-0 bg-blue-800 rounded-md py-2 px-3 
   284	                                            min-w-40 z-20 shadow-xl"
   285	                                >
   286	                                    {item.children.map((child) => (
   287	                                        <Link
   288	                                            key={child.path}
   289	                                            to={child.path}
   290	                                            className={`block py-2 px-2 text-sm rounded-md transition-all duration-150 text-blue-100 hover:text-white visited:text-blue-100 
   291	                                                      ${isActive(child.path)
   292	                                                    ? 'bg-white/10 text-white'
   293	                                                    : 'text-blue-100 hover:bg-white/5 hover:text-white'}`}
   294	                                        >
   295	                                            {child.name}
   296	                                        </Link>
   297	                                    ))}
   298	                                </div>
   299	                            )}
   300	                        </div>
   301	                    ))}
   302	                </nav>
   303	
   304	                {/* Bottom version info */}
   305	                <div className={`p-4 text-xs text-blue-200/70 border-t border-blue-500/30 ${collapsed ? 'text-center' : ''}`}>
   306	                    {collapsed ? 'v2.3' : 'PharmaSys v2.3.0'}
   307	                </div>
   308	            </div>
   309	        </aside>
   310	    );
   311	};
   312	
   313	export default Sidebar;


===============================================
= File: ./src/hooks/useAddItemForm.ts 
===============================================

     1	import { useState, useEffect } from "react";
     2	import { useNavigate } from "react-router-dom";
     3	import { supabase } from "../lib/supabase";
     4	import { useUnitConversion } from "./useUnitConversion";
     5	import { formatRupiah, extractNumericValue } from "../lib/formatters";
     6	
     7	interface Category {
     8	    id: string;
     9	    name: string;
    10	}
    11	
    12	interface MedicineType {
    13	    id: string;
    14	    name: string;
    15	}
    16	
    17	interface Unit {
    18	    id: string;
    19	    name: string;
    20	}
    21	
    22	interface FormData {
    23	    code: string;
    24	    name: string;
    25	    type_id: string;
    26	    category_id: string;
    27	    unit_id: string;
    28	    rack: string;
    29	    description: string;
    30	    base_price: number;
    31	    sell_price: number;
    32	    min_stock: number;
    33	    is_active: boolean;
    34	    is_medicine: boolean;
    35	    has_expiry_date: boolean;
    36	}
    37	
    38	// interface UnitConversion {
    39	//     unit: {
    40	//         id: string;
    41	//     };
    42	//     conversion: number;
    43	//     basePrice: number;
    44	// }
    45	
    46	export const useAddItemForm = () => {
    47	    const navigate = useNavigate();
    48	    const [loading, setLoading] = useState(false);
    49	    const [saving, setSaving] = useState(false);
    50	    const [categories, setCategories] = useState<Category[]>([]);
    51	    const [types, setTypes] = useState<MedicineType[]>([]);
    52	    const [units, setUnits] = useState<Unit[]>([]);
    53	    // State untuk nilai yang ditampilkan dengan format mata uang
    54	    const [displayBasePrice, setDisplayBasePrice] = useState('');
    55	    const [displaySellPrice, setDisplaySellPrice] = useState('');
    56	
    57	    // Hook untuk konversi satuan
    58	    const unitConversionHook = useUnitConversion();
    59	
    60	    // Form state
    61	    const [formData, setFormData] = useState<FormData>({
    62	        code: "", // Kode akan dibuat otomatis
    63	        name: "",
    64	        type_id: "",
    65	        category_id: "",
    66	        unit_id: "",
    67	        rack: "",
    68	        description: "",
    69	        base_price: 0,
    70	        sell_price: 0,
    71	        min_stock: 10,
    72	        is_active: true,
    73	        is_medicine: true,
    74	        has_expiry_date: false,
    75	    });
    76	
    77	    // Fungsi untuk memperbarui formData secara lebih mudah
    78	    const updateFormData = (newData: Partial<FormData>) => {
    79	        setFormData(prev => ({
    80	            ...prev,
    81	            ...newData
    82	        }));
    83	    };
    84	
    85	    // Fungsi helper untuk menghasilkan kode dinamis
    86	    const generateTypeCode = (typeId: string): string => {
    87	        const selectedType = types.find(type => type.id === typeId);
    88	        if (!selectedType) return "X";
    89	
    90	        // Gunakan kode khusus untuk setiap jenis obat
    91	        const typeName = selectedType.name.toLowerCase();
    92	        if (typeName.includes("bebas") && !typeName.includes("terbatas")) return "B";
    93	        if (typeName.includes("bebas terbatas")) return "T";
    94	        if (typeName.includes("keras")) return "K";
    95	        if (typeName.includes("narkotika")) return "N";
    96	        if (typeName.includes("fitofarmaka")) return "F";
    97	        if (typeName.includes("herbal")) return "H";
    98	        
    99	        // Fallback ke huruf pertama jika tidak ada yang cocok
   100	        return selectedType.name.charAt(0).toUpperCase();
   101	    };
   102	    
   103	    const generateUnitCode = (unitId: string): string => {
   104	        const selectedUnit = units.find(unit => unit.id === unitId);
   105	        if (!selectedUnit) return "X";
   106	
   107	        // Ambil huruf pertama dari nama unit
   108	        return selectedUnit.name.charAt(0).toUpperCase();
   109	    };
   110	
   111	    const generateCategoryCode = (categoryId: string): string => {
   112	        const selectedCategory = categories.find(category => category.id === categoryId);
   113	        if (!selectedCategory) return "XX";
   114	
   115	        const name = selectedCategory.name;
   116	
   117	        // Cek apakah kategori dimulai dengan "Anti"
   118	        if (name.toLowerCase().startsWith("anti")) {
   119	            // Untuk kategori yang dimulai dengan "Anti"
   120	            // Ambil "A" dari "Anti" dan huruf pertama dari kata selanjutnya
   121	            const baseName = name.slice(4); // Hilangkan "Anti" dari awal
   122	            if (baseName.length > 0) {
   123	                return "A" + baseName.charAt(0).toUpperCase();
   124	            }
   125	            return "A";
   126	        } else {
   127	            // Untuk kategori lainnya, ambil 2 huruf pertama
   128	            if (name.length >= 2) {
   129	                return name.substring(0, 2).toUpperCase();
   130	            } else if (name.length === 1) {
   131	                return name.toUpperCase() + "X";
   132	            } else {
   133	                return "XX";
   134	            }
   135	        }
   136	    };
   137	
   138	    useEffect(() => {
   139	        fetchMasterData();
   140	    }, []);
   141	
   142	    useEffect(() => {
   143	        const generateItemCode = async () => {
   144	            // Jika tipe, kategori, atau satuan belum dipilih, keluar dari fungsi
   145	            if (!formData.type_id || !formData.category_id || !formData.unit_id)
   146	                return;
   147	
   148	            const typeCode = generateTypeCode(formData.type_id);
   149	            const unitCode = generateUnitCode(formData.unit_id);
   150	            const categoryCode = generateCategoryCode(formData.category_id);
   151	
   152	            const codePrefix = `${typeCode}${unitCode}${categoryCode}`;
   153	
   154	            // Cek database untuk mendapatkan urutan terakhir
   155	            try {
   156	                const { data } = await supabase
   157	                    .from("items")
   158	                    .select("code")
   159	                    .ilike("code", `${codePrefix}%`)
   160	                    .order("code", { ascending: false });
   161	
   162	                let sequence = 1; // Default mulai dari 1
   163	
   164	                if (data && data.length > 0) {
   165	                    // Ekstrak nomor urut dari kode yang sudah ada
   166	                    const lastSequenceStr = data[0].code.substring(codePrefix.length);
   167	                    const lastSequence = parseInt(lastSequenceStr);
   168	
   169	                    if (!isNaN(lastSequence)) {
   170	                        sequence = lastSequence + 1;
   171	                    }
   172	                }
   173	
   174	                // Format: membuat kode 2 digit (01, 02, ..., dst)
   175	                const sequenceStr = sequence.toString().padStart(2, "0");
   176	                const generatedCode = `${codePrefix}${sequenceStr}`;
   177	
   178	                // Update form
   179	                setFormData(prevFormData => ({
   180	                    ...prevFormData,
   181	                    code: generatedCode,
   182	                }));
   183	            } catch (error) {
   184	                console.error("Error generating item code:", error);
   185	            }
   186	        };
   187	
   188	        // Hanya generate code jika data master sudah dimuat dan semua pilihan sudah dipilih
   189	        if (formData.type_id && formData.category_id && formData.unit_id &&
   190	            categories.length > 0 && types.length > 0 && units.length > 0) {
   191	            generateItemCode();
   192	        }
   193	    // eslint-disable-next-line react-hooks/exhaustive-deps
   194	    }, [formData.type_id, formData.category_id, formData.unit_id, categories, types, units]);
   195	
   196	    const fetchMasterData = async () => {
   197	        setLoading(true);
   198	        try {
   199	            // Fetch categories
   200	            const { data: categoriesData } = await supabase
   201	                .from("item_categories")
   202	                .select("id, name")
   203	                .order("name");
   204	
   205	            // Fetch types
   206	            const { data: typesData } = await supabase
   207	                .from("item_types")
   208	                .select("id, name")
   209	                .order("name");
   210	
   211	            // Fetch units
   212	            const { data: unitsData } = await supabase
   213	                .from("item_units")
   214	                .select("id, name")
   215	                .order("name");
   216	
   217	            if (categoriesData) setCategories(categoriesData);
   218	            if (typesData) setTypes(typesData);
   219	            if (unitsData) setUnits(unitsData);
   220	        } catch (error) {
   221	            console.error("Error fetching master data:", error);
   222	        } finally {
   223	            setLoading(false);
   224	        }
   225	    };
   226	
   227	    const handleChange = (
   228	        e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
   229	        const { name, value, type } = e.target as HTMLInputElement;
   230	
   231	        if (name === "base_price" || name === "sell_price") {
   232	            // Untuk input harga
   233	            const numericInt = extractNumericValue(value);
   234	
   235	            // Update formData dengan nilai numerik
   236	            setFormData({
   237	                ...formData,
   238	                [name]: numericInt
   239	            });
   240	
   241	            // Update display value dengan format Rupiah
   242	            const formattedValue = formatRupiah(numericInt);
   243	            if (name === "base_price") {
   244	                setDisplayBasePrice(formattedValue);
   245	            } else {
   246	                setDisplaySellPrice(formattedValue);
   247	            }
   248	        } else if (type === "checkbox") {
   249	            const { checked } = e.target as HTMLInputElement;
   250	            setFormData({
   251	                ...formData,
   252	                [name]: checked,
   253	            });
   254	        } else if (type === "number") {
   255	            setFormData({
   256	                ...formData,
   257	                [name]: parseFloat(value) || 0,
   258	            });
   259	        } else {
   260	            setFormData({
   261	                ...formData,
   262	                [name]: value,
   263	            });
   264	        }
   265	    };
   266	
   267	    // Modifikasi handleChange untuk menjamin pemicu generate kode
   268	    const handleSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
   269	        const { name, value } = e.target;
   270	        setFormData(prevFormData => ({
   271	            ...prevFormData,
   272	            [name]: value,
   273	        }));
   274	    };
   275	
   276	    const handleSubmit = async (e: React.FormEvent) => {
   277	        e.preventDefault();
   278	        setSaving(true);
   279	
   280	        try {
   281	            // Check jika nama obat sudah ada
   282	            const { data: existingMedicine } = await supabase
   283	                .from("items")
   284	                .select("id")
   285	                .eq("name", formData.name);
   286	
   287	            if (existingMedicine && existingMedicine.length > 0) {
   288	                alert("Nama obat sudah ada. Silakan gunakan nama lain.");
   289	                setSaving(false);
   290	                return;
   291	            }
   292	
   293	            // 1. Insert item utama (dengan satuan dasar)
   294	            const mainItemData = {
   295	                name: formData.name,
   296	                category_id: formData.category_id,
   297	                type_id: formData.type_id,
   298	                unit_id: formData.unit_id,
   299	                base_price: formData.base_price,
   300	                sell_price: formData.sell_price,
   301	                stock: 0, // Default stok awal 0
   302	                min_stock: formData.min_stock,
   303	                description: formData.description || null,
   304	                is_active: formData.is_active,
   305	                rack: formData.rack || null,
   306	                code: formData.code,
   307	                is_medicine: formData.is_medicine,
   308	                unit_conversions: JSON.stringify(unitConversionHook.conversions),
   309	                has_expiry_date: formData.has_expiry_date,
   310	            };
   311	
   312	            const { data: newItem, error: mainError } = await supabase
   313	                .from("items")
   314	                .insert(mainItemData)
   315	                .select("id")
   316	                .single();
   317	
   318	            if (mainError) throw mainError;
   319	
   320	            // 2. Insert unit conversions ke tabel terpisah
   321	            if (unitConversionHook.conversions.length > 0 && newItem) {
   322	                // eslint-disable-next-line @typescript-eslint/no-explicit-any
   323	                const conversionRecords = unitConversionHook.conversions.map((uc: { unit: { id: any; name: any; }; conversion: any; basePrice: any; }) => ({
   324	                    item_id: newItem.id,
   325	                    unit_name: uc.unit.name,
   326	                    conversion_rate: uc.conversion,
   327	                    base_price: uc.basePrice,
   328	                    created_at: new Date()
   329	                }));
   330	
   331	                // Insert ke tabel unit_conversions
   332	                const { error: conversionError } = await supabase
   333	                    .from("unit_conversions")
   334	                    .insert(conversionRecords);
   335	
   336	                if (conversionError) {
   337	                    console.error("Error saving unit conversions:", conversionError);
   338	                    // Lanjutkan meskipun ada error pada konversi unit
   339	                }
   340	            }
   341	
   342	            // Redirect ke halaman daftar obat
   343	            navigate("/master-data/items");
   344	        } catch (error) {
   345	            console.error("Error saving item:", error);
   346	            alert("Gagal menyimpan data item. Silakan coba lagi.");
   347	        } finally {
   348	            setSaving(false);
   349	        }
   350	    };
   351	
   352	    return {
   353	        formData,
   354	        displayBasePrice,
   355	        displaySellPrice,
   356	        categories,
   357	        types,
   358	        units,
   359	        loading,
   360	        saving,
   361	        handleChange,
   362	        handleSelectChange,
   363	        handleSubmit,
   364	        unitConversionHook,
   365	        updateFormData
   366	    };
   367	};


===============================================
= File: ./src/hooks/useUnitConversion.ts 
===============================================

     1	import { useState, useEffect, useCallback } from "react";
     2	import { supabase } from "../lib/supabase";
     3	
     4	export interface UnitConversion {
     5	    id: string;
     6	    unit: {
     7	        id: string;
     8	        name: string;
     9	    };
    10	    conversion: number;
    11	    basePrice: number;
    12	}
    13	
    14	export interface UseUnitConversionReturn {
    15	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    16	    conversions: any;
    17	    baseUnit: string;
    18	    setBaseUnit: React.Dispatch<React.SetStateAction<string>>;
    19	    basePrice: number;
    20	    setBasePrice: React.Dispatch<React.SetStateAction<number>>;
    21	    unitConversions: UnitConversion[];
    22	    addUnitConversion: (unitConversion: Omit<UnitConversion, "id" | "basePrice">) => void;
    23	    removeUnitConversion: (id: string) => void;
    24	    unitConversionFormData: {
    25	        unit: string;
    26	        conversion: number;
    27	    };
    28	    setUnitConversionFormData: React.Dispatch<React.SetStateAction<{
    29	        unit: string;
    30	        conversion: number;
    31	    }>>;
    32	    recalculateBasePrices: () => void;
    33	    availableUnits: UnitData[];
    34	}
    35	
    36	export interface UnitData {
    37	    id: string;
    38	    name: string;
    39	}
    40	
    41	export const useUnitConversion = (): UseUnitConversionReturn => {
    42	    const [baseUnit, setBaseUnit] = useState<string>("");
    43	    const [basePrice, setBasePrice] = useState<number>(0);
    44	    const [unitConversions, setUnitConversions] = useState<UnitConversion[]>([]);
    45	    const [availableUnits, setAvailableUnits] = useState<UnitData[]>([]);
    46	
    47	    const [unitConversionFormData, setUnitConversionFormData] = useState({
    48	        unit: "",
    49	        conversion: 0,
    50	    });
    51	
    52	    // Fetch available units from database
    53	    useEffect(() => {
    54	        const fetchUnits = async () => {
    55	            const { data } = await supabase
    56	                .from("item_units")
    57	                .select("id, name")
    58	                .order("name");
    59	            
    60	            if (data) {
    61	                setAvailableUnits(data);
    62	            }
    63	        };
    64	
    65	        fetchUnits();
    66	    }, []);
    67	
    68	    // Fungsi untuk menambah konversi satuan
    69	    const addUnitConversion = useCallback((unitConversion: Omit<UnitConversion, "id" | "basePrice">) => {
    70	        // Hitung harga per unit kecil (misal: per tablet)
    71	        // Jika 1 strip = 10 tablet dan harga strip 50.000,
    72	        // maka harga per tablet = 50.000 / 10 = 5.000
    73	        const calculatedBasePrice = basePrice / unitConversion.conversion;
    74	        
    75	        const newUnitConversion: UnitConversion = {
    76	            ...unitConversion,
    77	            id: Date.now().toString(),
    78	            basePrice: calculatedBasePrice,
    79	        };
    80	        setUnitConversions(prevConversions => [...prevConversions, newUnitConversion]);
    81	    }, [basePrice]);
    82	
    83	    // Fungsi untuk menghapus konversi satuan
    84	    const removeUnitConversion = useCallback((id: string) => {
    85	        setUnitConversions(prevConversions => prevConversions.filter(uc => uc.id !== id));
    86	    }, []);
    87	
    88	    // Menghitung ulang harga pokok untuk semua konversi berdasarkan harga pokok dasar
    89	    const recalculateBasePrices = useCallback(() => {
    90	        if (basePrice <= 0 || unitConversions.length === 0) return;
    91	        
    92	        setUnitConversions(prevConversions => 
    93	            prevConversions.map(uc => ({
    94	                ...uc,
    95	                basePrice: basePrice > 0 ? (basePrice / uc.conversion) : 0
    96	            }))
    97	        );
    98	    // eslint-disable-next-line react-hooks/exhaustive-deps
    99	    }, [basePrice]);
   100	
   101	    return {
   102	        baseUnit,
   103	        setBaseUnit,
   104	        basePrice,
   105	        setBasePrice,
   106	        conversions: unitConversions,
   107	        unitConversions,
   108	        addUnitConversion,
   109	        removeUnitConversion,
   110	        unitConversionFormData,
   111	        setUnitConversionFormData,
   112	        recalculateBasePrices,
   113	        availableUnits
   114	    };
   115	};


===============================================
= File: ./src/hooks/useItemSelection.ts 
===============================================

     1	import { useState, useEffect } from 'react';
     2	import { supabase } from '../lib/supabase';
     3	
     4	export interface Item {
     5	    id: string;
     6	    name: string;
     7	    code?: string;
     8	    base_price: number;
     9	    stock: number;
    10	    unit_id: string;
    11	    base_unit: string;
    12	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    13	    unit_conversions: any[];
    14	}
    15	
    16	export const useItemSelection = () => {
    17	    const [items, setItems] = useState<Item[]>([]);
    18	    const [searchItem, setSearchItem] = useState('');
    19	    const [showItemDropdown, setShowItemDropdown] = useState(false);
    20	    const [selectedItem, setSelectedItem] = useState<Item | null>(null);
    21	
    22	    useEffect(() => {
    23	        fetchItems();
    24	    }, []);
    25	
    26	    const fetchItems = async () => {
    27	        try {
    28	            const { data, error } = await supabase
    29	                .from('items')
    30	                .select('id, name, code, base_price, stock, unit_id, base_unit, unit_conversions')
    31	                .order('name');
    32	                
    33	            if (error) throw error;
    34	            setItems(data || []);
    35	        } catch (error) {
    36	            console.error('Error fetching items:', error);
    37	        }
    38	    };
    39	    
    40	    const getItemByID = (itemId: string): Item | undefined => {
    41	        return items.find(item => item.id === itemId);
    42	    };
    43	
    44	    // Filter items based on search input
    45	    const filteredItems = items.filter(item =>
    46	        item.name.toLowerCase().includes(searchItem.toLowerCase()) || 
    47	        (item.code && item.code.toLowerCase().includes(searchItem.toLowerCase()))
    48	    );
    49	
    50	    return {
    51	        items,
    52	        searchItem,
    53	        setSearchItem,
    54	        showItemDropdown,
    55	        setShowItemDropdown,
    56	        selectedItem,
    57	        setSelectedItem,
    58	        filteredItems,
    59	        getItemByID
    60	    };
    61	};


===============================================
= File: ./src/hooks/usePurchaseForm.ts 
===============================================

     1	import { useState, useEffect } from 'react';
     2	import { useNavigate } from 'react-router-dom';
     3	import { supabase } from '../lib/supabase';
     4	
     5	interface Supplier {
     6	    id: string;
     7	    name: string;
     8	}
     9	
    10	export interface PurchaseFormData {
    11	    supplier_id: string;
    12	    invoice_number: string;
    13	    date: string;
    14	    payment_status: string;
    15	    payment_method: string;
    16	    notes: string;
    17	    vat_percentage: number;
    18	    is_vat_included: boolean;
    19	}
    20	
    21	export interface PurchaseItem {
    22	    id: string;
    23	    item_id: string;
    24	    item_name: string;
    25	    quantity: number;
    26	    price: number;
    27	    discount: number;
    28	    subtotal: number;
    29	    unit: string;
    30	    vat_percentage: number;
    31	    batch_no: string | null;
    32	    expiry_date: string | null;
    33	    unit_conversion_rate: number;
    34	}
    35	
    36	export const usePurchaseForm = () => {
    37	    const navigate = useNavigate();
    38	    const [loading, setLoading] = useState(false);
    39	    const [suppliers, setSuppliers] = useState<Supplier[]>([]);
    40	    const [purchaseItems, setPurchaseItems] = useState<PurchaseItem[]>([]);
    41	    
    42	    // Form data
    43	    const [formData, setFormData] = useState<PurchaseFormData>({
    44	        supplier_id: '',
    45	        invoice_number: '',
    46	        date: new Date().toISOString().slice(0, 10),
    47	        payment_status: 'unpaid',
    48	        payment_method: 'cash',
    49	        vat_percentage: 11.0,
    50	        is_vat_included: true,
    51	        notes: ''
    52	    });
    53	    
    54	    // Calculate total
    55	    const total = purchaseItems.reduce((sum, item) => sum + item.subtotal, 0);
    56	    
    57	    useEffect(() => {
    58	        fetchSuppliers();
    59	    }, []);
    60	    
    61	    const fetchSuppliers = async () => {
    62	        try {
    63	            const { data, error } = await supabase
    64	                .from('suppliers')
    65	                .select('id, name')
    66	                .order('name');
    67	                
    68	            if (error) throw error;
    69	            setSuppliers(data || []);
    70	        } catch (error) {
    71	            console.error('Error fetching suppliers:', error);
    72	        }
    73	    };
    74	    
    75	    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    76	        const { name, value, type, checked } = e.target as HTMLInputElement;
    77	        setFormData({
    78	            ...formData,
    79	            [name]: type === 'checkbox' ? checked : value
    80	        });
    81	    };
    82	
    83	    const addItem = (newItem: PurchaseItem) => {
    84	        const newItems = [...purchaseItems, {
    85	            ...newItem,
    86	            vat_percentage: 0,
    87	            batch_no: null,
    88	            expiry_date: null,
    89	            unit: newItem.unit || 'Unit',
    90	            unit_conversion_rate: 1
    91	        }];
    92	        recalculateSubtotal(newItems);
    93	        setPurchaseItems(newItems);
    94	    };
    95	    
    96	    const updateItem = (id: string, field: 'quantity' | 'price' | 'discount', value: number) => {
    97	        const updatedItems = purchaseItems.map(item => {
    98	            if (item.id === id) {
    99	                const quantity = field === 'quantity' ? value : item.quantity;
   100	                const price = field === 'price' ? value : item.price;
   101	                const discount = field === 'discount' ? value : item.discount;
   102	                
   103	                // Hitung subtotal dengan diskon
   104	                let subtotal = quantity * price;
   105	                if (discount > 0) {
   106	                    const discountAmount = subtotal * (discount / 100);
   107	                    subtotal -= discountAmount;
   108	                }
   109	                
   110	                // Tambahkan VAT jika tidak termasuk
   111	                if (item.vat_percentage > 0 && !formData.is_vat_included) {
   112	                    const vatAmount = subtotal * (item.vat_percentage / 100);
   113	                    subtotal += vatAmount;
   114	                }
   115	                return {
   116	                    ...item,
   117	                    [field]: value,
   118	                    subtotal: subtotal
   119	                };
   120	            }
   121	            return item;
   122	        });
   123	        
   124	        setPurchaseItems(updatedItems);
   125	    };
   126	    
   127	    // Fungsi untuk memperbarui VAT per item
   128	    const updateItemVat = (id: string, vatPercentage: number) => {
   129	        const updatedItems = purchaseItems.map(item => {
   130	            if (item.id === id) {
   131	                // Hitung subtotal dengan diskon dan VAT baru
   132	                let subtotal = item.quantity * item.price;
   133	                if (item.discount > 0) {
   134	                    const discountAmount = subtotal * (item.discount / 100);
   135	                    subtotal -= discountAmount;
   136	                }
   137	                
   138	                // Tambahkan VAT jika tidak termasuk
   139	                if (vatPercentage > 0 && !formData.is_vat_included) {
   140	                    const vatAmount = subtotal * (vatPercentage / 100);
   141	                    subtotal += vatAmount;
   142	                }
   143	                
   144	                return {
   145	                    ...item,
   146	                    vat_percentage: vatPercentage,
   147	                    subtotal: subtotal
   148	                };
   149	            }
   150	            return item;
   151	        });
   152	        
   153	        setPurchaseItems(updatedItems);
   154	    };
   155	
   156	    // Fungsi untuk memperbarui tanggal kadaluarsa
   157	    const updateItemExpiry = (id: string, expiryDate: string) => {
   158	        setPurchaseItems(purchaseItems.map(item => 
   159	            item.id === id ? {...item, expiry_date: expiryDate} : item
   160	        ));
   161	    };
   162	
   163	    // Fungsi untuk memperbarui nomor batch
   164	    const updateItemBatchNo = (id: string, batchNo: string) => {
   165	        setPurchaseItems(purchaseItems.map(item => 
   166	            item.id === id ? {...item, batch_no: batchNo} : item
   167	        ));
   168	    };
   169	
   170	    // Fungsi untuk menghitung ulang semua subtotal
   171	    const recalculateSubtotal = (items = purchaseItems) => {
   172	        return items.map(item => {
   173	            let subtotal = item.quantity * item.price;
   174	            if (item.discount > 0) {
   175	                const discountAmount = subtotal * (item.discount / 100);
   176	                subtotal -= discountAmount;
   177	            }
   178	            
   179	            if (item.vat_percentage > 0 && !formData.is_vat_included) {
   180	                const vatAmount = subtotal * (item.vat_percentage / 100);
   181	                subtotal += vatAmount;
   182	            }
   183	            
   184	            return {
   185	                ...item,
   186	                subtotal: subtotal
   187	            };
   188	        });
   189	    };
   190	    
   191	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
   192	    const handleUnitChange = (id: string, unitName: string, getItemByID: (id: string) => any) => {
   193	        const updatedItems = purchaseItems.map(item => {
   194	            if (item.id === id) {
   195	                const itemData = getItemByID(item.item_id);
   196	                if (!itemData) return item;
   197	                
   198	                let price = itemData.base_price;
   199	                let conversionRate = 1;
   200	                
   201	                // Jika bukan satuan dasar, cari harga berdasarkan konversi
   202	                if (unitName !== itemData.base_unit) {
   203	                    const unitConversion = itemData.unit_conversions?.find((uc: { unit_name: string; }) => uc.unit_name === unitName);
   204	                    if (unitConversion) {
   205	                        price = unitConversion.base_price || itemData.base_price / unitConversion.conversion_rate;
   206	                        conversionRate = unitConversion.conversion_rate;
   207	                    }
   208	                }
   209	
   210	                const discountAmount = price * item.quantity * (item.discount / 100);
   211	                
   212	                return {
   213	                    ...item,
   214	                    unit: unitName,
   215	                    price: price,
   216	                    subtotal: price * item.quantity - discountAmount,
   217	                    unit_conversion_rate: conversionRate
   218	                };
   219	            }
   220	            return item;
   221	        });
   222	        
   223	        setPurchaseItems(updatedItems);
   224	    };
   225	    
   226	    const removeItem = (id: string) => {
   227	        setPurchaseItems(purchaseItems.filter(item => item.id !== id));
   228	    };
   229	    
   230	    // Calculate total VAT amount
   231	    const calculateTotalVat = () => {
   232	        return purchaseItems.reduce((total, item) => {
   233	            if (item.vat_percentage > 0) {
   234	                const subtotalBeforeVat = item.subtotal / (1 + item.vat_percentage / 100);
   235	                const vatAmount = item.subtotal - subtotalBeforeVat;
   236	                return total + vatAmount;
   237	            }
   238	            return total;
   239	        }, 0);
   240	    };
   241	    
   242	    const handleSubmit = async (e: React.FormEvent) => {
   243	        e.preventDefault();
   244	        
   245	        if (purchaseItems.length === 0) {
   246	            alert('Silakan tambahkan minimal satu item');
   247	            return;
   248	        }
   249	        
   250	        try {
   251	            setLoading(true);
   252	            
   253	            // Insert purchase record
   254	            const { data: purchaseData, error: purchaseError } = await supabase
   255	                .from('purchases')
   256	                .insert({
   257	                    supplier_id: formData.supplier_id || null,
   258	                    invoice_number: formData.invoice_number,
   259	                    date: formData.date,
   260	                    total: total,
   261	                    payment_status: formData.payment_status,
   262	                    payment_method: formData.payment_method, 
   263	                    vat_percentage: formData.vat_percentage,
   264	                    is_vat_included: formData.is_vat_included,
   265	                    vat_amount: calculateTotalVat(),
   266	                    notes: formData.notes || null
   267	                })
   268	                .select('id')
   269	                .single();
   270	                
   271	            if (purchaseError) throw purchaseError; 
   272	            
   273	            // Insert purchase items
   274	            const purchaseItemsData = purchaseItems.map(item => ({
   275	                purchase_id: purchaseData.id,
   276	                item_id: item.item_id,
   277	                quantity: item.quantity,
   278	                discount: item.discount,
   279	                price: item.price,
   280	                subtotal: item.subtotal,
   281	                unit: item.unit,
   282	                vat_percentage: item.vat_percentage,
   283	                batch_no: item.batch_no,
   284	                expiry_date: item.expiry_date
   285	            }));
   286	            
   287	            const { error: itemsError } = await supabase
   288	                .from('purchase_items')
   289	                .insert(purchaseItemsData);
   290	                
   291	            if (itemsError) throw itemsError;
   292	            
   293	            // Update item stocks
   294	            for (const item of purchaseItems) {
   295	                // Ambil data item untuk mendapatkan satuan dasar, stok saat ini, dan konversi
   296	                const { data: itemData } = await supabase
   297	                    .from('items')
   298	                    .select('stock, base_unit, unit_conversions')
   299	                    .eq('id', item.item_id)
   300	                    .single();
   301	                
   302	                if (itemData) {
   303	                    let quantityInBaseUnit = item.quantity;
   304	                    
   305	                    // Jika satuan pembelian berbeda dengan satuan dasar, konversikan
   306	                    if (item.unit !== itemData.base_unit) {
   307	                        const unitConversion = itemData.unit_conversions.find(
   308	                            (uc: { unit_name: string; }) => uc.unit_name === item.unit
   309	                        );
   310	                        
   311	                        if (unitConversion) {
   312	                            // Konversikan ke satuan dasar
   313	                            quantityInBaseUnit = item.quantity / unitConversion.conversion_rate;
   314	                        }
   315	                    }
   316	                    
   317	                    // Hitung stok baru dan update
   318	                    const newStock = (itemData.stock || 0) + quantityInBaseUnit;
   319	                    await supabase
   320	                        .from('items').update({ stock: newStock }).eq('id', item.item_id);
   321	                }
   322	            }
   323	            
   324	            navigate('/purchases');
   325	        } catch (error) {
   326	            console.error('Error creating purchase:', error);
   327	            alert('Gagal menyimpan pembelian. Silakan coba lagi.');
   328	        } finally {
   329	            setLoading(false);
   330	        }
   331	    };
   332	
   333	    return {
   334	        formData,
   335	        suppliers,
   336	        purchaseItems,
   337	        total,
   338	        loading,
   339	        handleChange,
   340	        addItem,
   341	        updateItem,
   342	        updateItemVat,
   343	        updateItemExpiry,
   344	        updateItemBatchNo,
   345	        handleUnitChange,
   346	        removeItem,
   347	        handleSubmit
   348	    };
   349	};


===============================================
= File: ./src/index.css 
===============================================

     1	@tailwind base;
     2	@tailwind components;
     3	@tailwind utilities;
     4	
     5	:root {
     6	  font-family: Poppins, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
     7	    "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji",
     8	    "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
     9	  line-height: 1.5;
    10	  /* font-weight: 400; */
    11	  font-synthesis: none;
    12	  text-rendering: optimizeLegibility;
    13	  -webkit-font-smoothing: antialiased;
    14	  -moz-osx-font-smoothing: grayscale;
    15	}
    16	
    17	a {
    18	  /* font-weight: 500; */
    19	  color: #646cff;
    20	  text-decoration: inherit;
    21	}
    22	a:hover {
    23	  color: #1a73e8;
    24	}
    25	
    26	body {
    27	  margin: 0;
    28	  min-width: 320px;
    29	  min-height: 100vh;
    30	  color: #213547;
    31	  background-color: #ffffff;
    32	}
    33	
    34	h1 {
    35	  font-size: 3.2em;
    36	  line-height: 1.1;
    37	}
    38	
    39	


===============================================
= File: ./src/pages/master-data/ItemList.tsx 
===============================================

     1	import { useEffect, useState } from "react";
     2	import { Link } from "react-router-dom";
     3	import { supabase } from "../../lib/supabase";
     4	import { FaPlus, FaEdit, FaTrash, FaSearch } from "react-icons/fa";
     5	import { Card } from "../../components/ui/Card";
     6	import { Button } from "../../components/ui/Button";
     7	import { Table, TableHead, TableBody, TableRow, TableCell, TableHeader } from "../../components/ui/Table";
     8	import { Pagination } from "../../components/ui/Pagination";
     9	import { Loading } from "../../components/ui/Loading";
    10	
    11	interface Item {
    12	    id: string;
    13	    name: string;
    14	    code: string;
    15	    category: { name: string };
    16	    type: { name: string };
    17	    unit: { name: string };
    18	    base_price: number;
    19	    sell_price: number;
    20	    stock: number;
    21	}
    22	
    23	const ItemList = () => {
    24	    const [items, setItems] = useState<Item[]>([]);
    25	    const [loading, setLoading] = useState(true);
    26	    const [tableLoading, setTableLoading] = useState(false);
    27	    const [search, setSearch] = useState("");
    28	    const [debouncedSearch, setDebouncedSearch] = useState("");
    29	    const [currentPage, setCurrentPage] = useState(1);
    30	    const [totalItems, setTotalItems] = useState(0);
    31	    const [itemsPerPage, setItemsPerPage] = useState(10);
    32	
    33	    // Efek untuk debounce pencarian
    34	    useEffect(() => {
    35	        const timer = setTimeout(() => {
    36	            setDebouncedSearch(search);
    37	            setCurrentPage(1); // Reset ke halaman pertama saat pencarian berubah
    38	        }, 500);
    39	
    40	        return () => clearTimeout(timer);
    41	    }, [search]);
    42	
    43	    // Efek untuk mengambil data saat parameter berubah
    44	    useEffect(() => {
    45	        fetchItems(currentPage, debouncedSearch, itemsPerPage);
    46	    // eslint-disable-next-line react-hooks/exhaustive-deps
    47	    }, [currentPage, debouncedSearch, itemsPerPage]);
    48	
    49	    const fetchItems = async (page = 1, searchTerm = '', limit = 10) => {
    50	        try {
    51	            // Hanya set loading untuk tabel, bukan seluruh komponen
    52	            setTableLoading(true);
    53	
    54	            // Buat query dasar
    55	            let query = supabase
    56	                .from("items")
    57	                .select(`
    58	                id, 
    59	                name, 
    60	                code,
    61	                base_price, 
    62	                sell_price, 
    63	                stock,
    64	                category_id,
    65	                type_id,
    66	                unit_id
    67	                `);
    68	
    69	            // Tambahkan pencarian jika ada
    70	            if (searchTerm) {
    71	                query = query.ilike('name', `%${searchTerm}%`);
    72	            }
    73	
    74	            // Ambil total jumlah item untuk pagination
    75	            // Membuat query terpisah untuk menghitung total item
    76	            let countQuery = supabase
    77	                .from("items")
    78	                .select('id', { count: 'exact' });
    79	
    80	            // Tambahkan pencarian jika ada
    81	            if (searchTerm) {
    82	                countQuery = countQuery.ilike('name', `%${searchTerm}%`);
    83	            }
    84	
    85	            const { count, error: countError } = await countQuery;
    86	            if (countError) throw countError;
    87	
    88	            // Tambahkan pagination
    89	            const from = (page - 1) * limit;
    90	            const to = from + limit - 1;
    91	
    92	            const { data, error } = await query
    93	                .order('name')
    94	                .range(from, to);
    95	
    96	            if (error) {
    97	                console.error("Error fetching items:", error);
    98	                throw error;
    99	            }
   100	
   101	            // Ambil data referensi
   102	            const { data: categories } = await supabase.from("item_categories").select("id, name");
   103	            const { data: types } = await supabase.from("item_types").select("id, name");
   104	            const { data: units } = await supabase.from("item_units").select("id, name");
   105	
   106	            // Gabungkan data
   107	            const completedData = (data || []).map(item => ({
   108	                id: item.id,
   109	                name: item.name,
   110	                code: item.code,
   111	                base_price: item.base_price,
   112	                sell_price: item.sell_price,
   113	                stock: item.stock,
   114	                category: {
   115	                    name: categories?.find(cat => cat.id === item.category_id)?.name || ""
   116	                },
   117	                type: { name: types?.find(t => t.id === item.type_id)?.name || "" },
   118	                unit: { name: units?.find(u => u.id === item.unit_id)?.name || "" }
   119	            }));
   120	
   121	            setTotalItems(count || 0);
   122	            setItems(completedData);
   123	        } catch (error) {
   124	            console.error("Error fetching items:", error);
   125	        } finally {
   126	            setTableLoading(false);
   127	            // Setelah loading pertama, set loading utama menjadi false
   128	            if (loading) {
   129	                setLoading(false);
   130	            }
   131	        }
   132	    };
   133	
   134	    const handlePageChange = (newPage: number) => {
   135	        setCurrentPage(newPage);
   136	    };
   137	
   138	    const handleItemsPerPageChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
   139	        setItemsPerPage(Number(e.target.value));
   140	        setCurrentPage(1); // Reset ke halaman pertama
   141	    };
   142	
   143	    const totalPages = Math.ceil(totalItems / itemsPerPage);
   144	
   145	    return (
   146	        <Card>
   147	            <div className="flex justify-between items-center mb-6">
   148	                <h1 className="text-2xl font-bold text-gray-800">Daftar Item</h1>
   149	
   150	                <Link
   151	                    to="/master-data/items/add"
   152	                >
   153	                    <Button variant="primary">
   154	                        <FaPlus className="mr-2" />
   155	                        Tambah Item Baru
   156	                    </Button>
   157	                </Link>
   158	            </div>
   159	
   160	            <div className="mb-4 relative">
   161	                <input
   162	                    type="text"
   163	                    placeholder="Cari item..."
   164	                    className="w-full p-3 border rounded-md pl-10"
   165	                    value={search}
   166	                    onChange={(e) => setSearch(e.target.value)}
   167	                />
   168	                <FaSearch className="absolute left-3 top-3.5 text-gray-400" />
   169	            </div>
   170	
   171	            {loading ? (
   172	                <Loading />
   173	            ) : (
   174	                <>
   175	                    {tableLoading ? (
   176	                        <div>
   177	                            <Loading/>
   178	                        </div>
   179	                    ) : (
   180	                        <Table>
   181	                            <TableHead>
   182	                                <TableRow>
   183	                                    <TableHeader>Nama Item</TableHeader>
   184	                                    <TableHeader>Kode</TableHeader>
   185	                                    <TableHeader>Kategori</TableHeader>
   186	                                    <TableHeader>Jenis</TableHeader>
   187	                                    <TableHeader>Satuan</TableHeader>
   188	                                    <TableHeader className="text-right">Harga Pokok</TableHeader>
   189	                                    <TableHeader className="text-right">Harga Jual</TableHeader>
   190	                                    <TableHeader className="text-right">Stok</TableHeader>
   191	                                    <TableHeader className="text-center">Aksi</TableHeader>
   192	                                </TableRow>
   193	                            </TableHead>
   194	                            <TableBody>
   195	                                {items.length === 0 ? (
   196	                                    <TableRow>
   197	                                        <TableCell
   198	                                            colSpan={9}
   199	                                            className="text-center text-gray-600"
   200	                                        >
   201	                                            {debouncedSearch ? `Tidak ada item dengan nama "${debouncedSearch}"` : "Tidak ada data item yang ditemukan"}
   202	                                        </TableCell>
   203	                                    </TableRow>
   204	                                ) : (
   205	                                    items.map((item) => (
   206	                                        <TableRow key={item.id}>
   207	                                            <TableCell>{item.name}</TableCell>
   208	                                            <TableCell>{item.code}</TableCell>
   209	                                            <TableCell>{item.category.name}</TableCell>
   210	                                            <TableCell>{item.type.name}</TableCell>
   211	                                            <TableCell>{item.unit.name}</TableCell>
   212	                                            <TableCell className="text-right">
   213	                                                {item.base_price.toLocaleString("id-ID", {
   214	                                                    style: "currency",
   215	                                                    currency: "IDR",
   216	                                                })}
   217	                                            </TableCell>
   218	                                            <TableCell className="text-right">
   219	                                                {item.sell_price.toLocaleString("id-ID", {
   220	                                                    style: "currency",
   221	                                                    currency: "IDR",
   222	                                                })}
   223	                                            </TableCell>
   224	                                            <TableCell className="text-right">{item.stock}</TableCell>
   225	                                            <TableCell className="text-center">
   226	                                                <div className="flex justify-center space-x-2">
   227	                                                    <Link
   228	                                                        to={`/master-data/items/edit/${item.id}`}
   229	                                                    >
   230	                                                        <Button variant="secondary" size="sm">
   231	                                                            <FaEdit />
   232	                                                        </Button>
   233	                                                    </Link>
   234	                                                    <Button
   235	                                                        variant="danger"
   236	                                                        size="sm"
   237	                                                        onClick={() => handleDelete(item.id)}
   238	                                                    >
   239	                                                        <FaTrash />
   240	                                                    </Button>
   241	                                                </div>
   242	                                            </TableCell>
   243	                                        </TableRow>
   244	                                    ))
   245	                                )}
   246	                            </TableBody>
   247	                        </Table>
   248	                    )}
   249	                    <Pagination 
   250	                        currentPage={currentPage}
   251	                        totalPages={totalPages}
   252	                        totalItems={totalItems}
   253	                        itemsPerPage={itemsPerPage}
   254	                        itemsCount={items.length}
   255	                        onPageChange={handlePageChange}
   256	                        onItemsPerPageChange={handleItemsPerPageChange}
   257	                    />
   258	                </>
   259	            )}
   260	        </Card>
   261	    );
   262	
   263	    async function handleDelete(id: string) {
   264	        if (window.confirm("Apakah Anda yakin ingin menghapus item ini?")) {
   265	            try {
   266	                const { error } = await supabase
   267	                    .from("items")
   268	                    .delete()
   269	                    .eq("id", id);
   270	
   271	                if (error) throw error;
   272	
   273	                // Refresh data
   274	                fetchItems(currentPage, debouncedSearch, itemsPerPage);
   275	            } catch (error) {
   276	                console.error("Error deleting item:", error);
   277	                alert("Gagal menghapus item. Silakan coba lagi.");
   278	            }
   279	        }
   280	    }
   281	};
   282	
   283	export default ItemList;


===============================================
= File: ./src/pages/master-data/AddItem.tsx 
===============================================

     1	import { useNavigate } from "react-router-dom";
     2	import { useEffect } from "react";
     3	import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "../../components/ui/Card";
     4	import { FormActions } from "../../components/ui/FormActions";
     5	import { Input } from "../../components/ui/Input";
     6	import { FormSection, FormField } from "../../components/ui/FormComponents";
     7	import { useAddItemForm } from "../../hooks/useAddItemForm";
     8	import UnitConversionManager from "../../components/tools/UnitConversionManager";
     9	
    10	// Style constants
    11	const inputClassName = "w-full";
    12	const selectClassName = "bg-white w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent";
    13	const addButtonClassName = "ml-2 bg-green-500 text-white p-2 rounded-md hover:bg-green-600";
    14	const radioGroupClassName = "space-x-6";
    15	const textareaClassName = "w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent";
    16	
    17	const AddItem = () => {
    18	    const navigate = useNavigate();
    19	
    20	    const {
    21	        formData, displayBasePrice, categories, types, units,
    22	        saving, handleChange, handleSelectChange: originalHandleSelectChange, handleSubmit, updateFormData,
    23	        unitConversionHook
    24	    } = useAddItemForm();
    25	
    26	    // Modified handleSelectChange to update baseUnit automatically
    27	    const handleSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    28	        const { name, value } = e.target;
    29	        originalHandleSelectChange(e);
    30	        
    31	        // Set baseUnit automatically when unit_id changes
    32	        if (name === 'unit_id' && value) {
    33	            const selectedUnit = units.find(unit => unit.id === value);
    34	            if (selectedUnit) {
    35	                unitConversionHook.setBaseUnit(selectedUnit.name);
    36	            }
    37	        }
    38	    };
    39	
    40	    // Efek untuk memperbarui basePrice pada unitConversionHook saat harga pokok berubah
    41	    useEffect(() => {
    42	        // Perbarui nilai basePrice di unitConversionHook ketika formData.base_price berubah
    43	        if (formData.base_price > 0) {
    44	            unitConversionHook.setBasePrice(formData.base_price);
    45	        }
    46	    // eslint-disable-next-line react-hooks/exhaustive-deps
    47	    }, [formData.base_price]);
    48	
    49	    return (
    50	        <div>
    51	            <Card>
    52	                <CardHeader>
    53	                    <CardTitle>Tambah Data Item Baru</CardTitle>
    54	                </CardHeader>
    55	
    56	                <form onSubmit={handleSubmit}>
    57	                    <CardContent className="space-y-6">
    58	                        <FormSection title="Data Umum">
    59	                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
    60	                                <FormField label="Kode Item">
    61	                                    <Input
    62	                                        name="code"
    63	                                        value={formData.code}
    64	                                        disabled={true}
    65	                                        className={inputClassName}
    66	                                        style={formData.code === "" ? {
    67	                                            background: 'repeating-linear-gradient(45deg, #f0f0f0, #f0f0f0 10px, #e0e0e0 10px, #e0e0e0 20px)'
    68	                                        } : {}}
    69	                                    />
    70	                                </FormField>
    71	                            </div>
    72	
    73	                            <FormField label="Nama Item">
    74	                                <Input
    75	                                    name="name"
    76	                                    value={formData.name}
    77	                                    onChange={handleChange}
    78	                                    className={inputClassName}
    79	                                    required
    80	                                />
    81	                            </FormField>
    82	
    83	                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
    84	                                <FormField label="Jenis">
    85	                                    <div className="flex">
    86	                                        {categories.length === 0 && (
    87	                                            <span className="inline-block w-4 h-4 mr-2 border-t-2 border-primary rounded-full animate-spin"></span>
    88	                                        )}
    89	                                        <select
    90	                                            name="type_id" 
    91	                                            value={formData.type_id}
    92	                                            onChange={handleSelectChange}
    93	                                            className={selectClassName}
    94	                                            required
    95	                                        >
    96	                                            <option value="">-- Pilih Jenis --</option>
    97	                                            {types.map((type) => (
    98	                                                <option key={type.id} value={type.id}>
    99	                                                    {type.name}
   100	                                                </option>
   101	                                            ))}
   102	                                        </select>
   103	                                        <button
   104	                                            type="button"
   105	                                            className={addButtonClassName}
   106	                                            onClick={() => navigate("/master-data/types/add")}
   107	                                        >
   108	                                            +
   109	                                        </button>
   110	                                    </div>
   111	                                </FormField>
   112	
   113	                                <FormField label="Kategori">
   114	                                    <div className="flex">
   115	                                        <select
   116	                                            name="category_id"
   117	                                            value={formData.category_id}
   118	                                            onChange={handleSelectChange}
   119	                                            className={selectClassName}
   120	                                            required
   121	                                        >
   122	                                            <option value="">-- Pilih Kategori --</option>
   123	                                            {categories.map((category) => (
   124	                                                <option key={category.id} value={category.id}>
   125	                                                    {category.name}
   126	                                                </option>
   127	                                            ))}
   128	                                        </select>
   129	                                        <button
   130	                                            type="button"
   131	                                            className={addButtonClassName}
   132	                                            onClick={() => navigate("/master-data/categories/add")}
   133	                                        >
   134	                                            +
   135	                                        </button>
   136	                                    </div>
   137	                                </FormField>
   138	                            </div>
   139	
   140	                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
   141	                                <FormField label="Satuan">
   142	                                    <div className="flex">
   143	                                        <select
   144	                                            name="unit_id"
   145	                                            value={formData.unit_id}
   146	                                            onChange={handleSelectChange}
   147	                                            className={selectClassName}
   148	                                            required
   149	                                        >
   150	                                            <option value="">-- Pilih Satuan --</option>
   151	                                            {units.map((unit) => (
   152	                                                <option key={unit.id} value={unit.id}>
   153	                                                    {unit.name}
   154	                                                </option>
   155	                                            ))}
   156	                                        </select>
   157	                                        <button
   158	                                            type="button"
   159	                                            className={addButtonClassName}
   160	                                            onClick={() => navigate("/master-data/units/add")}
   161	                                        >
   162	                                            +
   163	                                        </button>
   164	                                    </div>
   165	                                </FormField>
   166	
   167	                                <FormField label="Rak">
   168	                                    <Input
   169	                                        name="rack"
   170	                                        value={formData.rack}
   171	                                        onChange={handleChange}
   172	                                        className={inputClassName}
   173	                                    />
   174	                                </FormField>
   175	                            </div>
   176	
   177	                            <FormField label="Jenis Produk">
   178	                                <div className={radioGroupClassName}>
   179	                                    <label className="inline-flex items-center">
   180	                                        <input
   181	                                            type="radio"
   182	                                            name="is_medicine"
   183	                                            checked={formData.is_medicine}
   184	                                            onChange={() => updateFormData({ is_medicine: true })}
   185	                                            className="form-radio h-5 w-5 text-primary"
   186	                                        />
   187	                                        <span className="ml-2">Obat</span>
   188	                                    </label>
   189	                                    <label className="inline-flex items-center">
   190	                                        <input
   191	                                            type="radio"
   192	                                            name="is_medicine"
   193	                                            checked={!formData.is_medicine}
   194	                                            onChange={() => updateFormData({ is_medicine: false, has_expiry_date: false })}
   195	                                            className="form-radio h-5 w-5 text-primary"
   196	                                        />
   197	                                        <span className="ml-2">Non-Obat</span>
   198	                                    </label>
   199	                                </div>
   200	                            </FormField>
   201	
   202	                            <FormField label="Keterangan">
   203	                                <textarea
   204	                                    name="description"
   205	                                    value={formData.description}
   206	                                    onChange={handleChange}
   207	                                    className={textareaClassName}
   208	                                    rows={3}
   209	                                />
   210	                            </FormField>
   211	                        </FormSection>
   212	
   213	                        <FormSection title="Harga Pokok">
   214	                            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
   215	                                <FormField label="Satuan Dasar">
   216	                                    <Input
   217	                                        type="text"
   218	                                        value={unitConversionHook.baseUnit}
   219	                                        readOnly
   220	                                        className={inputClassName}
   221	                                    />
   222	                                </FormField>
   223	                                
   224	                                <FormField label="Harga Pokok">
   225	                                    <Input
   226	                                        type="text"
   227	                                        name="base_price"
   228	                                        value={displayBasePrice}
   229	                                        placeholder="Rp 0"
   230	                                        onChange={handleChange}
   231	                                        min="0"
   232	                                        className={inputClassName}
   233	                                        required
   234	                                    />
   235	                                </FormField>
   236	                            </div>
   237	                        </FormSection>
   238	
   239	                        <UnitConversionManager unitConversionHook={unitConversionHook} />
   240	
   241	                        <FormSection title="Pengaturan Tambahan">
   242	                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
   243	                                <FormField label="Status Jual">
   244	                                    <div className={radioGroupClassName}>
   245	                                        <label className="inline-flex items-center">
   246	                                            <input
   247	                                                type="radio"
   248	                                                name="is_active"
   249	                                                checked={formData.is_active}
   250	                                                onChange={() => updateFormData({ is_active: true })}
   251	                                                className="form-radio h-5 w-5 text-primary"
   252	                                            />
   253	                                            <span className="ml-2">Masih dijual</span>
   254	                                        </label>
   255	                                        <label className="inline-flex items-center">
   256	                                            <input
   257	                                                type="radio"
   258	                                                name="is_active"
   259	                                                checked={!formData.is_active}
   260	                                                onChange={() => updateFormData({ is_active: false })}
   261	                                                className="form-radio h-5 w-5 text-primary"
   262	                                            />
   263	                                            <span className="ml-2">Tidak Dijual</span>
   264	                                        </label>
   265	                                    </div>
   266	                                </FormField>
   267	
   268	                                <FormField label="Stok Minimal">
   269	                                    <Input
   270	                                        type="number"
   271	                                        name="min_stock"
   272	                                        value={formData.min_stock}
   273	                                        onChange={handleChange}
   274	                                        className={inputClassName}
   275	                                        required
   276	                                    />
   277	                                </FormField>
   278	                            </div>
   279	
   280	                            <div className={formData.is_medicine ? "" : "opacity-50 pointer-events-none"}>
   281	                                <label className="inline-flex items-center">
   282	                                    <input
   283	                                        type="checkbox"
   284	                                        name="has_expiry_date"
   285	                                        checked={formData.has_expiry_date}
   286	                                        disabled={!formData.is_medicine}
   287	                                        onChange={handleChange}
   288	                                        className="form-checkbox h-5 w-5 text-primary"
   289	                                    />
   290	                                    <span className="ml-2">Memiliki Tanggal Kadaluarsa</span>
   291	                                </label>
   292	                                <div className="mt-1 text-sm text-gray-500">
   293	                                    Jika dicentang, obat ini akan menggunakan metode FEFO
   294	                                    (First Expired First Out)
   295	                                </div>
   296	                            </div>
   297	                        </FormSection>
   298	                    </CardContent>
   299	
   300	                    <CardFooter className="flex justify-between">
   301	                        <FormActions
   302	                            onCancel={() => navigate("/master-data/items")}
   303	                            isDisabled={false}
   304	                            isSaving={saving}
   305	                        />
   306	                    </CardFooter>
   307	                </form>
   308	            </Card>
   309	        </div>
   310	    );
   311	};
   312	
   313	export default AddItem;


===============================================
= File: ./src/pages/master-data/UnitList.tsx 
===============================================

     1	import { useEffect, useState } from "react";
     2	import { Link } from "react-router-dom";
     3	import { supabase } from "../../lib/supabase";
     4	import { FaPlus, FaEdit, FaTrash } from "react-icons/fa";
     5	import { Card } from "../../components/ui/Card";
     6	import { Button } from "../../components/ui/Button";
     7	import { Table, TableHead, TableBody, TableRow, TableCell, TableHeader } from "../../components/ui/Table";
     8	import { Loading } from "../../components/ui/Loading";
     9	
    10	interface Unit {
    11	    id: string;
    12	    name: string;
    13	    description: string;
    14	}
    15	
    16	const UnitList = () => {
    17	    const [units, setUnits] = useState<Unit[]>([]);
    18	    const [loading, setLoading] = useState(true);
    19	
    20	    useEffect(() => {
    21	        fetchUnits();
    22	    }, []);
    23	
    24	    const fetchUnits = async () => {
    25	        try {
    26	            setLoading(true);
    27	            
    28	            const { data, error } = await supabase
    29	                .from("item_units")
    30	                .select("*")
    31	                .order("name");
    32	                
    33	            if (error) throw error;
    34	            
    35	            setUnits(data || []);
    36	        } catch (error) {
    37	            console.error("Error fetching units:", error);
    38	        } finally {
    39	            setLoading(false);
    40	        }
    41	    };
    42	
    43	    const handleDelete = async (id: string) => {
    44	        if (window.confirm("Apakah Anda yakin ingin menghapus satuan item ini?")) {
    45	            try {
    46	                const { error } = await supabase
    47	                    .from("item_units")
    48	                    .delete()
    49	                    .eq("id", id);
    50	                
    51	                if (error) throw error;
    52	                
    53	                fetchUnits(); // Refresh data after deletion
    54	            } catch (error) {
    55	                console.error("Error deleting unit:", error);
    56	                alert("Gagal menghapus satuan item. Silakan coba lagi.");
    57	            }
    58	        }
    59	    };
    60	
    61	    return (
    62	        <Card>
    63	            <div className="flex justify-between items-center mb-6">
    64	                <h1 className="text-2xl font-bold text-gray-800">Daftar Satuan Item</h1>
    65	                
    66	                <Link
    67	                    to="/master-data/units/add"
    68	                >
    69	                    <Button variant="primary">
    70	                        <FaPlus className="mr-2" />
    71	                        Tambah Satuan Baru
    72	                    </Button>
    73	                </Link>
    74	            </div>
    75	            
    76	            {loading ? (
    77	                <Loading />
    78	            ) : (
    79	                <Table>
    80	                    <TableHead>
    81	                        <TableRow>
    82	                            <TableHeader>Nama Satuan</TableHeader>
    83	                            <TableHeader>Deskripsi</TableHeader>
    84	                            <TableHeader className="text-center">Aksi</TableHeader>
    85	                        </TableRow>
    86	                    </TableHead>
    87	                    <TableBody>
    88	                            {units.length === 0 ? (
    89	                                <TableRow>
    90	                                    <TableCell colSpan={3} className="text-center text-gray-500">
    91	                                        Tidak ada data satuan yang ditemukan
    92	                                    </TableCell>
    93	                                </TableRow>
    94	                            ) : (
    95	                                units.map((unit) => (
    96	                                    <TableRow key={unit.id}>
    97	                                        <TableCell>{unit.name}</TableCell>
    98	                                        <TableCell>{unit.description}</TableCell>
    99	                                        <TableCell className="text-center">
   100	                                            <div className="flex justify-center space-x-2">
   101	                                                <Link
   102	                                                    to={`/master-data/units/edit/${unit.id}`}
   103	                                                >
   104	                                                    <Button variant="secondary" size="sm">
   105	                                                        <FaEdit />
   106	                                                    </Button>
   107	                                                </Link>
   108	                                                <Button 
   109	                                                    variant="danger"
   110	                                                    size="sm"
   111	                                                    onClick={() => handleDelete(unit.id)}
   112	                                                >
   113	                                                    <FaTrash />
   114	                                                </Button>
   115	                                            </div>
   116	                                        </TableCell>
   117	                                    </TableRow>
   118	                                ))
   119	                            )}
   120	                    </TableBody>
   121	                </Table>
   122	            )}
   123	        </Card>
   124	    );
   125	};
   126	
   127	export default UnitList;


===============================================
= File: ./src/pages/master-data/CategoryList.tsx 
===============================================

     1	import { useEffect, useState } from "react";
     2	import { Link } from "react-router-dom";
     3	import { supabase } from "../../lib/supabase";
     4	import { FaPlus, FaEdit, FaTrash } from "react-icons/fa";
     5	import { Card } from "../../components/ui/Card";
     6	import { Button } from "../../components/ui/Button";
     7	import { Table, TableHead, TableBody, TableRow, TableCell, TableHeader } from "../../components/ui/Table";
     8	import { Loading } from "../../components/ui/Loading";
     9	
    10	interface Category {
    11	    id: string;
    12	    name: string;
    13	    description: string;
    14	}
    15	
    16	const CategoryList = () => {
    17	    const [categories, setCategories] = useState<Category[]>([]);
    18	    const [loading, setLoading] = useState(true);
    19	
    20	    useEffect(() => {
    21	        fetchCategories();
    22	    }, []);
    23	
    24	    const fetchCategories = async () => {
    25	        try {
    26	            setLoading(true);
    27	            
    28	            const { data, error } = await supabase
    29	                .from("item_categories")
    30	                .select("*")
    31	                .order("name");
    32	                
    33	            if (error) throw error;
    34	            
    35	            setCategories(data || []);
    36	        } catch (error) {
    37	            console.error("Error fetching categories:", error);
    38	        } finally {
    39	            setLoading(false);
    40	        }
    41	    };
    42	
    43	    return (
    44	        <Card>
    45	            <div className="flex justify-between items-center mb-6">
    46	                <h1 className="text-2xl font-bold text-gray-800">Daftar Kategori Item</h1>
    47	                
    48	                <Link to="/master-data/categories/add">
    49	                    <Button variant="primary" className="flex items-center">
    50	                        <FaPlus className="mr-2" />
    51	                        Tambah Kategori Baru
    52	                    </Button>
    53	                </Link>
    54	            </div>
    55	            
    56	            {loading ? (
    57	                <Loading />
    58	            ) : (
    59	                <Table>
    60	                    <TableHead>
    61	                        <TableRow>
    62	                            <TableHeader>Nama Kategori</TableHeader>
    63	                            <TableHeader>Deskripsi</TableHeader>
    64	                            <TableHeader className="text-center">Aksi</TableHeader>
    65	                        </TableRow>
    66	                    </TableHead>
    67	                    <TableBody>
    68	                        {categories.length === 0 ? (
    69	                            <TableRow>
    70	                                <TableCell colSpan={3} className="text-center text-gray-500">
    71	                                    Tidak ada data kategori yang ditemukan
    72	                                </TableCell>
    73	                            </TableRow>
    74	                        ) : (
    75	                            categories.map((category) => (
    76	                                <TableRow key={category.id}>
    77	                                    <TableCell>{category.name}</TableCell>
    78	                                    <TableCell>{category.description}</TableCell>
    79	                                    <TableCell className="text-center">
    80	                                        <div className="flex justify-center space-x-2">
    81	                                            <Link
    82	                                                to={`/master-data/categories/edit/${category.id}`}
    83	                                            >
    84	                                                <Button variant="secondary" size="sm">
    85	                                                    <FaEdit />
    86	                                                </Button>
    87	                                            </Link>
    88	                                            <Button 
    89	                                                variant="danger"
    90	                                                size="sm"
    91	                                                onClick={() => handleDelete(category.id)}
    92	                                            >
    93	                                                <FaTrash />
    94	                                            </Button>
    95	                                        </div>
    96	                                    </TableCell>
    97	                                </TableRow>
    98	                            ))
    99	                        )}
   100	                    </TableBody>
   101	                </Table>
   102	            )}
   103	        </Card>
   104	    );
   105	    
   106	    async function handleDelete(id: string) {
   107	        if (window.confirm("Apakah Anda yakin ingin menghapus kategori item ini?")) {
   108	            try {
   109	                const { error } = await supabase
   110	                    .from("item_categories")
   111	                    .delete()
   112	                    .eq("id", id);
   113	                
   114	                if (error) throw error;
   115	                
   116	                fetchCategories(); // Refresh data after deletion
   117	            } catch (error) {
   118	                console.error("Error deleting category:", error);
   119	                alert("Gagal menghapus kategori item. Silakan coba lagi.");
   120	            }
   121	        }
   122	    }
   123	};
   124	
   125	export default CategoryList;


===============================================
= File: ./src/pages/master-data/TypeList.tsx 
===============================================

     1	import { useEffect, useState } from "react";
     2	import { Link } from "react-router-dom";
     3	import { supabase } from "../../lib/supabase";
     4	import { FaPlus, FaEdit, FaTrash } from "react-icons/fa";
     5	import { Card } from "../../components/ui/Card";
     6	import { Button } from "../../components/ui/Button";
     7	import { Table, TableHead, TableBody, TableRow, TableCell, TableHeader } from "../../components/ui/Table";
     8	import { Loading } from "../../components/ui/Loading";
     9	
    10	interface ItemType {
    11	    id: string;
    12	    name: string;
    13	    description: string;
    14	}
    15	
    16	const TypeList = () => {
    17	    const [types, setTypes] = useState<ItemType[]>([]);
    18	    const [loading, setLoading] = useState(true);
    19	
    20	    useEffect(() => {
    21	        fetchTypes();
    22	    }, []);
    23	
    24	    const fetchTypes = async () => {
    25	        try {
    26	            setLoading(true);
    27	            
    28	            const { data, error } = await supabase
    29	                .from("item_types")
    30	                .select("*")
    31	                .order("name");
    32	                
    33	            if (error) throw error;
    34	            
    35	            setTypes(data || []);
    36	        } catch (error) {
    37	            console.error("Error fetching item types:", error);
    38	        } finally {
    39	            setLoading(false);
    40	        }
    41	    };
    42	
    43	    return (
    44	        <Card>
    45	            <div className="flex justify-between items-center mb-6">
    46	                <h1 className="text-2xl font-bold text-gray-800">Daftar Jenis Item</h1>
    47	                
    48	                <Link
    49	                    to="/master-data/types/add"
    50	                >
    51	                    <Button variant="primary">
    52	                        <FaPlus className="mr-2" />
    53	                        Tambah Jenis Item Baru
    54	                    </Button>
    55	                </Link>
    56	            </div>
    57	            
    58	            {loading ? (
    59	                <Loading />
    60	            ) : (
    61	                <Table>
    62	                    <TableHead>
    63	                        <TableRow>
    64	                            <TableHeader>Nama Jenis</TableHeader>
    65	                            <TableHeader>Deskripsi</TableHeader>
    66	                            <TableHeader className="text-center">Aksi</TableHeader>
    67	                        </TableRow>
    68	                    </TableHead>
    69	                    <TableBody>
    70	                            {types.length === 0 ? (
    71	                                <TableRow>
    72	                                    <TableCell colSpan={3} className="text-center text-gray-500">
    73	                                        Tidak ada data jenis item yang ditemukan
    74	                                    </TableCell>
    75	                                </TableRow>
    76	                            ) : (
    77	                                types.map((type) => (
    78	                                    <TableRow key={type.id}>
    79	                                        <TableCell>{type.name}</TableCell>
    80	                                        <TableCell>{type.description}</TableCell>
    81	                                        <TableCell className="text-center">
    82	                                            <div className="flex justify-center space-x-2">
    83	                                                <Link
    84	                                                    to={`/master-data/types/edit/${type.id}`}
    85	                                                >
    86	                                                    <Button variant="secondary" size="sm">
    87	                                                        <FaEdit />
    88	                                                    </Button>
    89	                                                </Link>
    90	                                                <Button 
    91	                                                    variant="danger"
    92	                                                    size="sm"
    93	                                                    onClick={() => handleDelete(type.id)}
    94	                                                >
    95	                                                    <FaTrash />
    96	                                                </Button>
    97	                                            </div>
    98	                                        </TableCell>
    99	                                    </TableRow>
   100	                                ))
   101	                            )}
   102	                    </TableBody>
   103	                </Table>
   104	            )}
   105	        </Card>
   106	    );
   107	    
   108	    async function handleDelete(id: string) {
   109	        if (window.confirm("Apakah Anda yakin ingin menghapus jenis item ini?")) {
   110	            try {
   111	                const { error } = await supabase
   112	                    .from("item_types")
   113	                    .delete()
   114	                    .eq("id", id);
   115	                
   116	                if (error) throw error;
   117	                
   118	                fetchTypes(); // Refresh data after deletion
   119	            } catch (error) {
   120	                console.error("Error deleting item type:", error);
   121	                alert("Gagal menghapus jenis item. Silakan coba lagi.");
   122	            }
   123	        }
   124	    }
   125	};
   126	
   127	export default TypeList;


===============================================
= File: ./src/pages/dashboard/Dashboard.tsx 
===============================================

     1	import { useEffect, useState, useCallback } from 'react';
     2	import { supabase } from '../../lib/supabase';
     3	import {
     4	    Chart as ChartJS,
     5	    CategoryScale,
     6	    LinearScale,
     7	    PointElement,
     8	    LineElement,
     9	    BarElement,
    10	    Title,
    11	    Tooltip,
    12	    Legend,
    13	    ArcElement
    14	} from 'chart.js';
    15	import { Line, Pie, Bar, Doughnut } from 'react-chartjs-2';
    16	import { FaShoppingBag, FaShoppingCart, FaBoxes, FaExclamationTriangle } from 'react-icons/fa';
    17	
    18	ChartJS.register(
    19	    CategoryScale,
    20	    LinearScale,
    21	    PointElement,
    22	    LineElement,
    23	    BarElement,
    24	    Title,
    25	    Tooltip,
    26	    Legend,
    27	    ArcElement
    28	);
    29	
    30	const Dashboard = () => {
    31	    const [demoMode, setDemoMode] = useState(false);
    32	    const [stats, setStats] = useState({
    33	        totalSales: 0,
    34	        totalPurchases: 0,
    35	        totalMedicines: 0,
    36	        lowStockCount: 0
    37	    });
    38	
    39	    const [salesData, setSalesData] = useState<{
    40	        labels: string[];
    41	        datasets: {
    42	            label: string;
    43	            data: number[];
    44	            borderColor: string;
    45	            backgroundColor: string;
    46	        }[];
    47	    }>({
    48	        labels: [],
    49	        datasets: []
    50	    });
    51	
    52	    const [topMedicines, setTopMedicines] = useState<{
    53	        labels: string[];
    54	        datasets: {
    55	            label: string;
    56	            data: number[];
    57	            backgroundColor: string[];
    58	            borderColor: string[];
    59	            borderWidth: number;
    60	        }[];
    61	    }>({
    62	        labels: [],
    63	        datasets: []
    64	    });
    65	
    66	    useEffect(() => {
    67	        if (!demoMode) {
    68	            fetchStats();
    69	            fetchSalesData();
    70	            fetchTopMedicines();
    71	        }
    72	    }, []);
    73	
    74	    const fetchStats = async () => {
    75	        // Get total sales
    76	        const { data: salesData } = await supabase
    77	            .from('sales')
    78	            .select('total');
    79	
    80	        const totalSales = salesData
    81	            ? salesData.reduce((sum, sale) => sum + sale.total, 0)
    82	            : 0;
    83	
    84	        // Get total purchases
    85	        const { data: purchasesData } = await supabase
    86	            .from('purchases')
    87	            .select('total');
    88	
    89	        const totalPurchases = purchasesData
    90	            ? purchasesData.reduce((sum, purchase) => sum + purchase.total, 0)
    91	            : 0;
    92	
    93	        // Get total medicines
    94	        const { count: totalMedicines } = await supabase
    95	            .from('medicines')
    96	            .select('*', { count: 'exact' });
    97	
    98	        // Get low stock count
    99	        const { count: lowStockCount } = await supabase
   100	            .from('medicines')
   101	            .select('*', { count: 'exact' })
   102	            .lt('stock', 10);
   103	
   104	        setStats({
   105	            totalSales,
   106	            totalPurchases,
   107	            totalMedicines: totalMedicines || 0,
   108	            lowStockCount: lowStockCount || 0
   109	        });
   110	    };
   111	
   112	    const fetchSalesData = async () => {
   113	        // Get sales data for the last 7 days
   114	        const now = new Date();
   115	        const sevenDaysAgo = new Date(now.setDate(now.getDate() - 6));
   116	        sevenDaysAgo.setHours(0, 0, 0, 0);
   117	
   118	        const { data } = await supabase
   119	            .from('sales')
   120	            .select('date, total')
   121	            .gte('date', sevenDaysAgo.toISOString())
   122	            .order('date');
   123	
   124	        if (!data) return;
   125	
   126	        // Group by date
   127	        const salesByDate = data.reduce<Record<string, number>>((acc, sale) => {
   128	            const date = new Date(sale.date).toLocaleDateString();
   129	            if (!acc[date]) acc[date] = 0;
   130	            acc[date] += sale.total;
   131	            return acc;
   132	        }, {});
   133	
   134	        // Generate data for the last 7 days
   135	        const labels = [];
   136	        const values = [];
   137	
   138	        for (let i = 0; i < 7; i++) {
   139	            const date = new Date();
   140	            date.setDate(date.getDate() - (6 - i));
   141	            const dateStr = date.toLocaleDateString();
   142	            labels.push(dateStr);
   143	            values.push(salesByDate[dateStr] || 0);
   144	        }
   145	
   146	        setSalesData({
   147	            labels,
   148	            datasets: [
   149	                {
   150	                    label: 'Penjualan Harian',
   151	                    data: values,
   152	                    borderColor: 'rgb(53, 162, 235)',
   153	                    backgroundColor: 'rgba(53, 162, 235, 0.5)',
   154	                }
   155	            ]
   156	        });
   157	    };
   158	
   159	    const fetchTopMedicines = async () => {
   160	        // Get top 5 selling medicines
   161	        const { data } = await supabase
   162	            .rpc('get_top_selling_medicines', { limit_count: 5 });
   163	
   164	        if (!data) return;
   165	
   166	        interface TopSellingMedicine {
   167	            name: string;
   168	            total_quantity: number;
   169	        }
   170	
   171	        setTopMedicines({
   172	            labels: data.map((item: TopSellingMedicine) => item.name),
   173	            datasets: [
   174	                {
   175	                    label: 'Obat Terlaris',
   176	                    data: data.map((item: TopSellingMedicine) => item.total_quantity),
   177	                    backgroundColor: [
   178	                        'rgba(255, 99, 132, 0.6)',
   179	                        'rgba(54, 162, 235, 0.6)',
   180	                        'rgba(255, 206, 86, 0.6)',
   181	                        'rgba(75, 192, 192, 0.6)',
   182	                        'rgba(153, 102, 255, 0.6)'
   183	                    ],
   184	                    borderColor: [
   185	                        'rgba(255, 99, 132, 1)',
   186	                        'rgba(54, 162, 235, 1)',
   187	                        'rgba(255, 206, 86, 1)',
   188	                        'rgba(75, 192, 192, 1)',
   189	                        'rgba(153, 102, 255, 1)'
   190	                    ],
   191	                    borderWidth: 1,
   192	                }
   193	            ]
   194	        });
   195	    };
   196	
   197	    const toggleDemoMode = () => {
   198	        setDemoMode(!demoMode);
   199	    };
   200	
   201	    return (
   202	        <div className="min-h-screen">
   203	            <div className="flex justify-between items-center mb-6">
   204	                <h1 className="text-2xl font-bold text-gray-800">Dashboard</h1>
   205	                <button 
   206	                    onClick={toggleDemoMode}
   207	                    className={`px-4 py-2 rounded-md font-medium shadow-md border ${demoMode ? 'bg-red-500 text-white border-red-600' : 'bg-blue-500 text-white border-blue-600 hover:bg-blue-700'}`}
   208	                >
   209	                    {demoMode ? 'Disable Demo Mode' : 'Demo Mode'}
   210	                </button>
   211	            </div>
   212	
   213	            {demoMode ? (
   214	                <ModernDashboard />
   215	            ) : (
   216	                <RegularDashboard 
   217	                    stats={stats} 
   218	                    salesData={salesData} 
   219	                    topMedicines={topMedicines} 
   220	                />
   221	            )}
   222	        </div>
   223	    );
   224	};
   225	
   226	// Komponen untuk dashboard regular (asli)
   227	const RegularDashboard = ({ stats, salesData, topMedicines }) => {
   228	    return (
   229	        <div>
   230	            {/* <h1 className="text-2xl font-bold text-gray-800 mb-6">Dashboard</h1> */}
   231	
   232	            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
   233	                <div className="bg-white p-6 rounded-lg shadow">
   234	                    <div className="flex items-center">
   235	                        <div className="p-3 rounded-full bg-blue-100 mr-4">
   236	                            <FaShoppingBag className="text-blue-500 text-xl" />
   237	                        </div>
   238	                        <div>
   239	                            <h2 className="text-sm text-gray-500">Total Penjualan</h2>
   240	                            <p className="text-xl font-semibold">
   241	                                {stats.totalSales.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' })}
   242	                            </p>
   243	                        </div>
   244	                    </div>
   245	                </div>
   246	
   247	                <div className="bg-white p-6 rounded-lg shadow">
   248	                    <div className="flex items-center">
   249	                        <div className="p-3 rounded-full bg-green-100 mr-4">
   250	                            <FaShoppingCart className="text-green-500 text-xl" />
   251	                        </div>
   252	                        <div>
   253	                            <h2 className="text-sm text-gray-500">Total Pembelian</h2>
   254	                            <p className="text-xl font-semibold">
   255	                                {stats.totalPurchases.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' })}
   256	                            </p>
   257	                        </div>
   258	                    </div>
   259	                </div>
   260	
   261	                <div className="bg-white p-6 rounded-lg shadow">
   262	                    <div className="flex items-center">
   263	                        <div className="p-3 rounded-full bg-purple-100 mr-4">
   264	                            <FaBoxes className="text-purple-500 text-xl" />
   265	                        </div>
   266	                        <div>
   267	                            <h2 className="text-sm text-gray-500">Total Obat</h2>
   268	                            <p className="text-xl font-semibold">{stats.totalMedicines}</p>
   269	                        </div>
   270	                    </div>
   271	                </div>
   272	
   273	                <div className="bg-white p-6 rounded-lg shadow">
   274	                    <div className="flex items-center">
   275	                        <div className="p-3 rounded-full bg-red-100 mr-4">
   276	                            <FaExclamationTriangle className="text-red-500 text-xl" />
   277	                        </div>
   278	                        <div>
   279	                            <h2 className="text-sm text-gray-500">Stok Menipis</h2>
   280	                            <p className="text-xl font-semibold">{stats.lowStockCount}</p>
   281	                        </div>
   282	                    </div>
   283	                </div>
   284	            </div>
   285	
   286	            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
   287	                <div className="bg-white p-6 rounded-lg shadow">
   288	                    <h2 className="text-lg font-semibold mb-4">Penjualan 7 Hari Terakhir</h2>
   289	                    <div className="h-64">
   290	                        <Line
   291	                            data={salesData}
   292	                            options={{
   293	                                responsive: true,
   294	                                maintainAspectRatio: false,
   295	                                scales: {
   296	                                    y: {
   297	                                        beginAtZero: true
   298	                                    }
   299	                                }
   300	                            }}
   301	                        />
   302	                    </div>
   303	                </div>
   304	
   305	                <div className="bg-white p-6 rounded-lg shadow">
   306	                    <h2 className="text-lg font-semibold mb-4">Obat Terlaris</h2>
   307	                    <div className="h-64">
   308	                        <Pie
   309	                            data={topMedicines}
   310	                            options={{
   311	                                responsive: true,
   312	                                maintainAspectRatio: false
   313	                            }}
   314	                        />
   315	                    </div>
   316	                </div>
   317	            </div>
   318	        </div>
   319	    );
   320	};
   321	
   322	// Komponen untuk dashboard modern (mode demo)
   323	const ModernDashboard = () => {
   324	    // Data dummy untuk mode demo
   325	    const demoData = {
   326	        totalCustomer: 120,
   327	        totalSales: 234,
   328	        totalProfit: 456,
   329	        outOfStock: 56,
   330	        
   331	        expiringMedicines: [
   332	            { name: 'Doxycycline', expiryDate: '24 Dec 2021', quantity: 40 },
   333	            { name: 'Abetis', expiryDate: '24 Dec 2021', quantity: 40 },
   334	            { name: 'Disulfit 10ml', expiryDate: '24 Dec 2021', quantity: 40 },
   335	            { name: 'Cerox CV', expiryDate: '24 Dec 2021', quantity: 40 },
   336	            { name: 'Fluciox', expiryDate: '24 Dec 2021', quantity: 40 },
   337	        ],
   338	        
   339	        recentOrders: [
   340	            { medicine: 'Paricol 15mg', batchNo: '78367834', quantity: 40, status: 'Delivered', price: 23.00 },
   341	            { medicine: 'Abetis 20mg', batchNo: '88832433', quantity: 40, status: 'Pending', price: 23.00 },
   342	            { medicine: 'Cerox CV', batchNo: '76767634', quantity: 40, status: 'Cancelled', price: 23.00 },
   343	            { medicine: 'Abetis 20mg', batchNo: '45578866', quantity: 40, status: 'Delivered', price: 23.00 },
   344	            { medicine: 'Cerox CV', batchNo: '76767634', quantity: 40, status: 'Cancelled', price: 23.00 },
   345	        ],
   346	        
   347	        monthlyData: [
   348	            { month: 'Jan', value: 40 },
   349	            { month: 'Feb', value: 35 },
   350	            { month: 'Mar', value: 35 },
   351	            { month: 'Apr', value: 45 },
   352	            { month: 'May', value: 40 },
   353	            { month: 'Jun', value: 50 },
   354	            { month: 'Jul', value: 60 },
   355	            { month: 'Aug', value: 40 },
   356	            { month: 'Sep', value: 45 },
   357	            { month: 'Oct', value: 40 },
   358	            { month: 'Nov', value: 35 },
   359	            { month: 'Dec', value: 30 },
   360	        ],
   361	        
   362	        todayReport: {
   363	            totalEarning: 5098.00,
   364	            purchasePercentage: 65,
   365	            cashReceivedPercentage: 75,
   366	            bankReceivePercentage: 45,
   367	            servicePercentage: 85
   368	        }
   369	    };
   370	    
   371	    // Data untuk Monthly Progress chart
   372	    const monthlyProgressData = {
   373	        labels: demoData.monthlyData.map(item => item.month),
   374	        datasets: [
   375	            {
   376	                label: 'Penjualan Bulanan',
   377	                data: demoData.monthlyData.map(item => item.value),
   378	                backgroundColor: demoData.monthlyData.map(item => 
   379	                    item.month === 'Jul' ? '#1a73e8' : '#4ade80'
   380	                ),
   381	                borderRadius: 6,
   382	                borderSkipped: false,
   383	            }
   384	        ]
   385	    };
   386	    
   387	    // Data untuk Today's Report chart (doughnut chart)
   388	    const todayReportData = {
   389	        labels: ['Pembelian', 'Penerimaan Tunai', 'Penerimaan Bank', 'Layanan'],
   390	        datasets: [
   391	            {
   392	                data: [
   393	                    demoData.todayReport.purchasePercentage,
   394	                    demoData.todayReport.cashReceivedPercentage,
   395	                    demoData.todayReport.bankReceivePercentage,
   396	                    demoData.todayReport.servicePercentage
   397	                ],
   398	                backgroundColor: [
   399	                    '#3b82f6',
   400	                    '#f43f5e',
   401	                    '#f97316',
   402	                    '#4ade80'
   403	                ],
   404	                borderWidth: 0,
   405	                cutout: '55%'
   406	            }
   407	        ]
   408	    };
   409	
   410	    return (
   411	        <div className="bg-gray-50 p-6 rounded-xl">
   412	            {/* Cards Row */}
   413	            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
   414	                {/* Total Customer Card */}
   415	                <div className="bg-white p-4 rounded-xl shadow-sm flex items-start justify-between">
   416	                    <div>
   417	                        <p className="text-sm text-gray-500 mb-1">Total Customer</p>
   418	                        <p className="text-2xl font-bold">{demoData.totalCustomer}</p>
   419	                        <button className="text-xs text-primary mt-2">Lihat Detail</button>
   420	                    </div>
   421	                    <div className="h-10 w-10 rounded-full bg-indigo-100 flex items-center justify-center">
   422	                        <span className="text-indigo-500">👥</span>
   423	                    </div>
   424	                </div>
   425	                
   426	                {/* Total Sale Card */}
   427	                <div className="bg-white p-4 rounded-xl shadow-sm flex items-start justify-between">
   428	                    <div>
   429	                        <p className="text-sm text-gray-500 mb-1">Total Sale</p>
   430	                        <p className="text-2xl font-bold">{demoData.totalSales}</p>
   431	                        <button className="text-xs text-primary mt-2">Lihat Detail</button>
   432	                    </div>
   433	                    <div className="h-10 w-10 rounded-full bg-green-100 flex items-center justify-center">
   434	                        <span className="text-green-500">🛒</span>
   435	                    </div>
   436	                </div>
   437	                
   438	                {/* Total Profit Card */}
   439	                <div className="bg-white p-4 rounded-xl shadow-sm flex items-start justify-between">
   440	                    <div>
   441	                        <p className="text-sm text-gray-500 mb-1">Total Profit</p>
   442	                        <p className="text-2xl font-bold">${demoData.totalProfit}</p>
   443	                        <button className="text-xs text-primary mt-2">Lihat Detail</button>
   444	                    </div>
   445	                    <div className="h-10 w-10 rounded-full bg-yellow-100 flex items-center justify-center">
   446	                        <span className="text-yellow-500">💰</span>
   447	                    </div>
   448	                </div>
   449	                
   450	                {/* Out of Stock Card */}
   451	                <div className="bg-white p-4 rounded-xl shadow-sm flex items-start justify-between">
   452	                    <div>
   453	                        <p className="text-sm text-gray-500 mb-1">Out of Stock</p>
   454	                        <p className="text-2xl font-bold">{demoData.outOfStock}</p>
   455	                        <button className="text-xs text-primary mt-2">Lihat Detail</button>
   456	                    </div>
   457	                    <div className="h-10 w-10 rounded-full bg-red-100 flex items-center justify-center">
   458	                        <span className="text-red-500">⚠️</span>
   459	                    </div>
   460	                </div>
   461	            </div>
   462	            
   463	            {/* Tables and Charts */}
   464	            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
   465	                {/* Expiring List */}
   466	                <div className="bg-white p-4 rounded-xl shadow-sm">
   467	                    <div className="flex justify-between items-center mb-4">
   468	                        <h2 className="text-lg font-semibold">Expiring List</h2>
   469	                        <button className="text-xs text-primary">Lihat Semua</button>
   470	                    </div>
   471	                    
   472	                    <div className="overflow-x-auto">
   473	                        <table className="w-full">
   474	                            <thead>
   475	                                <tr className="text-left text-xs text-gray-500">
   476	                                    <th className="pb-2">Medicine name</th>
   477	                                    <th className="pb-2">Expiry Date</th>
   478	                                    <th className="pb-2">Quantity</th>
   479	                                    <th className="pb-2">Chart</th>
   480	                                    <th className="pb-2">Return</th>
   481	                                </tr>
   482	                            </thead>
   483	                            <tbody className="divide-y divide-gray-100">
   484	                                {demoData.expiringMedicines.map((medicine, index) => (
   485	                                    <tr key={index} className="text-sm">
   486	                                        <td className="py-3">{medicine.name}</td>
   487	                                        <td className="py-3">{medicine.expiryDate}</td>
   488	                                        <td className="py-3">{medicine.quantity}</td>
   489	                                        <td className="py-3">
   490	                                            <div className="h-6 w-10 text-green-500">📈</div>
   491	                                        </td>
   492	                                        <td className="py-3">
   493	                                            <button className="text-gray-400">↩️</button>
   494	                                        </td>
   495	                                    </tr>
   496	                                ))}
   497	                            </tbody>
   498	                        </table>
   499	                    </div>
   500	                </div>
   501	                
   502	                {/* Recent Orders */}
   503	                <div className="bg-white p-4 rounded-xl shadow-sm">
   504	                    <div className="flex justify-between items-center mb-4">
   505	                        <h2 className="text-lg font-semibold">Recent Order's</h2>
   506	                        <button className="text-xs text-primary">Lihat Semua</button>
   507	                    </div>
   508	                    
   509	                    <div className="overflow-x-auto">
   510	                        <table className="w-full">
   511	                            <thead>
   512	                                <tr className="text-left text-xs text-gray-500">
   513	                                    <th className="pb-2">Medicine name</th>
   514	                                    <th className="pb-2">Batch No.</th>
   515	                                    <th className="pb-2">Quantity</th>
   516	                                    <th className="pb-2">Status</th>
   517	                                    <th className="pb-2 text-right">Price</th>
   518	                                </tr>
   519	                            </thead>
   520	                            <tbody className="divide-y divide-gray-100">
   521	                                {demoData.recentOrders.map((order, index) => (
   522	                                    <tr key={index} className="text-sm">
   523	                                        <td className="py-3">{order.medicine}</td>
   524	                                        <td className="py-3">{order.batchNo}</td>
   525	                                        <td className="py-3">{order.quantity}</td>
   526	                                        <td className="py-3">
   527	                                            <span className={`px-2 py-1 rounded-full text-xs 
   528	                                                ${order.status === 'Delivered' ? 'bg-blue-100 text-blue-600' : 
   529	                                                  order.status === 'Pending' ? 'bg-yellow-100 text-yellow-600' : 
   530	                                                  'bg-red-100 text-red-600'}`}>
   531	                                                {order.status}
   532	                                            </span>
   533	                                        </td>
   534	                                        <td className="py-3 text-right">${order.price.toFixed(2)}</td>
   535	                                    </tr>
   536	                                ))}
   537	                            </tbody>
   538	                        </table>
   539	                    </div>
   540	                </div>
   541	            </div>
   542	            
   543	            {/* Charts Row */}
   544	            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
   545	                {/* Monthly Progress */}
   546	                <div className="bg-white p-4 rounded-xl shadow-sm">
   547	                    <div className="flex justify-between items-center mb-4">
   548	                        <h2 className="text-lg font-semibold">Monthly Progress</h2>
   549	                        <select className="text-sm border rounded px-2 py-1">
   550	                            <option>Monthly</option>
   551	                            <option>Weekly</option>
   552	                            <option>Daily</option>
   553	                        </select>
   554	                    </div>
   555	                    
   556	                    <div className="h-64">
   557	                        <Bar 
   558	                            data={monthlyProgressData} 
   559	                            options={{
   560	                                responsive: true,
   561	                                maintainAspectRatio: false,
   562	                                plugins: {
   563	                                    legend: {
   564	                                        display: false
   565	                                    },
   566	                                    tooltip: {
   567	                                        callbacks: {
   568	                                            title: (context) => {
   569	                                                const label = context[0].label;
   570	                                                if (label === 'Sep') {
   571	                                                    return 'September';
   572	                                                }
   573	                                                return label;
   574	                                            },
   575	                                            label: (context) => {
   576	                                                return `Sales: ${context.parsed.y}`;
   577	                                            }
   578	                                        }
   579	                                    }
   580	                                },
   581	                                scales: {
   582	                                    y: {
   583	                                        beginAtZero: true,
   584	                                        grid: {
   585	                                            display: false
   586	                                        }
   587	                                    },
   588	                                    x: {
   589	                                        grid: {
   590	                                            display: false
   591	                                        }
   592	                                    }
   593	                                }
   594	                            }}
   595	                        />
   596	                    </div>
   597	                </div>
   598	                
   599	                {/* Today's Report */}
   600	                <div className="bg-white p-4 rounded-xl shadow-sm">
   601	                    <h2 className="text-lg font-semibold mb-4">Today's Report</h2>
   602	                    
   603	                    <div className="flex items-center justify-center">
   604	                        <div className="h-64 w-64 relative flex items-center justify-center">
   605	                            <Doughnut 
   606	                                data={todayReportData}
   607	                                options={{
   608	                                    responsive: true,
   609	                                    maintainAspectRatio: false,
   610	                                    plugins: {
   611	                                        legend: {
   612	                                            display: false
   613	                                        }
   614	                                    }
   615	                                }}
   616	                            />
   617	                            <div className="absolute inset-0 flex flex-col items-center justify-center">
   618	                                <p className="text-sm text-gray-500">Total Earning</p>
   619	                                <p className="text-xl font-bold">${demoData.todayReport.totalEarning.toFixed(2)}</p>
   620	                            </div>
   621	                        </div>
   622	                        <div className="ml-4">
   623	                            <div className="flex items-center mb-2"><span className="w-3 h-3 rounded-full bg-blue-500 mr-2"></span> Total Purchase</div>
   624	                            <div className="flex items-center mb-2"><span className="w-3 h-3 rounded-full bg-red-500 mr-2"></span> Cash Received</div>
   625	                            <div className="flex items-center mb-2"><span className="w-3 h-3 rounded-full bg-orange-500 mr-2"></span> Bank Receive</div>
   626	                            <div className="flex items-center"><span className="w-3 h-3 rounded-full bg-green-500 mr-2"></span> Total Service</div>
   627	                        </div>
   628	                    </div>
   629	                </div>
   630	            </div>
   631	        </div>
   632	    );
   633	};
   634	
   635	export default Dashboard;


===============================================
= File: ./src/pages/purchases/PurchaseList.tsx 
===============================================

     1	import { useEffect, useState } from "react";
     2	import { Link } from "react-router-dom";
     3	import { supabase } from "../../lib/supabase";
     4	import { FaPlus, FaEdit, FaTrash, FaSearch, FaEye } from "react-icons/fa";
     5	import { Card } from "../../components/ui/Card";
     6	import { Button } from "../../components/ui/Button";
     7	import { Table, TableHead, TableBody, TableRow, TableCell, TableHeader } from "../../components/ui/Table";
     8	import { Pagination } from "../../components/ui/Pagination";
     9	import { Loading } from "../../components/ui/Loading";
    10	import { Badge } from "../../components/ui/Badge";
    11	
    12	interface Purchase {
    13	    id: string;
    14	    invoice_number: string;
    15	    date: string;
    16	    total: number;
    17	    payment_status: string;
    18	    payment_method: string;
    19	    supplier: {
    20	        name: string;
    21	    };
    22	}
    23	
    24	const PurchaseList = () => {
    25	    const [purchases, setPurchases] = useState<Purchase[]>([]);
    26	    const [loading, setLoading] = useState(true);
    27	    const [tableLoading, setTableLoading] = useState(false);
    28	    const [search, setSearch] = useState("");
    29	    const [debouncedSearch, setDebouncedSearch] = useState("");
    30	    const [currentPage, setCurrentPage] = useState(1);
    31	    const [totalItems, setTotalItems] = useState(0);
    32	    const [itemsPerPage, setItemsPerPage] = useState(10);
    33	
    34	    // Effect for debounce search
    35	    useEffect(() => {
    36	        const timer = setTimeout(() => {
    37	            setDebouncedSearch(search);
    38	            setCurrentPage(1); // Reset to first page when search changes
    39	        }, 500);
    40	
    41	        return () => clearTimeout(timer);
    42	    }, [search]);
    43	
    44	    // Effect to fetch data when parameters change
    45	    useEffect(() => {
    46	        fetchPurchases(currentPage, debouncedSearch, itemsPerPage);
    47	    // eslint-disable-next-line react-hooks/exhaustive-deps
    48	    }, [currentPage, debouncedSearch, itemsPerPage]);
    49	
    50	    const fetchPurchases = async (page = 1, searchTerm = '', limit = 10) => {
    51	        try {
    52	            setTableLoading(true);
    53	
    54	            // Base query
    55	            let query = supabase
    56	                .from("purchases")
    57	                .select(`
    58	                    id,
    59	                    invoice_number,
    60	                    date,
    61	                    total,
    62	                    payment_status,
    63	                    payment_method,
    64	                    supplier_id,
    65	                    supplier:suppliers(name)
    66	                `);
    67	
    68	            // Add search if present
    69	            if (searchTerm) {
    70	                query = query.or(`invoice_number.ilike.%${searchTerm}%,suppliers.name.ilike.%${searchTerm}%`);
    71	            }
    72	
    73	            // Get total count for pagination
    74	            let countQuery = supabase
    75	                .from("purchases")
    76	                .select('id', { count: 'exact' });
    77	
    78	            // Add search to count query if present
    79	            if (searchTerm) {
    80	                countQuery = countQuery.or(`invoice_number.ilike.%${searchTerm}%,suppliers.name.ilike.%${searchTerm}%`);
    81	            }
    82	
    83	            const { count, error: countError } = await countQuery;
    84	            if (countError) throw countError;
    85	
    86	            // Add pagination
    87	            const from = (page - 1) * limit;
    88	            const to = from + limit - 1;
    89	
    90	            const { data, error } = await query
    91	                .order('date', { ascending: false })
    92	                .range(from, to);
    93	
    94	            if (error) {
    95	                console.error("Error fetching purchases:", error);
    96	                throw error;
    97	            }
    98	
    99	            setTotalItems(count || 0);
   100	            // Transform data to match the Purchase interface
   101	            const transformedData = data?.map(item => ({
   102	                ...item,
   103	                supplier: Array.isArray(item.supplier) ? item.supplier[0] : item.supplier
   104	            })) || [];
   105	            setPurchases(transformedData);
   106	        } catch (error) {
   107	            console.error("Error fetching purchases:", error);
   108	        } finally {
   109	            setTableLoading(false);
   110	            // Setelah loading pertama, set loading utama menjadi false
   111	            if (loading) {
   112	                setLoading(false);
   113	            }
   114	        }
   115	    };
   116	
   117	    const handlePageChange = (newPage: number) => {
   118	        setCurrentPage(newPage);
   119	    };
   120	
   121	    const handleItemsPerPageChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
   122	        setItemsPerPage(Number(e.target.value));
   123	        setCurrentPage(1); // Reset to first page
   124	    };
   125	
   126	    const handleDelete = async (id: string) => {
   127	        if (window.confirm("Apakah Anda yakin ingin menghapus pembelian ini?")) {
   128	            try {
   129	                // Ambil item-item yang terkait dengan pembelian ini
   130	                const { data: purchaseItems, error: itemsError } = await supabase
   131	                    .from("purchase_items")
   132	                    .select("item_id, quantity, unit")
   133	                    .eq("purchase_id", id);
   134	                    
   135	                if (itemsError) throw itemsError;
   136	                
   137	                // Update stok untuk setiap item
   138	                for (const item of purchaseItems || []) {
   139	                    // Ambil data item untuk mendapatkan satuan dasar, stok saat ini, dan konversi
   140	                    const { data: itemData } = await supabase
   141	                        .from('items')
   142	                        .select('stock, base_unit, unit_conversions')
   143	                        .eq('id', item.item_id)
   144	                        .single();
   145	                    
   146	                    if (itemData) {
   147	                        let quantityInBaseUnit = item.quantity;
   148	                        
   149	                        // Jika satuan pembelian berbeda dengan satuan dasar, konversikan
   150	                        if (item.unit !== itemData.base_unit) {
   151	                            const unitConversion = itemData.unit_conversions.find(
   152	                                // eslint-disable-next-line @typescript-eslint/no-explicit-any
   153	                                (uc: { unit_name: any; }) => uc.unit_name === item.unit
   154	                            );
   155	                            
   156	                            if (unitConversion) {
   157	                                // Konversikan ke satuan dasar
   158	                                quantityInBaseUnit = item.quantity / unitConversion.conversion_rate;
   159	                            }
   160	                        }
   161	                        
   162	                        // Hitung stok baru (kurangi dari stok yang ada) dan update
   163	                        const newStock = Math.max(0, (itemData.stock || 0) - quantityInBaseUnit);
   164	                        await supabase
   165	                            .from('items').update({ stock: newStock }).eq('id', item.item_id);
   166	                    }
   167	                }
   168	
   169	                // Setelah memperbarui stok, baru hapus purchase
   170	                const { error } = await supabase
   171	                    .from("purchases")
   172	                    .delete()
   173	                    .eq("id", id);
   174	
   175	                if (error) throw error;
   176	                fetchPurchases(currentPage, debouncedSearch, itemsPerPage);
   177	            } catch (error) {
   178	                console.error("Error deleting purchase:", error);
   179	                alert("Gagal menghapus pembelian. Silakan coba lagi.");
   180	            }
   181	        }
   182	    };
   183	
   184	    const getStatusBadgeVariant = (status: string) => {
   185	        switch (status) {
   186	            case 'paid':
   187	                return 'success';
   188	            case 'partial':
   189	                return 'warning';
   190	            case 'unpaid':
   191	                return 'danger';
   192	            default:
   193	                return 'secondary';
   194	        }
   195	    };
   196	
   197	    const getStatusLabel = (status: string) => {
   198	        switch (status) {
   199	            case 'paid':
   200	                return 'Lunas';
   201	            case 'partial':
   202	                return 'Sebagian';
   203	            case 'unpaid':
   204	                return 'Belum Bayar';
   205	            default:
   206	                return status;
   207	        }
   208	    };
   209	
   210	    const getPaymentMethodLabel = (method: string) => {
   211	        switch (method) {
   212	            case 'cash':
   213	                return 'Tunai';
   214	            case 'transfer':
   215	                return 'Transfer';
   216	            case 'credit':
   217	                return 'Kredit';
   218	            default:
   219	                return method;
   220	        }
   221	    };
   222	
   223	    const totalPages = Math.ceil(totalItems / itemsPerPage);
   224	
   225	    return (
   226	        <Card>
   227	            <div className="flex justify-between items-center mb-6">
   228	                <h1 className="text-2xl font-bold text-gray-800">Daftar Pembelian</h1>
   229	
   230	                <Link to="/purchases/create">
   231	                    <Button variant="primary">
   232	                        <FaPlus className="mr-2" />
   233	                        Tambah Pembelian Baru
   234	                    </Button>
   235	                </Link>
   236	            </div>
   237	
   238	            <div className="mb-4 relative">
   239	                <input
   240	                    type="text"
   241	                    placeholder="Cari nomor faktur atau supplier..."
   242	                    className="w-full p-3 border rounded-md pl-10"
   243	                    value={search}
   244	                    onChange={(e) => setSearch(e.target.value)}
   245	                />
   246	                <FaSearch className="absolute left-3 top-3.5 text-gray-400" />
   247	            </div>
   248	
   249	            {loading ? (
   250	                <Loading />
   251	            ) : (
   252	                <> 
   253	                    {tableLoading ? (
   254	                        <div>
   255	                            <Loading/>
   256	                        </div>
   257	                    ) : (
   258	                        <Table>
   259	                            <TableHead>
   260	                                <TableRow>
   261	                                    <TableHeader>No. Faktur</TableHeader>
   262	                                    <TableHeader>Tanggal</TableHeader>
   263	                                    <TableHeader>Supplier</TableHeader>
   264	                                    <TableHeader className="text-right">Total</TableHeader>
   265	                                    <TableHeader className="text-center">Status Pembayaran</TableHeader>
   266	                                    <TableHeader className="text-center">Metode Pembayaran</TableHeader>
   267	                                    <TableHeader className="text-center">Aksi</TableHeader>
   268	                                </TableRow>
   269	                            </TableHead>
   270	                            <TableBody>
   271	                                {purchases.length === 0 ? (
   272	                                    <TableRow>
   273	                                        <TableCell
   274	                                            colSpan={7}
   275	                                            className="text-center text-gray-600"
   276	                                        >
   277	                                            {debouncedSearch ? `Tidak ada pembelian dengan kata kunci "${debouncedSearch}"` : "Tidak ada data pembelian yang ditemukan"}
   278	                                        </TableCell>
   279	                                    </TableRow>
   280	                                ) : (
   281	                                    purchases.map((purchase) => (
   282	                                        <TableRow key={purchase.id}>
   283	                                            <TableCell>{purchase.invoice_number}</TableCell>
   284	                                            <TableCell>
   285	                                                {new Date(purchase.date).toLocaleDateString('id-ID', {
   286	                                                    day: '2-digit',
   287	                                                    month: 'short',
   288	                                                    year: 'numeric'
   289	                                                })}
   290	                                            </TableCell>
   291	                                            <TableCell>{purchase.supplier?.name || 'Tidak ada supplier'}</TableCell>
   292	                                            <TableCell className="text-right">
   293	                                                {purchase.total.toLocaleString('id-ID', {
   294	                                                    style: 'currency',
   295	                                                    currency: 'IDR'
   296	                                                })}
   297	                                            </TableCell>
   298	                                            <TableCell className="text-center">
   299	                                                <Badge variant={getStatusBadgeVariant(purchase.payment_status)}>
   300	                                                    {getStatusLabel(purchase.payment_status)}
   301	                                                </Badge>
   302	                                            </TableCell>
   303	                                            <TableCell className="text-center">
   304	                                                {getPaymentMethodLabel(purchase.payment_method)}
   305	                                            </TableCell>
   306	                                            <TableCell className="text-center">
   307	                                                <div className="flex justify-center space-x-2">
   308	                                                    <Link to={`/purchases/view/${purchase.id}`}>
   309	                                                        <Button variant="primary" size="sm">
   310	                                                            <FaEye />
   311	                                                        </Button>
   312	                                                    </Link>
   313	                                                    <Link to={`/purchases/edit/${purchase.id}`}>
   314	                                                        <Button variant="secondary" size="sm">
   315	                                                            <FaEdit />
   316	                                                        </Button>
   317	                                                    </Link>
   318	                                                    <Button
   319	                                                        variant="danger"
   320	                                                        size="sm"
   321	                                                        onClick={() => handleDelete(purchase.id)}
   322	                                                    >
   323	                                                        <FaTrash />
   324	                                                    </Button>
   325	                                                </div>
   326	                                            </TableCell>
   327	                                        </TableRow>
   328	                                    ))
   329	                                )}
   330	                            </TableBody>
   331	                        </Table>
   332	                    )}
   333	
   334	                    <Pagination
   335	                        currentPage={currentPage}
   336	                        totalPages={totalPages}
   337	                        totalItems={totalItems}
   338	                        itemsPerPage={itemsPerPage}
   339	                        itemsCount={purchases.length}
   340	                        onPageChange={handlePageChange}
   341	                        onItemsPerPageChange={handleItemsPerPageChange}
   342	                    />
   343	                </>
   344	            )}
   345	        </Card>
   346	    );
   347	};
   348	
   349	export default PurchaseList;


===============================================
= File: ./src/pages/purchases/CreatePurchase.tsx 
===============================================

     1	import React from 'react';
     2	import { useNavigate } from 'react-router-dom';
     3	import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '../../components/ui/Card';
     4	import { FormActions } from '../../components/ui/FormActions';
     5	import { FormSection } from '../../components/ui/FormComponents';
     6	import { usePurchaseForm } from '../../hooks/usePurchaseForm';
     7	import { useItemSelection } from '../../hooks/useItemSelection';
     8	import PurchaseInformationForm from '../../components/purchases/PurchaseInfoForm';
     9	import ItemSearchBar from '../../components/purchases/ItemSearchBar';
    10	import PurchaseItemsTable from '../../components/purchases/PurchaseItemsTable';
    11	
    12	const CreatePurchase: React.FC = () => {
    13	    const navigate = useNavigate();
    14	    const {
    15	        formData,
    16	        suppliers,
    17	        purchaseItems,
    18	        total,
    19	        loading,
    20	        handleChange,
    21	        addItem,
    22	        updateItem,
    23	        handleUnitChange,
    24	        updateItemVat,
    25	        updateItemExpiry,
    26	        updateItemBatchNo,
    27	        removeItem,
    28	        handleSubmit
    29	    } = usePurchaseForm();
    30	
    31	    const {
    32	        searchItem,
    33	        setSearchItem,
    34	        showItemDropdown,
    35	        setShowItemDropdown,
    36	        selectedItem,
    37	        setSelectedItem,
    38	        filteredItems,
    39	        getItemByID
    40	    } = useItemSelection();
    41	
    42	    const onHandleSubmit = (e: React.FormEvent) => {
    43	        handleSubmit(e);
    44	    };
    45	
    46	    const onHandleUnitChange = (id: string, unitName: string) => {
    47	        handleUnitChange(id, unitName, getItemByID);
    48	    };
    49	
    50	    return (
    51	        <Card>
    52	            <CardHeader>
    53	                <CardTitle>Tambah Pembelian Baru</CardTitle>
    54	            </CardHeader>
    55	            
    56	            <form onSubmit={onHandleSubmit}>
    57	                <CardContent className="space-y-6">
    58	                    <PurchaseInformationForm 
    59	                        formData={formData}
    60	                        suppliers={suppliers}
    61	                        handleChange={handleChange}
    62	                    />
    63	                    
    64	                    <FormSection title="Daftar Item">
    65	                        <ItemSearchBar 
    66	                            searchItem={searchItem}
    67	                            setSearchItem={setSearchItem}
    68	                            showItemDropdown={showItemDropdown}
    69	                            setShowItemDropdown={setShowItemDropdown}
    70	                            filteredItems={filteredItems}
    71	                            selectedItem={selectedItem}
    72	                            setSelectedItem={setSelectedItem}
    73	                            onAddItem={addItem}
    74	                        />
    75	                        
    76	                        <PurchaseItemsTable 
    77	                            purchaseItems={purchaseItems}
    78	                            total={total}
    79	                            isVatIncluded={formData.is_vat_included}
    80	                            onUpdateItem={updateItem}
    81	                            onRemoveItem={removeItem}
    82	                            onUpdateItemVat={updateItemVat}
    83	                            onUpdateItemExpiry={updateItemExpiry}
    84	                            onUpdateItemBatchNo={updateItemBatchNo}
    85	                            onUnitChange={onHandleUnitChange}
    86	                            getItemByID={getItemByID}
    87	                        />
    88	                    </FormSection>
    89	                </CardContent>
    90	                
    91	                <CardFooter className="flex justify-between">
    92	                    <FormActions
    93	                        onCancel={() => navigate('/purchases')}
    94	                        isSaving={loading}
    95	                        isDisabled={purchaseItems.length === 0}
    96	                    />
    97	                </CardFooter>
    98	            </form>
    99	        </Card>
   100	    );
   101	};
   102	
   103	export default CreatePurchase;


===============================================
= File: ./src/pages/auth/Login.tsx 
===============================================

     1	// src/pages/auth/Login.tsx
     2	import { useState } from 'react';
     3	import { Button } from '../../components/ui/Button';
     4	import { Input } from '../../components/ui/Input';
     5	import { useAuthStore } from '../../store/authStore';
     6	
     7	const Login = () => {
     8	    const { login, error, loading } = useAuthStore();
     9	    const [email, setEmail] = useState('');
    10	    const [password, setPassword] = useState('');
    11	
    12	    const handleSubmit = async (e: React.FormEvent) => {
    13	        e.preventDefault();
    14	        await login(email, password);
    15	    };
    16	
    17	    return (
    18	        <div className="min-h-screen flex items-center justify-center bg-gray-100">
    19	            <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
    20	                <h1 className="text-2xl font-bold text-center text-primary mb-6">Apotek & Klinik Login</h1>
    21	                
    22	                {error && (
    23	                    <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
    24	                        {error}
    25	                    </div>
    26	                )}
    27	                
    28	                <form onSubmit={handleSubmit}>
    29	                    <div className="mb-4">
    30	                        <Input 
    31	                            label="Email"
    32	                            type="email"
    33	                            value={email}
    34	                            onChange={(e) => setEmail(e.target.value)}
    35	                            required
    36	                        />
    37	                    </div>
    38	                
    39	                    <Input 
    40	                        label="Password"
    41	                        type="password"
    42	                        className="mb-6"
    43	                        value={password}
    44	                        onChange={(e) => setPassword(e.target.value)}
    45	                        required
    46	                    />
    47	                
    48	                    <Button
    49	                        type="submit"
    50	                        variant="primary"
    51	                        fullWidth
    52	                        isLoading={loading}
    53	                    >
    54	                        Login
    55	                    </Button>
    56	                </form>
    57	            </div>
    58	        </div>
    59	    );
    60	};
    61	
    62	export default Login;


===============================================
= File: ./src/pages/sales/CreateSale.tsx 
===============================================

     1	import { useState, useEffect } from 'react';
     2	import { useNavigate } from 'react-router-dom';
     3	import { supabase } from '../../lib/supabase';
     4	import { useForm, useFieldArray, Controller } from 'react-hook-form';
     5	import { FaPlus, FaTrash, FaSearch } from 'react-icons/fa';
     6	
     7	interface Item {
     8	    id: string;
     9	    name: string;
    10	    sell_price: number;
    11	    stock: number;
    12	}
    13	
    14	interface Patient {
    15	    id: string;
    16	    name: string;
    17	}
    18	
    19	interface Doctor {
    20	    id: string;
    21	    name: string;
    22	}
    23	
    24	interface SaleFormData {
    25	    patient_id: string;
    26	    doctor_id: string;
    27	    payment_method: string;
    28	    items: {
    29	        item_id: string;
    30	        quantity: number;
    31	        price: number;
    32	        subtotal: number;
    33	    }[];
    34	}
    35	
    36	const CreateSale = () => {
    37	    const navigate = useNavigate();
    38	    const [items, setItems] = useState<Item[]>([]);
    39	    const [patients, setPatients] = useState<Patient[]>([]);
    40	    const [doctors, setDoctors] = useState<Doctor[]>([]);
    41	    const [loading, setLoading] = useState(false);
    42	    const [searchItem, setSearchItem] = useState('');
    43	    const [selectedItem, setSelectedItem] = useState<Item | null>(null);
    44	    const [showItemDropdown, setShowItemDropdown] = useState(false);
    45	
    46	    const { control, handleSubmit, setValue, watch, register, formState: { errors } } = useForm<SaleFormData>({
    47	        defaultValues: {
    48	            patient_id: '',
    49	            doctor_id: '',
    50	            payment_method: 'cash',
    51	            items: []
    52	        }
    53	    });
    54	
    55	    const { fields, append, remove } = useFieldArray({
    56	        control,
    57	        name: "items"
    58	    });
    59	
    60	    const items = watch('items');
    61	    const total = items.reduce((sum, item) => sum + (item.subtotal || 0), 0);
    62	
    63	    useEffect(() => {
    64	        fetchItems();
    65	        fetchPatients();
    66	        fetchDoctors();
    67	    }, []);
    68	
    69	    const fetchItems = async () => {
    70	        const { data } = await supabase
    71	            .from('items')
    72	            .select('id, name, sell_price, stock')
    73	            .gt('stock', 0)
    74	            .order('name');
    75	
    76	        if (data) setItems(data);
    77	    };
    78	
    79	    const fetchPatients = async () => {
    80	        const { data } = await supabase
    81	            .from('patients')
    82	            .select('id, name')
    83	            .order('name');
    84	
    85	        if (data) setPatients(data);
    86	    };
    87	
    88	    const fetchDoctors = async () => {
    89	        const { data } = await supabase
    90	            .from('doctors')
    91	            .select('id, name')
    92	            .order('name');
    93	
    94	        if (data) setDoctors(data);
    95	    };
    96	
    97	    const addItem = () => {
    98	        if (!selectedItem) return;
    99	
   100	        append({
   101	            item_id: selectedItem.id,
   102	            quantity: 1,
   103	            price: selectedItem.sell_price,
   104	            subtotal: selectedItem.sell_price
   105	        });
   106	
   107	        setSelectedItem(null);
   108	        setSearchItem('');
   109	    };
   110	
   111	    const updateSubtotal = (index: number, quantity: number, price: number) => {
   112	        setValue(`items.${index}.subtotal`, quantity * price);
   113	    };
   114	
   115	    const filteredItems = items.filter(item =>
   116	        item.name.toLowerCase().includes(searchItem.toLowerCase())
   117	    );
   118	
   119	    const onSubmit = async (data: SaleFormData) => {
   120	        try {
   121	            setLoading(true);
   122	
   123	            // Insert sale record
   124	            const { data: saleData, error: saleError } = await supabase
   125	                .from('sales')
   126	                .insert({
   127	                    patient_id: data.patient_id || null,
   128	                    doctor_id: data.doctor_id || null,
   129	                    date: new Date(),
   130	                    total: total,
   131	                    payment_method: data.payment_method
   132	                })
   133	                .select('id')
   134	                .single();
   135	
   136	            if (saleError) throw saleError;
   137	
   138	            // Insert sale items
   139	            const saleItems = data.items.map(item => ({
   140	                sale_id: saleData.id,
   141	                item_id: item.item_id,
   142	                quantity: item.quantity,
   143	                price: item.price,
   144	                subtotal: item.subtotal
   145	            }));
   146	
   147	            const { error: itemsError } = await supabase
   148	                .from('sale_items')
   149	                .insert(saleItems);
   150	
   151	            if (itemsError) throw itemsError;
   152	
   153	            // Update medicine stocks
   154	            for (const item of data.items) {
   155	                await supabase
   156	                    .from('items')
   157	                    .update({
   158	                        stock: supabase.rpc('decrement', { x: item.quantity })
   159	                    })
   160	                    .eq('id', item.item_id);
   161	            }
   162	
   163	            navigate('/sales');
   164	        } catch (error) {
   165	            console.error('Error creating sale:', error);
   166	        } finally {
   167	            setLoading(false);
   168	        }
   169	    };
   170	
   171	    return (
   172	        <div className="bg-white p-6 rounded-lg shadow">
   173	            <h1 className="text-2xl font-bold text-gray-800 mb-6">Buat Penjualan Baru</h1>
   174	
   175	            <form onSubmit={handleSubmit(onSubmit)}>
   176	                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
   177	                    <div>
   178	                        <label className="block mb-2 text-gray-700">Pasien (Opsional)</label>
   179	                        <select
   180	                            {...register('patient_id')}
   181	                            className="w-full p-3 border rounded-md"
   182	                        >
   183	                            <option value="">-- Pilih Pasien --</option>
   184	                            {patients.map(patient => (
   185	                                <option key={patient.id} value={patient.id}>{patient.name}</option>
   186	                            ))}
   187	                        </select>
   188	                    </div>
   189	
   190	                    <div>
   191	                        <label className="block mb-2 text-gray-700">Dokter (Opsional)</label>
   192	                        <select
   193	                            {...register('doctor_id')}
   194	                            className="w-full p-3 border rounded-md"
   195	                        >
   196	                            <option value="">-- Pilih Dokter --</option>
   197	                            {doctors.map(doctor => (
   198	                                <option key={doctor.id} value={doctor.id}>{doctor.name}</option>
   199	                            ))}
   200	                        </select>
   201	                    </div>
   202	
   203	                    <div>
   204	                        <label className="block mb-2 text-gray-700">Metode Pembayaran</label>
   205	                        <select
   206	                            {...register('payment_method')}
   207	                            className="w-full p-3 border rounded-md"
   208	                        >
   209	                            <option value="cash">Tunai</option>
   210	                            <option value="debit">Kartu Debit</option>
   211	                            <option value="credit">Kartu Kredit</option>
   212	                            <option value="insurance">Asuransi</option>
   213	                        </select>
   214	                    </div>
   215	                </div>
   216	
   217	                <div className="mb-6">
   218	                    <h2 className="text-xl font-semibold mb-4">Daftar Item</h2>
   219	
   220	                    <div className="mb-4">
   221	                        <div className="relative">
   222	                            <input
   223	                                type="text"
   224	                                placeholder="Cari item..."
   225	                                className="w-full p-3 border rounded-md"
   226	                                value={searchItem}
   227	                                onChange={(e) => {
   228	                                    setSearchItem(e.target.value);
   229	                                    setShowItemDropdown(true);
   230	                                }}
   231	                                onFocus={() => setShowItemDropdown(true)}
   232	                            />
   233	
   234	                            {showItemDropdown && searchItem && (
   235	                                <div className="absolute z-10 w-full mt-1 bg-white border rounded-md shadow-lg max-h-60 overflow-y-auto">
   236	                                    {filteredItems.length === 0 ? (
   237	                                        <div className="p-3 text-gray-500">Tidak ada item yang ditemukan</div>
   238	                                    ) : (
   239	                                        filteredItems.map(item => (
   240	                                            <div
   241	                                                key={item.id}
   242	                                                className="p-3 hover:bg-gray-100 cursor-pointer"
   243	                                                onClick={() => {
   244	                                                    setSelectedItem(item);
   245	                                                    setSearchItem(item.name);
   246	                                                    setShowItemDropdown(false);
   247	                                                }}
   248	                                            >
   249	                                                <div>{item.name}</div>
   250	                                                <div className="text-sm text-gray-500">
   251	                                                    Stok: {item.stock} | Harga: {item.sell_price.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' })}
   252	                                                </div>
   253	                                            </div>
   254	                                        ))
   255	                                    )}
   256	                                </div>
   257	                            )}
   258	                        </div>
   259	
   260	                        <div className="mt-2 flex">
   261	                            <button
   262	                                type="button"
   263	                                className="px-4 py-2 bg-primary text-white rounded-md flex items-center disabled:opacity-50"
   264	                                onClick={addItem}
   265	                                disabled={!selectedItem}
   266	                            >
   267	                                <FaPlus className="mr-2" />
   268	                                Tambah Item
   269	                            </button>
   270	                        </div>
   271	                    </div>
   272	
   273	                    <div className="overflow-x-auto">
   274	                        <table className="min-w-full bg-white border">
   275	                            <thead className="bg-gray-100">
   276	                                <tr>
   277	                                    <th className="py-3 px-4 text-left">Nama Item</th>
   278	                                    <th className="py-3 px-4 text-right">Harga</th>
   279	                                    <th className="py-3 px-4 text-center">Kuantitas</th>
   280	                                    <th className="py-3 px-4 text-right">Subtotal</th>
   281	                                    <th className="py-3 px-4 text-center">Aksi</th>
   282	                                </tr>
   283	                            </thead>
   284	                            <tbody className="divide-y divide-gray-200">
   285	                                {fields.length === 0 ? (
   286	                                    <tr>
   287	                                        <td colSpan={5} className="py-4 px-4 text-center text-gray-500">
   288	                                            Belum ada item
   289	                                        </td>
   290	                                    </tr>
   291	                                ) : (
   292	                                    fields.map((field, index) => {
   293	                                        const item = items.find(m => m.id === items[index]?.item_id);
   294	
   295	                                        return (
   296	                                            <tr key={field.id}>
   297	                                                <td className="py-3 px-4">{item?.name}</td>
   298	                                                <td className="py-3 px-4 text-right">
   299	                                                    <Controller
   300	                                                        control={control}
   301	                                                        name={`items.${index}.price`}
   302	                                                        render={({ field }) => (
   303	                                                            <input
   304	                                                                type="number"
   305	                                                                className="w-32 p-2 border rounded-md text-right"
   306	                                                                {...field}
   307	                                                                onChange={(e) => {
   308	                                                                    const price = parseFloat(e.target.value);
   309	                                                                    field.onChange(price);
   310	                                                                    updateSubtotal(index, items[index]?.quantity || 0, price);
   311	                                                                }}
   312	                                                            />
   313	                                                        )}
   314	                                                    />
   315	                                                </td>
   316	                                                <td className="py-3 px-4 text-center">
   317	                                                    <Controller
   318	                                                        control={control}
   319	                                                        name={`items.${index}.quantity`}
   320	                                                        render={({ field }) => (
   321	                                                            <input
   322	                                                                type="number"
   323	                                                                className="w-20 p-2 border rounded-md text-center"
   324	                                                                min="1"
   325	                                                                max={item?.stock || 1}
   326	                                                                {...field}
   327	                                                                onChange={(e) => {
   328	                                                                    const quantity = parseInt(e.target.value);
   329	                                                                    field.onChange(quantity);
   330	                                                                    updateSubtotal(index, quantity, items[index]?.price || 0);
   331	                                                                }}
   332	                                                            />
   333	                                                        )}
   334	                                                    />
   335	                                                </td>
   336	                                                <td className="py-3 px-4 text-right">
   337	                                                    {items[index]?.subtotal?.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' })}
   338	                                                </td>
   339	                                                <td className="py-3 px-4 text-center">
   340	                                                    <button
   341	                                                        type="button"
   342	                                                        className="p-1.5 bg-red-500 text-white rounded-md hover:bg-red-600"
   343	                                                        onClick={() => remove(index)}
   344	                                                    >
   345	                                                        <FaTrash />
   346	                                                    </button>
   347	                                                </td>
   348	                                            </tr>
   349	                                        );
   350	                                    })
   351	                                )}
   352	                            </tbody>
   353	                            <tfoot className="bg-gray-50 font-semibold">
   354	                                <tr>
   355	                                    <td colSpan={3} className="py-3 px-4 text-right">Total:</td>
   356	                                    <td className="py-3 px-4 text-right">
   357	                                        {total.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' })}
   358	                                    </td>
   359	                                    <td></td>
   360	                                </tr>
   361	                            </tfoot>
   362	                        </table>
   363	                    </div>
   364	                </div>
   365	
   366	                <div className="flex justify-end">
   367	                    <button
   368	                        type="button"
   369	                        className="px-4 py-2 border rounded-md mr-2"
   370	                        onClick={() => navigate('/sales')}
   371	                    >
   372	                        Batal
   373	                    </button>
   374	                    <button
   375	                        type="submit"
   376	                        className="px-4 py-2 bg-primary text-white rounded-md"
   377	                        disabled={loading || fields.length === 0}
   378	                    >
   379	                        {loading ? 'Menyimpan...' : 'Simpan Penjualan'}
   380	                    </button>
   381	                </div>
   382	            </form>
   383	        </div>
   384	    );
   385	};
   386	
   387	export default CreateSale;


===============================================
= File: ./src/App.tsx 
===============================================

     1	import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
     2	import { Suspense, lazy, useEffect } from 'react';
     3	import MainLayout from './components/layout/MainLayout';
     4	import Login from './pages/auth/Login';
     5	import './index.css';
     6	import { useAuthStore } from './store/authStore';
     7	
     8	// Lazy load pages
     9	const Dashboard = lazy(() => import('./pages/dashboard/Dashboard'));
    10	const ItemList = lazy(() => import('./pages/master-data/ItemList'));
    11	const CategoryList = lazy(() => import('./pages/master-data/CategoryList'));
    12	const UnitList = lazy(() => import('./pages/master-data/UnitList'));
    13	const TypeList = lazy(() => import('./pages/master-data/TypeList'));
    14	const AddItem = lazy(() => import('./pages/master-data/AddItem'));
    15	const PurchaseList = lazy(() => import('./pages/purchases/PurchaseList'));
    16	const CreatePurchase = lazy(() => import('./pages/purchases/CreatePurchase'));
    17	// Tambahkan halaman lain sesuai kebutuhan
    18	
    19	function App() {
    20	  const { session, initialize } = useAuthStore();
    21	  
    22	  // Inisialisasi auth state saat aplikasi dimuat
    23	  useEffect(() => {
    24	    initialize();
    25	  }, [initialize]);
    26	  
    27	
    28	  return (
    29	    <Router future={{ v7_startTransition: true, v7_relativeSplatPath: true }}>
    30	      <Routes>
    31	        <Route path="/login" element={!session ? <Login /> : <Navigate to="/" />} />
    32	        
    33	        <Route path="/" element={session ? <MainLayout /> : <Navigate to="/login" />}>
    34	          <Route 
    35	            index 
    36	            element={
    37	            <div className="text-gray-800">
    38	              <Suspense fallback={<div>Loading...</div>}>
    39	                <Dashboard />
    40	              </Suspense>
    41	            </div>
    42	          } />
    43	          
    44	          <Route path="master-data">
    45	            <Route path="items" element={
    46	              <Suspense fallback={<div>Loading...</div>}>
    47	                <ItemList />
    48	              </Suspense>
    49	            } />
    50	            <Route path="items/add" element={
    51	              <Suspense fallback={<div>Loading...</div>}>
    52	                <AddItem />
    53	              </Suspense>
    54	            } />
    55	            <Route path="categories" element={
    56	              <Suspense fallback={<div>Loading...</div>}>
    57	                <CategoryList />
    58	              </Suspense>
    59	            } />
    60	            <Route path="types" element={
    61	              <Suspense fallback={<div>Loading...</div>}>
    62	                <TypeList />
    63	              </Suspense>
    64	            } />
    65	            <Route path="units" element={
    66	              <Suspense fallback={<div>Loading...</div>}>
    67	                <UnitList />
    68	              </Suspense>
    69	            } />
    70	            {/* Tambahkan route lain sesuai kebutuhan */}
    71	          </Route>
    72	          
    73	          <Route path="purchases">
    74	            <Route 
    75	              index 
    76	              element={
    77	                <Suspense fallback={<div>Loading...</div>}>
    78	                  <PurchaseList />
    79	                </Suspense>
    80	              } 
    81	            />
    82	            <Route 
    83	              path="create" 
    84	              element={
    85	                <Suspense fallback={<div>Loading...</div>}>
    86	                  <CreatePurchase />
    87	                </Suspense>
    88	              } 
    89	            />
    90	            <Route path="orders" element={<div>Daftar Pesanan Beli (Coming Soon)</div>} />
    91	            <Route path="price-history" element={<div>Riwayat Harga Beli (Coming Soon)</div>} />
    92	          </Route>
    93	          
    94	          {/* Tambahkan route untuk modul lain */}
    95	        </Route>
    96	      </Routes>
    97	    </Router>
    98	  );
    99	}
   100	
   101	export default App;


===============================================
= File: ./src/vite-env.d.ts 
===============================================

     1	/// <reference types="vite/client" />


===============================================
= File: ./src/lib/formatters.ts 
===============================================

     1	// src/lib/formatters.ts
     2	export function formatRupiah(angka: number): string {
     3	    return new Intl.NumberFormat('id-ID', {
     4	        style: 'currency',
     5	        currency: 'IDR',
     6	        minimumFractionDigits: 0,
     7	        maximumFractionDigits: 0
     8	    }).format(angka);
     9	}
    10	
    11	export function formatPercentage(value: number): string {
    12	    return `${value}%`;
    13	}
    14	
    15	export function extractNumericValue(value: string): number {
    16	    const numericValue = value.replace(/[^\d]/g, '');
    17	    return numericValue ? parseInt(numericValue) : 0;
    18	}


===============================================
= File: ./src/lib/supabase.ts 
===============================================

     1	import { createClient } from '@supabase/supabase-js'
     2	
     3	const supabaseUrl = import.meta.env.VITE_SUPABASE_URL as string
     4	const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY as string
     5	
     6	export const supabase = createClient(supabaseUrl, supabaseAnonKey)


===============================================
= File: ./src/lib/classNames.ts 
===============================================

     1	export function classNames(...classes: (string | boolean | undefined | null)[]): string {
     2	    return classes.filter(Boolean).join(' ');
     3	}


===============================================
= File: ./src/store/authStore.ts 
===============================================

     1	/* eslint-disable @typescript-eslint/no-explicit-any */
     2	import { create } from 'zustand';
     3	import { Session } from '@supabase/supabase-js';
     4	import { supabase } from '../lib/supabase';
     5	
     6	interface AuthState {
     7	    session: Session | null;
     8	    user: any | null;
     9	    loading: boolean;
    10	    error: string | null;
    11	    login: (email: string, password: string) => Promise<void>;
    12	    logout: () => Promise<void>;
    13	    initialize: () => Promise<void>;
    14	}
    15	
    16	export const useAuthStore = create<AuthState>((set) => ({
    17	    session: null,
    18	    user: null,
    19	    loading: true,
    20	    error: null,
    21	
    22	    initialize: async () => {
    23	        try {
    24	            const { data } = await supabase.auth.getSession();
    25	
    26	            if (data.session) {
    27	                const { data: userData } = await supabase
    28	                    .from('users')
    29	                    .select('*')
    30	                    .eq('id', data.session.user.id)
    31	                    .single();
    32	
    33	                set({
    34	                    session: data.session,
    35	                    user: userData,
    36	                    loading: false
    37	                });
    38	            } else {
    39	                set({ loading: false });
    40	            }
    41	        } catch (error) {
    42	            console.error('Error initializing auth:', error);
    43	            set({ loading: false });
    44	        }
    45	    },
    46	
    47	    login: async (email, password) => {
    48	        try {
    49	            set({ loading: true, error: null });
    50	
    51	            const { data, error } = await supabase.auth.signInWithPassword({
    52	                email,
    53	                password
    54	            });
    55	
    56	            if (error) throw error;
    57	
    58	            const { data: userData } = await supabase
    59	                .from('users')
    60	                .select('*')
    61	                .eq('id', data.user?.id)
    62	                .single();
    63	
    64	            set({
    65	                session: data.session,
    66	                user: userData,
    67	                loading: false
    68	            });
    69	        } catch (error: any) {
    70	            console.error('Login error:', error);
    71	            set({ error: error.message, loading: false });
    72	        }
    73	    },
    74	
    75	    logout: async () => {
    76	        try {
    77	            set({ loading: true });
    78	            await supabase.auth.signOut();
    79	            set({ session: null, user: null, loading: false });
    80	        } catch (error: any) {
    81	            console.error('Logout error:', error);
    82	            set({ error: error.message, loading: false });
    83	        }
    84	    }
    85	}));


===============================================
= File: ./.gitignore 
===============================================

     1	# Logs
     2	logs
     3	*.log
     4	npm-debug.log*
     5	yarn-debug.log*
     6	yarn-error.log*
     7	pnpm-debug.log*
     8	lerna-debug.log*
     9	
    10	node_modules
    11	dist
    12	dist-ssr
    13	*.local
    14	
    15	# Editor directories and files
    16	.vscode/*
    17	!.vscode/extensions.json
    18	.idea
    19	.DS_Store
    20	*.suo
    21	*.ntvs*
    22	*.njsproj
    23	*.sln
    24	*.sw?


===============================================
= File: ./get-database 
===============================================

     1	#!/bin/bash
     2	# Konfigurasi Supabase
     3	SUPABASE_URL="https://psqmckbtwqphcteymjil.supabase.co"
     4	SUPABASE_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBzcW1ja2J0d3FwaGN0ZXltamlsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIxOTQ2MjAsImV4cCI6MjA1Nzc3MDYyMH0.wvxpldpaoanDk9Wd7wDUeeCuMSVw9e0pxE7_BMt823s"
     5	
     6	# Buat direktori output jika belum ada
     7	OUTPUT_DIR="supabase_data"
     8	mkdir -p "$OUTPUT_DIR"
     9	
    10	# File output gabungan
    11	OUTPUT_FILE="$OUTPUT_DIR/database_export.txt"
    12	> "$OUTPUT_FILE"
    13	
    14	# Daftar tabel yang diketahui (diperbarui sesuai gambar)
    15	TABLES=(
    16	  "doctors"
    17	  "item_categories"
    18	  "item_types"
    19	  "item_units"
    20	  "items"
    21	  "patients"
    22	  "purchase_items"
    23	  "purchases"
    24	  "sale_items"
    25	  "sales"
    26	  "suppliers"
    27	  "unit_conversions"
    28	  "users"
    29	)
    30	
    31	# Loop melalui setiap tabel
    32	for TABLE in "${TABLES[@]}"; do
    33	  echo "Mengunduh data tabel: $TABLE"
    34	  
    35	  # Ambil data dari tabel dan simpan ke file JSON
    36	  RESPONSE=$(curl "$SUPABASE_URL/rest/v1/$TABLE?select=*" \
    37	    -H "apikey: $SUPABASE_KEY" \
    38	    -H "Authorization: Bearer $SUPABASE_KEY" \
    39	    -s)
    40	    
    41	  # Simpan ke file JSON individual
    42	  echo "$RESPONSE" | jq . > "$OUTPUT_DIR/$TABLE.json"
    43	  
    44	  # Tambahkan ke file gabungan
    45	  echo "=== DATA TABEL: $TABLE ===" >> "$OUTPUT_FILE"
    46	  echo "$RESPONSE" | jq . >> "$OUTPUT_FILE"
    47	  echo -e "\n\n" >> "$OUTPUT_FILE"
    48	  
    49	  echo "✓ Data $TABLE berhasil diproses"
    50	done
    51	
    52	echo "Semua data telah diunduh ke direktori $OUTPUT_DIR"
    53	echo "Ekspor gabungan disimpan di $OUTPUT_FILE"


===============================================
= File: ./vite.config.ts 
===============================================

     1	import { defineConfig } from 'vite'
     2	import react from '@vitejs/plugin-react'
     3	
     4	// https://vite.dev/config/
     5	export default defineConfig({
     6	  plugins: [react()],
     7	})


===============================================
= File: ./tsconfig.node.json 
===============================================

     1	{
     2	  "compilerOptions": {
     3	    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
     4	    "target": "ES2022",
     5	    "lib": ["ES2023"],
     6	    "module": "ESNext",
     7	    "skipLibCheck": true,
     8	
     9	    /* Bundler mode */
    10	    "moduleResolution": "bundler",
    11	    "allowImportingTsExtensions": true,
    12	    "isolatedModules": true,
    13	    "moduleDetection": "force",
    14	    "noEmit": true,
    15	
    16	    /* Linting */
    17	    "strict": true,
    18	    "noUnusedLocals": true,
    19	    "noUnusedParameters": true,
    20	    "noFallthroughCasesInSwitch": true,
    21	    "noUncheckedSideEffectImports": true
    22	  },
    23	  "include": ["vite.config.ts"]
    24	}


===============================================
= File: ./get-all 
===============================================

     1	#!/bin/bash
     2	echo "$(tree -I "node_modules|.git" -a)" > project_files.txt && find . -type f -not -path "./node_modules/*" -not -path "./.git/*" -not -path "./src/output.css" -not -path "./package-lock.json" -exec bash -c 'echo -e "\n\n===============================================\n= File: {} \n===============================================\n" >> project_files.txt && nl -ba {} >> project_files.txt' \;


===============================================
= File: ./index.html 
===============================================

     1	<!doctype html>
     2	<html lang="en">
     3	  <head>
     4	    <meta charset="UTF-8" />
     5	    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
     6	    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
     7	    <link href="../src/output.css" rel="stylesheet">
     8	    <!-- <title>Vite + React + TS</title> -->
     9	  </head>
    10	  <body>
    11	    <div id="root"></div>
    12	    <script type="module" src="/src/main.tsx"></script>
    13	  </body>
    14	</html>


===============================================
= File: ./eslint.config.js 
===============================================

     1	import js from '@eslint/js'
     2	import globals from 'globals'
     3	import reactHooks from 'eslint-plugin-react-hooks'
     4	import reactRefresh from 'eslint-plugin-react-refresh'
     5	import tseslint from 'typescript-eslint'
     6	
     7	export default tseslint.config(
     8	  { ignores: ['dist'] },
     9	  {
    10	    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    11	    files: ['**/*.{ts,tsx}'],
    12	    languageOptions: {
    13	      ecmaVersion: 2020,
    14	      globals: globals.browser,
    15	    },
    16	    plugins: {
    17	      'react-hooks': reactHooks,
    18	      'react-refresh': reactRefresh,
    19	    },
    20	    rules: {
    21	      ...reactHooks.configs.recommended.rules,
    22	      'react-refresh/only-export-components': [
    23	        'warn',
    24	        { allowConstantExport: true },
    25	      ],
    26	    },
    27	  },
    28	)


===============================================
= File: ./.env 
===============================================

     1	VITE_SUPABASE_URL=https://psqmckbtwqphcteymjil.supabase.co
     2	VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBzcW1ja2J0d3FwaGN0ZXltamlsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIxOTQ2MjAsImV4cCI6MjA1Nzc3MDYyMH0.wvxpldpaoanDk9Wd7wDUeeCuMSVw9e0pxE7_BMt823s


===============================================
= File: ./supabase_data/definitions.txt 
===============================================

     1	SQL Definition of doctors
     2	
     3	create table public.doctors (
     4	  id uuid not null default extensions.uuid_generate_v4 (),
     5	  name character varying(100) not null,
     6	  specialization character varying(100) null,
     7	  license_number character varying(50) null,
     8	  phone character varying(20) null,
     9	  email character varying(100) null,
    10	  created_at timestamp with time zone null default now(),
    11	  updated_at timestamp with time zone null default now(),
    12	  constraint doctors_pkey primary key (id)
    13	) TABLESPACE pg_default;
    14	
    15	create trigger set_updated_at BEFORE
    16	update on doctors for EACH row
    17	execute FUNCTION update_updated_at_column ();
    18	
    19	==============================================================
    20	SQL Definition of item_categories
    21	
    22	create table public.item_categories (
    23	  id uuid not null default extensions.uuid_generate_v4 (),
    24	  name character varying(100) not null,
    25	  description text null,
    26	  created_at timestamp with time zone null default now(),
    27	  updated_at timestamp with time zone null default now(),
    28	  constraint medicine_categories_pkey primary key (id)
    29	) TABLESPACE pg_default;
    30	
    31	create trigger set_updated_at BEFORE
    32	update on item_categories for EACH row
    33	execute FUNCTION update_updated_at_column ();
    34	
    35	==============================================================
    36	SQL Definition of item_types
    37	
    38	create table public.item_types (
    39	  id uuid not null default extensions.uuid_generate_v4 (),
    40	  name character varying(100) not null,
    41	  description text null,
    42	  created_at timestamp with time zone null default now(),
    43	  updated_at timestamp with time zone null default now(),
    44	  constraint medicine_types_pkey primary key (id)
    45	) TABLESPACE pg_default;
    46	
    47	create trigger set_updated_at BEFORE
    48	update on item_types for EACH row
    49	execute FUNCTION update_updated_at_column ();
    50	
    51	==============================================================
    52	SQL Definition of item_units
    53	
    54	create table public.item_units (
    55	  id uuid not null default extensions.uuid_generate_v4 (),
    56	  name character varying(50) not null,
    57	  created_at timestamp with time zone null default now(),
    58	  updated_at timestamp with time zone null default now(),
    59	  description text null,
    60	  constraint medicine_units_pkey primary key (id)
    61	) TABLESPACE pg_default;
    62	
    63	create trigger set_updated_at BEFORE
    64	update on item_units for EACH row
    65	execute FUNCTION update_updated_at_column ();
    66	
    67	==============================================================
    68	SQL Definition of items
    69	
    70	create table public.items (
    71	  id uuid not null default extensions.uuid_generate_v4 (),
    72	  name character varying(100) not null,
    73	  sell_price numeric(15, 2) not null default 0,
    74	  stock integer not null default 0,
    75	  min_stock integer null default 10,
    76	  description text null,
    77	  created_at timestamp with time zone null default now(),
    78	  updated_at timestamp with time zone null default now(),
    79	  is_active boolean null default true,
    80	  code character varying null,
    81	  rack character varying null,
    82	  has_expiry_date boolean null default false,
    83	  is_medicine boolean null default true,
    84	  category_id uuid null,
    85	  type_id uuid null,
    86	  unit_id uuid null,
    87	  base_unit text null,
    88	  base_price numeric(15, 2) null default 0,
    89	  unit_conversions jsonb null default '[]'::jsonb,
    90	  constraint medicines_pkey primary key (id),
    91	  constraint medicines_category_id_fkey foreign KEY (category_id) references item_categories (id),
    92	  constraint medicines_type_id_fkey foreign KEY (type_id) references item_types (id),
    93	  constraint medicines_unit_id_fkey foreign KEY (unit_id) references item_units (id),
    94	  constraint check_base_price_not_negative check ((base_price >= (0)::numeric))
    95	) TABLESPACE pg_default;
    96	
    97	create trigger set_updated_at BEFORE
    98	update on items for EACH row
    99	execute FUNCTION update_updated_at_column ();
   100	
   101	==============================================================
   102	SQL Definition of patients
   103	
   104	create table public.patients (
   105	  id uuid not null default extensions.uuid_generate_v4 (),
   106	  name character varying(100) not null,
   107	  gender character varying(10) null,
   108	  birth_date date null,
   109	  address text null,
   110	  phone character varying(20) null,
   111	  email character varying(100) null,
   112	  created_at timestamp with time zone null default now(),
   113	  updated_at timestamp with time zone null default now(),
   114	  constraint patients_pkey primary key (id)
   115	) TABLESPACE pg_default;
   116	
   117	create trigger set_updated_at BEFORE
   118	update on patients for EACH row
   119	execute FUNCTION update_updated_at_column ();
   120	
   121	==============================================================
   122	SQL Definition of purchase_items
   123	
   124	create table public.purchase_items (
   125	  id uuid not null default extensions.uuid_generate_v4 (),
   126	  purchase_id uuid null,
   127	  item_id uuid null,
   128	  quantity integer not null,
   129	  price numeric(15, 2) not null,
   130	  subtotal numeric(15, 2) not null,
   131	  created_at timestamp with time zone null default now(),
   132	  updated_at timestamp with time zone null default now(),
   133	  batch_no character varying(50) null,
   134	  expiry_date date null,
   135	  unit character varying(50) null,
   136	  constraint purchase_items_pkey primary key (id),
   137	  constraint purchase_items_item_id_fkey foreign KEY (item_id) references items (id),
   138	  constraint purchase_items_purchase_id_fkey foreign KEY (purchase_id) references purchases (id) on delete CASCADE
   139	) TABLESPACE pg_default;
   140	
   141	create index IF not exists idx_purchase_items_batch_no on public.purchase_items using btree (batch_no) TABLESPACE pg_default;
   142	
   143	create index IF not exists idx_purchase_items_expiry_date on public.purchase_items using btree (expiry_date) TABLESPACE pg_default;
   144	
   145	create trigger set_updated_at BEFORE
   146	update on purchase_items for EACH row
   147	execute FUNCTION update_updated_at_column ();
   148	
   149	==============================================================
   150	SQL Definition of purchases
   151	
   152	create table public.purchases (
   153	  id uuid not null default extensions.uuid_generate_v4 (),
   154	  supplier_id uuid null,
   155	  invoice_number character varying(50) null,
   156	  date date not null,
   157	  total numeric(15, 2) not null default 0,
   158	  payment_status character varying(20) null default 'unpaid'::character varying,
   159	  payment_method character varying(20) null,
   160	  notes text null,
   161	  created_by uuid null,
   162	  created_at timestamp with time zone null default now(),
   163	  updated_at timestamp with time zone null default now(),
   164	  so_number character varying(50) null,
   165	  due_date date null,
   166	  vat_amount numeric(15, 2) null default 0,
   167	  vat_percentage numeric(5, 2) null default 11.0,
   168	  is_vat_included boolean null default true,
   169	  constraint purchases_pkey primary key (id),
   170	  constraint purchases_created_by_fkey foreign KEY (created_by) references users (id),
   171	  constraint purchases_supplier_id_fkey foreign KEY (supplier_id) references suppliers (id)
   172	) TABLESPACE pg_default;
   173	
   174	create trigger set_updated_at BEFORE
   175	update on purchases for EACH row
   176	execute FUNCTION update_updated_at_column ();
   177	
   178	==============================================================
   179	SQL Definition of sale_items
   180	
   181	create table public.sale_items (
   182	  id uuid not null default extensions.uuid_generate_v4 (),
   183	  sale_id uuid null,
   184	  item_id uuid null,
   185	  quantity integer not null,
   186	  price numeric(15, 2) not null,
   187	  subtotal numeric(15, 2) not null,
   188	  created_at timestamp with time zone null default now(),
   189	  updated_at timestamp with time zone null default now(),
   190	  constraint sale_items_pkey primary key (id),
   191	  constraint sale_items_medicine_id_fkey foreign KEY (item_id) references items (id),
   192	  constraint sale_items_sale_id_fkey foreign KEY (sale_id) references sales (id) on delete CASCADE
   193	) TABLESPACE pg_default;
   194	
   195	create trigger set_updated_at BEFORE
   196	update on sale_items for EACH row
   197	execute FUNCTION update_updated_at_column ();
   198	
   199	==============================================================
   200	SQL Definition of sales
   201	
   202	create table public.sales (
   203	  id uuid not null default extensions.uuid_generate_v4 (),
   204	  patient_id uuid null,
   205	  doctor_id uuid null,
   206	  invoice_number character varying(50) null,
   207	  date date not null,
   208	  total numeric(15, 2) not null default 0,
   209	  payment_method character varying(20) null default 'cash'::character varying,
   210	  created_by uuid null,
   211	  created_at timestamp with time zone null default now(),
   212	  updated_at timestamp with time zone null default now(),
   213	  constraint sales_pkey primary key (id),
   214	  constraint sales_created_by_fkey foreign KEY (created_by) references users (id),
   215	  constraint sales_doctor_id_fkey foreign KEY (doctor_id) references doctors (id),
   216	  constraint sales_patient_id_fkey foreign KEY (patient_id) references patients (id)
   217	) TABLESPACE pg_default;
   218	
   219	create trigger set_updated_at BEFORE
   220	update on sales for EACH row
   221	execute FUNCTION update_updated_at_column ();
   222	
   223	==============================================================
   224	SQL Definition of suppliers
   225	
   226	create table public.suppliers (
   227	  id uuid not null default extensions.uuid_generate_v4 (),
   228	  name character varying(100) not null,
   229	  address text null,
   230	  phone character varying(20) null,
   231	  email character varying(100) null,
   232	  contact_person character varying(100) null,
   233	  created_at timestamp with time zone null default now(),
   234	  updated_at timestamp with time zone null default now(),
   235	  constraint suppliers_pkey primary key (id)
   236	) TABLESPACE pg_default;
   237	
   238	create trigger set_updated_at BEFORE
   239	update on suppliers for EACH row
   240	execute FUNCTION update_updated_at_column ();
   241	
   242	==============================================================
   243	SQL Definition of unit_conversions
   244	
   245	create table public.unit_conversions (
   246	  id uuid not null default gen_random_uuid (),
   247	  item_id uuid null,
   248	  unit_name text not null,
   249	  conversion_rate numeric not null,
   250	  base_price numeric null default 0,
   251	  created_at timestamp with time zone null default now(),
   252	  constraint unit_conversions_pkey primary key (id),
   253	  constraint unit_conversions_item_id_unit_name_key unique (item_id, unit_name),
   254	  constraint unit_conversions_item_id_fkey foreign KEY (item_id) references items (id) on delete CASCADE
   255	) TABLESPACE pg_default;
   256	
   257	create trigger after_unit_conversion_delete
   258	after DELETE on unit_conversions for EACH row
   259	execute FUNCTION sync_unit_conversions_to_items ();
   260	
   261	create trigger after_unit_conversion_insert
   262	after INSERT on unit_conversions for EACH row
   263	execute FUNCTION sync_unit_conversions_to_items ();
   264	
   265	create trigger after_unit_conversion_update
   266	after
   267	update on unit_conversions for EACH row
   268	execute FUNCTION sync_unit_conversions_to_items ();
   269	
   270	==============================================================
   271	SQL Definition of users
   272	
   273	create table public.users (
   274	  id uuid not null,
   275	  name character varying(100) not null,
   276	  email character varying(100) not null,
   277	  role character varying(20) not null default 'staff'::character varying,
   278	  created_at timestamp with time zone null default now(),
   279	  updated_at timestamp with time zone null default now(),
   280	  constraint users_pkey primary key (id),
   281	  constraint users_email_key unique (email),
   282	  constraint users_id_fkey foreign KEY (id) references auth.users (id)
   283	) TABLESPACE pg_default;
   284	
   285	create trigger set_updated_at BEFORE
   286	update on users for EACH row
   287	execute FUNCTION update_updated_at_column ();


===============================================
= File: ./supabase_data/item_types.json 
===============================================

     1	[
     2	  {
     3	    "id": "ccc6e9a8-9f61-43bc-b1a8-a64ad1c8aebd",
     4	    "name": "Obat Bebas",
     5	    "description": "Obat yang dapat dibeli tanpa resep dokter, ditandai dengan lingkaran hijau dengan garis tepi hitam",
     6	    "created_at": "2025-03-30T08:29:38.937463+00:00",
     7	    "updated_at": "2025-03-30T08:29:38.937463+00:00"
     8	  },
     9	  {
    10	    "id": "210574b1-5f18-40dc-a041-3cf33b8f3307",
    11	    "name": "Obat Bebas Terbatas",
    12	    "description": "Obat yang dapat dibeli tanpa resep dokter, namun memiliki peringatan khusus",
    13	    "created_at": "2025-03-30T08:29:38.937463+00:00",
    14	    "updated_at": "2025-03-30T08:29:38.937463+00:00"
    15	  },
    16	  {
    17	    "id": "6ecd610a-4a35-448c-8eda-662f1c10fa51",
    18	    "name": "Obat Keras",
    19	    "description": "Obat yang hanya dapat dibeli dengan resep dokter, ditandai dengan lingkaran merah dengan garis tepi hitam dan huruf K di tengah",
    20	    "created_at": "2025-03-30T08:29:38.937463+00:00",
    21	    "updated_at": "2025-03-30T08:29:38.937463+00:00"
    22	  },
    23	  {
    24	    "id": "1c2068a7-a66c-4a91-820e-354588330ada",
    25	    "name": "Obat Golongan Narkotika",
    26	    "description": "Obat yang termasuk dalam golongan narkotika dan diatur ketat",
    27	    "created_at": "2025-03-30T08:29:38.937463+00:00",
    28	    "updated_at": "2025-03-30T08:29:38.937463+00:00"
    29	  },
    30	  {
    31	    "id": "1725d012-3f32-4c70-8856-aeeb6b74ea82",
    32	    "name": "Obat Fitofarmaka",
    33	    "description": "Obat yang berasal dari bahan alam yang telah dibuktikan keamanan dan khasiatnya melalui uji klinis",
    34	    "created_at": "2025-03-30T08:29:38.937463+00:00",
    35	    "updated_at": "2025-03-30T08:29:38.937463+00:00"
    36	  },
    37	  {
    38	    "id": "e09561d2-cc62-4a94-a132-4e17d6a02fa2",
    39	    "name": "Obat Herbal Terstandar",
    40	    "description": "Obat tradisional yang telah dibuktikan keamanan dan khasiatnya melalui uji pra-klinis",
    41	    "created_at": "2025-03-30T08:29:38.937463+00:00",
    42	    "updated_at": "2025-03-30T08:29:38.937463+00:00"
    43	  }
    44	]


===============================================
= File: ./supabase_data/patients.json 
===============================================

     1	[]


===============================================
= File: ./supabase_data/users.json 
===============================================

     1	[]


===============================================
= File: ./supabase_data/item_units.json 
===============================================

     1	[
     2	  {
     3	    "id": "28dbe949-54a2-4198-baba-ed162a041cbe",
     4	    "name": "Botol",
     5	    "created_at": "2025-03-26T14:57:20.368076+00:00",
     6	    "updated_at": "2025-03-26T14:57:20.368076+00:00",
     7	    "description": null
     8	  },
     9	  {
    10	    "id": "6727b61b-8063-422d-a89a-16b378d5d76d",
    11	    "name": "Tube",
    12	    "created_at": "2025-03-26T14:57:20.368076+00:00",
    13	    "updated_at": "2025-03-26T14:57:20.368076+00:00",
    14	    "description": null
    15	  },
    16	  {
    17	    "id": "d7ec80ef-00b0-4b57-8086-d6ad803a68cc",
    18	    "name": "Strip",
    19	    "created_at": "2025-03-26T14:57:20.368076+00:00",
    20	    "updated_at": "2025-03-26T14:57:20.368076+00:00",
    21	    "description": null
    22	  },
    23	  {
    24	    "id": "05990da0-faa0-4f5e-92e9-bc1f2ef4defc",
    25	    "name": "Kapsul",
    26	    "created_at": "2025-03-26T14:57:20.368076+00:00",
    27	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
    28	    "description": "Sediaan padat dengan cangkang keras atau lunak"
    29	  },
    30	  {
    31	    "id": "b822686b-f7ec-46d1-8b40-fb69d8bea2f7",
    32	    "name": "Sirup",
    33	    "created_at": "2025-03-30T08:29:38.937463+00:00",
    34	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
    35	    "description": "Sediaan cair dengan kandungan gula atau pemanis"
    36	  },
    37	  {
    38	    "id": "f19ecad4-fec8-4ba9-b987-8f7bfe7f13b8",
    39	    "name": "Suspensi",
    40	    "created_at": "2025-03-30T08:29:38.937463+00:00",
    41	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
    42	    "description": "Sediaan cair dengan partikel padat yang tersuspensi"
    43	  },
    44	  {
    45	    "id": "aebc351d-0608-4643-ac0a-517bfd73aa7a",
    46	    "name": "Emulsi",
    47	    "created_at": "2025-03-30T08:29:38.937463+00:00",
    48	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
    49	    "description": "Sediaan cair yang terdiri dari dua cairan yang tidak saling bercampur"
    50	  },
    51	  {
    52	    "id": "9d764020-ae97-43c4-ae7e-ae66cb91ff17",
    53	    "name": "Serbuk",
    54	    "created_at": "2025-03-30T08:29:38.937463+00:00",
    55	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
    56	    "description": "Sediaan kering dalam bentuk bubuk"
    57	  },
    58	  {
    59	    "id": "23fd2eb0-16bb-47bb-832e-e201f4c77a57",
    60	    "name": "Salep",
    61	    "created_at": "2025-03-30T08:29:38.937463+00:00",
    62	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
    63	    "description": "Sediaan semi-padat untuk penggunaan luar"
    64	  },
    65	  {
    66	    "id": "bf752bfc-7a5f-4c0f-8f59-65b8c74e7f92",
    67	    "name": "Krim",
    68	    "created_at": "2025-03-30T08:29:38.937463+00:00",
    69	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
    70	    "description": "Sediaan semi-padat untuk penggunaan luar"
    71	  },
    72	  {
    73	    "id": "827d5b4f-a057-443f-bf40-8f50bc336857",
    74	    "name": "Gel",
    75	    "created_at": "2025-03-30T08:29:38.937463+00:00",
    76	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
    77	    "description": "Sediaan semi-padat transparan atau translusen"
    78	  },
    79	  {
    80	    "id": "abc71b3d-55c9-49e8-8730-bb5071d5c835",
    81	    "name": "Suppositoria",
    82	    "created_at": "2025-03-30T08:29:38.937463+00:00",
    83	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
    84	    "description": "Sediaan padat untuk penggunaan rektal"
    85	  },
    86	  {
    87	    "id": "c10825a4-90db-48d5-92f7-e8252e5a28b0",
    88	    "name": "Tetes",
    89	    "created_at": "2025-03-30T08:29:38.937463+00:00",
    90	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
    91	    "description": "Sediaan cair dosis kecil"
    92	  },
    93	  {
    94	    "id": "1713eeb1-8ca9-4302-be6a-1e9ccde39cf1",
    95	    "name": "Ampul",
    96	    "created_at": "2025-03-26T14:57:20.368076+00:00",
    97	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
    98	    "description": "Sediaan steril dalam wadah kaca tertutup"
    99	  },
   100	  {
   101	    "id": "762913e6-f1e0-4765-a685-122015dc8eaa",
   102	    "name": "Vial",
   103	    "created_at": "2025-03-30T08:29:38.937463+00:00",
   104	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
   105	    "description": "Wadah kaca dengan tutup karet untuk sediaan injeksi"
   106	  },
   107	  {
   108	    "id": "7a50f346-7587-4ad7-9494-3b871e8be246",
   109	    "name": "Inhaler",
   110	    "created_at": "2025-03-30T08:29:38.937463+00:00",
   111	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
   112	    "description": "Alat untuk menghirup obat dalam bentuk aerosol"
   113	  },
   114	  {
   115	    "id": "71a78582-1700-4fd8-bc21-6045ca671c56",
   116	    "name": "Patch",
   117	    "created_at": "2025-03-30T08:29:38.937463+00:00",
   118	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
   119	    "description": "Sediaan yang ditempelkan ke kulit"
   120	  },
   121	  {
   122	    "id": "cc8e891c-34ac-4afb-944c-258ad244a96f",
   123	    "name": "Tablet",
   124	    "created_at": "2025-03-26T14:57:20.368076+00:00",
   125	    "updated_at": "2025-03-30T08:33:30.804321+00:00",
   126	    "description": "Sediaan padat berbentuk bulat, oval, atau persegi"
   127	  },
   128	  {
   129	    "id": "243e80e0-917b-4549-b78c-3c1d27e4ccc4",
   130	    "name": "Kaplet",
   131	    "created_at": "2025-03-30T08:29:38.937463+00:00",
   132	    "updated_at": "2025-03-30T08:34:44.259782+00:00",
   133	    "description": "Tablet yang dibungkus dengan lapisan gula dan berwarna yang berguna dalam menjaga kelembapan serta kontaminasi ketika di lambung."
   134	  }
   135	]


===============================================
= File: ./supabase_data/purchases.json 
===============================================

     1	[]


===============================================
= File: ./supabase_data/items.json 
===============================================

     1	[
     2	  {
     3	    "id": "68ed5202-4ef0-4a3b-ae2f-e3f17dd76671",
     4	    "name": "ioiiooioi",
     5	    "sell_price": 0,
     6	    "stock": 0,
     7	    "min_stock": 10,
     8	    "description": null,
     9	    "created_at": "2025-03-31T12:28:37.963061+00:00",
    10	    "updated_at": "2025-04-02T01:17:37.362594+00:00",
    11	    "is_active": true,
    12	    "code": "TSAB01",
    13	    "rack": null,
    14	    "has_expiry_date": true,
    15	    "is_medicine": true,
    16	    "category_id": "0d1d6848-96b5-448e-a136-3aba8a9bbbca",
    17	    "type_id": "210574b1-5f18-40dc-a041-3cf33b8f3307",
    18	    "unit_id": "d7ec80ef-00b0-4b57-8086-d6ad803a68cc",
    19	    "base_unit": "Strip",
    20	    "base_price": 50000,
    21	    "unit_conversions": [
    22	      {
    23	        "id": "6b514e67-ddfc-4b20-9a0b-00eefa1ac081",
    24	        "unit_name": "Tablet",
    25	        "base_price": 5000,
    26	        "created_at": "2025-03-31T12:28:38.07+00:00",
    27	        "conversion_rate": 10
    28	      }
    29	    ]
    30	  }
    31	]


===============================================
= File: ./supabase_data/unit_conversions.json 
===============================================

     1	[
     2	  {
     3	    "id": "6b514e67-ddfc-4b20-9a0b-00eefa1ac081",
     4	    "item_id": "68ed5202-4ef0-4a3b-ae2f-e3f17dd76671",
     5	    "unit_name": "Tablet",
     6	    "conversion_rate": 10,
     7	    "base_price": 5000,
     8	    "created_at": "2025-03-31T12:28:38.07+00:00"
     9	  }
    10	]


===============================================
= File: ./supabase_data/sales.json 
===============================================

     1	[]


===============================================
= File: ./supabase_data/suppliers.json 
===============================================

     1	[
     2	  {
     3	    "id": "e822fee9-035b-4d93-8bf0-d4fb51c18002",
     4	    "name": "PT. Teknologi Medika Pratama",
     5	    "address": "Komplek Pergudangan Kubik Logistics, Gudang E1 E2 E7, JI. Tugu Raya, RT.10/RW.10, Kel Tugu, Kec. Cimanggis, Kota Depok, Jawa Barat Indonesia",
     6	    "phone": null,
     7	    "email": null,
     8	    "contact_person": "apt. Nur Ramadhani, S. Farm.",
     9	    "created_at": "2025-03-31T15:29:52.123716+00:00",
    10	    "updated_at": "2025-03-31T15:29:52.123716+00:00"
    11	  }
    12	]


===============================================
= File: ./supabase_data/database_export.txt 
===============================================

     1	=== DATA TABEL: doctors ===
     2	[]
     3	
     4	
     5	
     6	=== DATA TABEL: item_categories ===
     7	[
     8	  {
     9	    "id": "0d1d6848-96b5-448e-a136-3aba8a9bbbca",
    10	    "name": "Antibiotik",
    11	    "description": "Obat untuk membunuh atau menghambat pertumbuhan bakteri",
    12	    "created_at": "2025-03-26T14:57:20.368076+00:00",
    13	    "updated_at": "2025-03-26T14:57:20.368076+00:00"
    14	  },
    15	  {
    16	    "id": "a21f33c1-42aa-4171-a826-59a7e00c315d",
    17	    "name": "Antipiretik",
    18	    "description": "Obat untuk menurunkan demam",
    19	    "created_at": "2025-03-26T14:57:20.368076+00:00",
    20	    "updated_at": "2025-03-26T14:57:20.368076+00:00"
    21	  },
    22	  {
    23	    "id": "502e0a0c-9a29-4003-b309-979b659b30db",
    24	    "name": "Analgesik",
    25	    "description": "Obat pereda nyeri",
    26	    "created_at": "2025-03-26T14:57:20.368076+00:00",
    27	    "updated_at": "2025-03-26T14:57:20.368076+00:00"
    28	  },
    29	  {
    30	    "id": "26e20a27-a34e-424e-9a85-babc2abdc955",
    31	    "name": "Antidiabetes",
    32	    "description": "Obat untuk mengontrol gula darah",
    33	    "created_at": "2025-03-26T14:57:20.368076+00:00",
    34	    "updated_at": "2025-03-26T14:57:20.368076+00:00"
    35	  },
    36	  {
    37	    "id": "c0264ffd-cdd0-4c8f-b5c3-36d040005f5a",
    38	    "name": "Antihipertensi",
    39	    "description": "Obat untuk menurunkan tekanan darah",
    40	    "created_at": "2025-03-26T14:57:20.368076+00:00",
    41	    "updated_at": "2025-03-26T14:57:20.368076+00:00"
    42	  }
    43	]
    44	
    45	
    46	
    47	=== DATA TABEL: item_types ===
    48	[
    49	  {
    50	    "id": "ccc6e9a8-9f61-43bc-b1a8-a64ad1c8aebd",
    51	    "name": "Obat Bebas",
    52	    "description": "Obat yang dapat dibeli tanpa resep dokter, ditandai dengan lingkaran hijau dengan garis tepi hitam",
    53	    "created_at": "2025-03-30T08:29:38.937463+00:00",
    54	    "updated_at": "2025-03-30T08:29:38.937463+00:00"
    55	  },
    56	  {
    57	    "id": "210574b1-5f18-40dc-a041-3cf33b8f3307",
    58	    "name": "Obat Bebas Terbatas",
    59	    "description": "Obat yang dapat dibeli tanpa resep dokter, namun memiliki peringatan khusus",
    60	    "created_at": "2025-03-30T08:29:38.937463+00:00",
    61	    "updated_at": "2025-03-30T08:29:38.937463+00:00"
    62	  },
    63	  {
    64	    "id": "6ecd610a-4a35-448c-8eda-662f1c10fa51",
    65	    "name": "Obat Keras",
    66	    "description": "Obat yang hanya dapat dibeli dengan resep dokter, ditandai dengan lingkaran merah dengan garis tepi hitam dan huruf K di tengah",
    67	    "created_at": "2025-03-30T08:29:38.937463+00:00",
    68	    "updated_at": "2025-03-30T08:29:38.937463+00:00"
    69	  },
    70	  {
    71	    "id": "1c2068a7-a66c-4a91-820e-354588330ada",
    72	    "name": "Obat Golongan Narkotika",
    73	    "description": "Obat yang termasuk dalam golongan narkotika dan diatur ketat",
    74	    "created_at": "2025-03-30T08:29:38.937463+00:00",
    75	    "updated_at": "2025-03-30T08:29:38.937463+00:00"
    76	  },
    77	  {
    78	    "id": "1725d012-3f32-4c70-8856-aeeb6b74ea82",
    79	    "name": "Obat Fitofarmaka",
    80	    "description": "Obat yang berasal dari bahan alam yang telah dibuktikan keamanan dan khasiatnya melalui uji klinis",
    81	    "created_at": "2025-03-30T08:29:38.937463+00:00",
    82	    "updated_at": "2025-03-30T08:29:38.937463+00:00"
    83	  },
    84	  {
    85	    "id": "e09561d2-cc62-4a94-a132-4e17d6a02fa2",
    86	    "name": "Obat Herbal Terstandar",
    87	    "description": "Obat tradisional yang telah dibuktikan keamanan dan khasiatnya melalui uji pra-klinis",
    88	    "created_at": "2025-03-30T08:29:38.937463+00:00",
    89	    "updated_at": "2025-03-30T08:29:38.937463+00:00"
    90	  }
    91	]
    92	
    93	
    94	
    95	=== DATA TABEL: item_units ===
    96	[
    97	  {
    98	    "id": "28dbe949-54a2-4198-baba-ed162a041cbe",
    99	    "name": "Botol",
   100	    "created_at": "2025-03-26T14:57:20.368076+00:00",
   101	    "updated_at": "2025-03-26T14:57:20.368076+00:00",
   102	    "description": null
   103	  },
   104	  {
   105	    "id": "6727b61b-8063-422d-a89a-16b378d5d76d",
   106	    "name": "Tube",
   107	    "created_at": "2025-03-26T14:57:20.368076+00:00",
   108	    "updated_at": "2025-03-26T14:57:20.368076+00:00",
   109	    "description": null
   110	  },
   111	  {
   112	    "id": "d7ec80ef-00b0-4b57-8086-d6ad803a68cc",
   113	    "name": "Strip",
   114	    "created_at": "2025-03-26T14:57:20.368076+00:00",
   115	    "updated_at": "2025-03-26T14:57:20.368076+00:00",
   116	    "description": null
   117	  },
   118	  {
   119	    "id": "05990da0-faa0-4f5e-92e9-bc1f2ef4defc",
   120	    "name": "Kapsul",
   121	    "created_at": "2025-03-26T14:57:20.368076+00:00",
   122	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
   123	    "description": "Sediaan padat dengan cangkang keras atau lunak"
   124	  },
   125	  {
   126	    "id": "b822686b-f7ec-46d1-8b40-fb69d8bea2f7",
   127	    "name": "Sirup",
   128	    "created_at": "2025-03-30T08:29:38.937463+00:00",
   129	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
   130	    "description": "Sediaan cair dengan kandungan gula atau pemanis"
   131	  },
   132	  {
   133	    "id": "f19ecad4-fec8-4ba9-b987-8f7bfe7f13b8",
   134	    "name": "Suspensi",
   135	    "created_at": "2025-03-30T08:29:38.937463+00:00",
   136	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
   137	    "description": "Sediaan cair dengan partikel padat yang tersuspensi"
   138	  },
   139	  {
   140	    "id": "aebc351d-0608-4643-ac0a-517bfd73aa7a",
   141	    "name": "Emulsi",
   142	    "created_at": "2025-03-30T08:29:38.937463+00:00",
   143	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
   144	    "description": "Sediaan cair yang terdiri dari dua cairan yang tidak saling bercampur"
   145	  },
   146	  {
   147	    "id": "9d764020-ae97-43c4-ae7e-ae66cb91ff17",
   148	    "name": "Serbuk",
   149	    "created_at": "2025-03-30T08:29:38.937463+00:00",
   150	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
   151	    "description": "Sediaan kering dalam bentuk bubuk"
   152	  },
   153	  {
   154	    "id": "23fd2eb0-16bb-47bb-832e-e201f4c77a57",
   155	    "name": "Salep",
   156	    "created_at": "2025-03-30T08:29:38.937463+00:00",
   157	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
   158	    "description": "Sediaan semi-padat untuk penggunaan luar"
   159	  },
   160	  {
   161	    "id": "bf752bfc-7a5f-4c0f-8f59-65b8c74e7f92",
   162	    "name": "Krim",
   163	    "created_at": "2025-03-30T08:29:38.937463+00:00",
   164	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
   165	    "description": "Sediaan semi-padat untuk penggunaan luar"
   166	  },
   167	  {
   168	    "id": "827d5b4f-a057-443f-bf40-8f50bc336857",
   169	    "name": "Gel",
   170	    "created_at": "2025-03-30T08:29:38.937463+00:00",
   171	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
   172	    "description": "Sediaan semi-padat transparan atau translusen"
   173	  },
   174	  {
   175	    "id": "abc71b3d-55c9-49e8-8730-bb5071d5c835",
   176	    "name": "Suppositoria",
   177	    "created_at": "2025-03-30T08:29:38.937463+00:00",
   178	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
   179	    "description": "Sediaan padat untuk penggunaan rektal"
   180	  },
   181	  {
   182	    "id": "c10825a4-90db-48d5-92f7-e8252e5a28b0",
   183	    "name": "Tetes",
   184	    "created_at": "2025-03-30T08:29:38.937463+00:00",
   185	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
   186	    "description": "Sediaan cair dosis kecil"
   187	  },
   188	  {
   189	    "id": "1713eeb1-8ca9-4302-be6a-1e9ccde39cf1",
   190	    "name": "Ampul",
   191	    "created_at": "2025-03-26T14:57:20.368076+00:00",
   192	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
   193	    "description": "Sediaan steril dalam wadah kaca tertutup"
   194	  },
   195	  {
   196	    "id": "762913e6-f1e0-4765-a685-122015dc8eaa",
   197	    "name": "Vial",
   198	    "created_at": "2025-03-30T08:29:38.937463+00:00",
   199	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
   200	    "description": "Wadah kaca dengan tutup karet untuk sediaan injeksi"
   201	  },
   202	  {
   203	    "id": "7a50f346-7587-4ad7-9494-3b871e8be246",
   204	    "name": "Inhaler",
   205	    "created_at": "2025-03-30T08:29:38.937463+00:00",
   206	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
   207	    "description": "Alat untuk menghirup obat dalam bentuk aerosol"
   208	  },
   209	  {
   210	    "id": "71a78582-1700-4fd8-bc21-6045ca671c56",
   211	    "name": "Patch",
   212	    "created_at": "2025-03-30T08:29:38.937463+00:00",
   213	    "updated_at": "2025-03-30T08:31:02.468123+00:00",
   214	    "description": "Sediaan yang ditempelkan ke kulit"
   215	  },
   216	  {
   217	    "id": "cc8e891c-34ac-4afb-944c-258ad244a96f",
   218	    "name": "Tablet",
   219	    "created_at": "2025-03-26T14:57:20.368076+00:00",
   220	    "updated_at": "2025-03-30T08:33:30.804321+00:00",
   221	    "description": "Sediaan padat berbentuk bulat, oval, atau persegi"
   222	  },
   223	  {
   224	    "id": "243e80e0-917b-4549-b78c-3c1d27e4ccc4",
   225	    "name": "Kaplet",
   226	    "created_at": "2025-03-30T08:29:38.937463+00:00",
   227	    "updated_at": "2025-03-30T08:34:44.259782+00:00",
   228	    "description": "Tablet yang dibungkus dengan lapisan gula dan berwarna yang berguna dalam menjaga kelembapan serta kontaminasi ketika di lambung."
   229	  }
   230	]
   231	
   232	
   233	
   234	=== DATA TABEL: items ===
   235	[
   236	  {
   237	    "id": "68ed5202-4ef0-4a3b-ae2f-e3f17dd76671",
   238	    "name": "ioiiooioi",
   239	    "sell_price": 0,
   240	    "stock": 0,
   241	    "min_stock": 10,
   242	    "description": null,
   243	    "created_at": "2025-03-31T12:28:37.963061+00:00",
   244	    "updated_at": "2025-04-02T01:17:37.362594+00:00",
   245	    "is_active": true,
   246	    "code": "TSAB01",
   247	    "rack": null,
   248	    "has_expiry_date": true,
   249	    "is_medicine": true,
   250	    "category_id": "0d1d6848-96b5-448e-a136-3aba8a9bbbca",
   251	    "type_id": "210574b1-5f18-40dc-a041-3cf33b8f3307",
   252	    "unit_id": "d7ec80ef-00b0-4b57-8086-d6ad803a68cc",
   253	    "base_unit": "Strip",
   254	    "base_price": 50000,
   255	    "unit_conversions": [
   256	      {
   257	        "id": "6b514e67-ddfc-4b20-9a0b-00eefa1ac081",
   258	        "unit_name": "Tablet",
   259	        "base_price": 5000,
   260	        "created_at": "2025-03-31T12:28:38.07+00:00",
   261	        "conversion_rate": 10
   262	      }
   263	    ]
   264	  }
   265	]
   266	
   267	
   268	
   269	=== DATA TABEL: patients ===
   270	[]
   271	
   272	
   273	
   274	=== DATA TABEL: purchase_items ===
   275	[]
   276	
   277	
   278	
   279	=== DATA TABEL: purchases ===
   280	[]
   281	
   282	
   283	
   284	=== DATA TABEL: sale_items ===
   285	[]
   286	
   287	
   288	
   289	=== DATA TABEL: sales ===
   290	[]
   291	
   292	
   293	
   294	=== DATA TABEL: suppliers ===
   295	[
   296	  {
   297	    "id": "e822fee9-035b-4d93-8bf0-d4fb51c18002",
   298	    "name": "PT. Teknologi Medika Pratama",
   299	    "address": "Komplek Pergudangan Kubik Logistics, Gudang E1 E2 E7, JI. Tugu Raya, RT.10/RW.10, Kel Tugu, Kec. Cimanggis, Kota Depok, Jawa Barat Indonesia",
   300	    "phone": null,
   301	    "email": null,
   302	    "contact_person": "apt. Nur Ramadhani, S. Farm.",
   303	    "created_at": "2025-03-31T15:29:52.123716+00:00",
   304	    "updated_at": "2025-03-31T15:29:52.123716+00:00"
   305	  }
   306	]
   307	
   308	
   309	
   310	=== DATA TABEL: unit_conversions ===
   311	[
   312	  {
   313	    "id": "6b514e67-ddfc-4b20-9a0b-00eefa1ac081",
   314	    "item_id": "68ed5202-4ef0-4a3b-ae2f-e3f17dd76671",
   315	    "unit_name": "Tablet",
   316	    "conversion_rate": 10,
   317	    "base_price": 5000,
   318	    "created_at": "2025-03-31T12:28:38.07+00:00"
   319	  }
   320	]
   321	
   322	
   323	
   324	=== DATA TABEL: users ===
   325	[]
   326	
   327	
   328	


===============================================
= File: ./supabase_data/doctors.json 
===============================================

     1	[]


===============================================
= File: ./supabase_data/sale_items.json 
===============================================

     1	[]


===============================================
= File: ./supabase_data/purchase_items.json 
===============================================

     1	[]


===============================================
= File: ./supabase_data/item_categories.json 
===============================================

     1	[
     2	  {
     3	    "id": "0d1d6848-96b5-448e-a136-3aba8a9bbbca",
     4	    "name": "Antibiotik",
     5	    "description": "Obat untuk membunuh atau menghambat pertumbuhan bakteri",
     6	    "created_at": "2025-03-26T14:57:20.368076+00:00",
     7	    "updated_at": "2025-03-26T14:57:20.368076+00:00"
     8	  },
     9	  {
    10	    "id": "a21f33c1-42aa-4171-a826-59a7e00c315d",
    11	    "name": "Antipiretik",
    12	    "description": "Obat untuk menurunkan demam",
    13	    "created_at": "2025-03-26T14:57:20.368076+00:00",
    14	    "updated_at": "2025-03-26T14:57:20.368076+00:00"
    15	  },
    16	  {
    17	    "id": "502e0a0c-9a29-4003-b309-979b659b30db",
    18	    "name": "Analgesik",
    19	    "description": "Obat pereda nyeri",
    20	    "created_at": "2025-03-26T14:57:20.368076+00:00",
    21	    "updated_at": "2025-03-26T14:57:20.368076+00:00"
    22	  },
    23	  {
    24	    "id": "26e20a27-a34e-424e-9a85-babc2abdc955",
    25	    "name": "Antidiabetes",
    26	    "description": "Obat untuk mengontrol gula darah",
    27	    "created_at": "2025-03-26T14:57:20.368076+00:00",
    28	    "updated_at": "2025-03-26T14:57:20.368076+00:00"
    29	  },
    30	  {
    31	    "id": "c0264ffd-cdd0-4c8f-b5c3-36d040005f5a",
    32	    "name": "Antihipertensi",
    33	    "description": "Obat untuk menurunkan tekanan darah",
    34	    "created_at": "2025-03-26T14:57:20.368076+00:00",
    35	    "updated_at": "2025-03-26T14:57:20.368076+00:00"
    36	  }
    37	]
