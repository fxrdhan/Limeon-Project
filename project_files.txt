.
├── .env
├── eslint.config.js
├── get-all
├── get-database
├── .gitignore
├── image.png
├── index.html
├── package.json
├── project_files.txt
├── public
├── README.md
├── src
│   ├── App.css
│   ├── App.tsx
│   ├── assets
│   ├── components
│   │   ├── layout
│   │   │   ├── MainLayout.tsx
│   │   │   ├── Navbar.tsx
│   │   │   └── Sidebar.tsx
│   │   ├── purchases
│   │   │   ├── InvoiceLayout.tsx
│   │   │   ├── ItemSearchBar.tsx
│   │   │   ├── PurchaseInfoForm.tsx
│   │   │   └── PurchaseItemsTable.tsx
│   │   ├── tools
│   │   │   └── UnitConversionManager.tsx
│   │   └── ui
│   │       ├── AddItemCard.tsx
│   │       ├── Badge.tsx
│   │       ├── Button.tsx
│   │       ├── Card.tsx
│   │       ├── ConfirmDialog.tsx
│   │       ├── DetailEditModal.tsx
│   │       ├── FormActions.tsx
│   │       ├── FormComponents.tsx
│   │       ├── ImageCard.tsx
│   │       ├── Input.tsx
│   │       ├── Loading.tsx
│   │       ├── Pagination.tsx
│   │       └── Table.tsx
│   ├── hooks
│   │   ├── useAddItemForm.ts
│   │   ├── useItemSelection.ts
│   │   ├── usePurchaseForm.ts
│   │   └── useUnitConversion.ts
│   ├── index.css
│   ├── lib
│   │   ├── classNames.ts
│   │   ├── formatters.ts
│   │   ├── queryUtils.ts
│   │   └── supabase.ts
│   ├── main.tsx
│   ├── output.css
│   ├── pages
│   │   ├── auth
│   │   │   └── Login.tsx
│   │   ├── dashboard
│   │   │   └── Dashboard.tsx
│   │   ├── master-data
│   │   │   ├── AddItem.tsx
│   │   │   ├── CategoryList.tsx
│   │   │   ├── ItemList.tsx
│   │   │   ├── SupplierList.tsx
│   │   │   ├── TypeList.tsx
│   │   │   └── UnitList.tsx
│   │   ├── purchases
│   │   │   ├── CreatePurchase.tsx
│   │   │   ├── PrintPurchase.tsx
│   │   │   ├── PurchaseList.tsx
│   │   │   ├── UploadInvoice.tsx
│   │   │   └── ViewPurchase.tsx
│   │   ├── sales
│   │   │   └── CreateSale.tsx
│   │   └── settings
│   │       └── Profile.tsx
│   ├── services
│   │   └── invoiceService.ts
│   ├── store
│   │   └── authStore.ts
│   └── vite-env.d.ts
├── supabase_data
│   ├── company_profiles.json
│   ├── database_export
│   ├── database_export.json
│   ├── database_funcions
│   ├── database_triggers
│   ├── definitions
│   ├── doctors.json
│   ├── e_invoice_items.json
│   ├── e_invoices.json
│   ├── item_categories.json
│   ├── items.json
│   ├── item_types.json
│   ├── item_units.json
│   ├── patients.json
│   ├── purchase_items.json
│   ├── purchases.json
│   ├── sale_items.json
│   ├── sales.json
│   ├── suppliers.json
│   ├── unit_conversions.json
│   └── users.json
├── tailwind.config.js
├── test.js
├── tsconfig.app.json
├── tsconfig.json
├── tsconfig.node.json
├── vite.config.ts
└── yarn.lock

21 directories, 90 files


===============================================
= File: ./.env 
===============================================

     1	VITE_SUPABASE_URL=https://psqmckbtwqphcteymjil.supabase.co
     2	VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBzcW1ja2J0d3FwaGN0ZXltamlsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIxOTQ2MjAsImV4cCI6MjA1Nzc3MDYyMH0.wvxpldpaoanDk9Wd7wDUeeCuMSVw9e0pxE7_BMt823s


===============================================
= File: ./eslint.config.js 
===============================================

     1	import js from '@eslint/js'
     2	import globals from 'globals'
     3	import reactHooks from 'eslint-plugin-react-hooks'
     4	import reactRefresh from 'eslint-plugin-react-refresh'
     5	import tseslint from 'typescript-eslint'
     6	
     7	export default tseslint.config(
     8	  { ignores: ['dist'] },
     9	  {
    10	    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    11	    files: ['**/*.{ts,tsx}'],
    12	    languageOptions: {
    13	      ecmaVersion: 2020,
    14	      globals: globals.browser,
    15	    },
    16	    plugins: {
    17	      'react-hooks': reactHooks,
    18	      'react-refresh': reactRefresh,
    19	    },
    20	    rules: {
    21	      ...reactHooks.configs.recommended.rules,
    22	      'react-refresh/only-export-components': [
    23	        'warn',
    24	        { allowConstantExport: true },
    25	      ],
    26	    },
    27	  },
    28	)


===============================================
= File: ./get-all 
===============================================

     1	#!/bin/bash
     2	
     3	# Fungsi untuk menampilkan pesan verbose
     4	verbose() {
     5	    echo "[INFO] $1"
     6	}
     7	
     8	# Nama file output dan pengaturan
     9	OUTPUT_FILE="project_files.txt"
    10	EXCLUDE_DIRS="node_modules|.git"
    11	EXCLUDE_FILES=("./src/output.css" "./yarn.lock" "./image.png")
    12	verbose "Output ke: $OUTPUT_FILE"
    13	verbose "Mengecualikan direktori: $EXCLUDE_DIRS"
    14	verbose "Mengecualikan file: ${EXCLUDE_FILES[*]}"
    15	verbose "Mengecualikan file JSON dari folder ./supabase_data"
    16	
    17	# Hapus file output jika sudah ada
    18	[ -f "$OUTPUT_FILE" ] && rm "$OUTPUT_FILE" && verbose "Menghapus file output lama"
    19	
    20	# Buat struktur direktori
    21	verbose "Membuat struktur direktori..."
    22	tree -I "$EXCLUDE_DIRS" -a > "$OUTPUT_FILE" && verbose "Struktur direktori telah disimpan"
    23	
    24	# Buat find command
    25	FIND_CMD="find . -type f -not -path \"./node_modules/*\" -not -path \"./.git/*\" -not -path \"./project_files.txt\""
    26	for EXCL in "${EXCLUDE_FILES[@]}"; do
    27	    FIND_CMD+=" -not -path \"$EXCL\""
    28	done
    29	
    30	# Tambahkan pengecualian untuk file JSON di folder supabase_data
    31	FIND_CMD+=" -not -path \"./supabase_data/*.json\""
    32	
    33	# Temukan dan hitung file
    34	verbose "Menghitung file..."
    35	TOTAL_FILES=$(eval "$FIND_CMD" | wc -l)
    36	verbose "Total file yang akan diproses: $TOTAL_FILES"
    37	
    38	# Inisialisasi counter
    39	COUNT=0
    40	
    41	# Proses semua file
    42	verbose "Mulai memproses file..."
    43	eval "$FIND_CMD" | sort | while IFS= read -r FILE; do
    44	    ((COUNT++))
    45	    verbose "[$COUNT/$TOTAL_FILES] Memproses: $FILE"
    46	    
    47	    echo -e "\n\n===============================================" >> "$OUTPUT_FILE"
    48	    echo -e "= File: $FILE " >> "$OUTPUT_FILE"
    49	    echo -e "===============================================\n" >> "$OUTPUT_FILE"
    50	    nl -ba "$FILE" >> "$OUTPUT_FILE"
    51	done
    52	
    53	verbose "Proses selesai. Hasil tersimpan di $OUTPUT_FILE"


===============================================
= File: ./get-database 
===============================================

     1	#!/bin/bash
     2	# Konfigurasi Supabase
     3	SUPABASE_URL="https://psqmckbtwqphcteymjil.supabase.co"
     4	SUPABASE_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBzcW1ja2J0d3FwaGN0ZXltamlsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIxOTQ2MjAsImV4cCI6MjA1Nzc3MDYyMH0.wvxpldpaoanDk9Wd7wDUeeCuMSVw9e0pxE7_BMt823s"
     5	
     6	# Buat direktori output jika belum ada
     7	OUTPUT_DIR="supabase_data"
     8	mkdir -p "$OUTPUT_DIR"
     9	
    10	# Daftar tabel yang diketahui
    11	TABLES=(
    12	  "doctors"
    13	  "item_categories"
    14	  "item_types"
    15	  "item_units"
    16	  "items"
    17	  "patients"
    18	  "purchase_items"
    19	  "purchases"
    20	  "sale_items"
    21	  "sales"
    22	  "suppliers"
    23	  "unit_conversions"
    24	  "users"
    25	  "e_invoices"
    26	  "e_invoice_items"
    27	  "company_profiles"
    28	)
    29	
    30	# Buat objek JSON utama
    31	echo "{" > "$OUTPUT_DIR/database_export.json"
    32	echo "  \"export_date\": \"$(date -u '+%Y-%m-%dT%H:%M:%SZ')\"," >> "$OUTPUT_DIR/database_export.json"
    33	echo "  \"tables\": {" >> "$OUTPUT_DIR/database_export.json"
    34	
    35	# Loop melalui setiap tabel
    36	TABLE_COUNT=${#TABLES[@]}
    37	CURRENT_TABLE=0
    38	
    39	for TABLE in "${TABLES[@]}"; do
    40	  CURRENT_TABLE=$((CURRENT_TABLE + 1))
    41	  echo "Mengunduh data tabel: $TABLE"
    42	  
    43	  # Ambil data dari tabel
    44	  RESPONSE=$(curl "$SUPABASE_URL/rest/v1/$TABLE?select=*" \
    45	    -H "apikey: $SUPABASE_KEY" \
    46	    -H "Authorization: Bearer $SUPABASE_KEY" \
    47	    -s)
    48	    
    49	  # Simpan ke file JSON individual
    50	  echo "$RESPONSE" | jq . > "$OUTPUT_DIR/$TABLE.json"
    51	  
    52	  # Tambahkan ke file JSON gabungan
    53	  echo "    \"$TABLE\": $(echo "$RESPONSE" | jq .)" >> "$OUTPUT_DIR/database_export.json"
    54	  
    55	  # Tambahkan koma jika bukan tabel terakhir
    56	  if [ $CURRENT_TABLE -lt $TABLE_COUNT ]; then
    57	    echo "," >> "$OUTPUT_DIR/database_export.json"
    58	  fi
    59	  
    60	  echo "✓ Data $TABLE berhasil diproses"
    61	done
    62	
    63	# Tutup objek JSON
    64	echo "  }" >> "$OUTPUT_DIR/database_export.json"
    65	echo "}" >> "$OUTPUT_DIR/database_export.json"
    66	
    67	# Format JSON akhir agar lebih rapi
    68	jq . "$OUTPUT_DIR/database_export.json" > "$OUTPUT_DIR/temp.json" && mv "$OUTPUT_DIR/temp.json" "$OUTPUT_DIR/database_export.json"
    69	
    70	echo "Semua data telah diunduh ke direktori $OUTPUT_DIR"
    71	echo "Ekspor gabungan disimpan di $OUTPUT_DIR/database_export.json"


===============================================
= File: ./.gitignore 
===============================================

     1	# Logs
     2	logs
     3	*.log
     4	npm-debug.log*
     5	yarn-debug.log*
     6	yarn-error.log*
     7	pnpm-debug.log*
     8	lerna-debug.log*
     9	
    10	node_modules
    11	dist
    12	dist-ssr
    13	*.local
    14	
    15	# Editor directories and files
    16	.vscode/*
    17	!.vscode/extensions.json
    18	.idea
    19	.DS_Store
    20	*.suo
    21	*.ntvs*
    22	*.njsproj
    23	*.sln
    24	*.sw?


===============================================
= File: ./index.html 
===============================================

     1	<!doctype html>
     2	<html lang="en">
     3	  <head>
     4	    <meta charset="UTF-8" />
     5	    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
     6	    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
     7	    <link href="../src/output.css" rel="stylesheet">
     8	    <!-- <title>Vite + React + TS</title> -->
     9	  </head>
    10	  <body>
    11	    <div id="root"></div>
    12	    <script type="module" src="/src/main.tsx"></script>
    13	  </body>
    14	</html>


===============================================
= File: ./package.json 
===============================================

     1	{
     2	  "$schema": "https://json.schemastore.org/package.json",
     3	  "name": "apotek-klinik-app",
     4	  "private": true,
     5	  "version": "0.0.0",
     6	  "type": "module",
     7	  "scripts": {
     8	    "dev": "vite",
     9	    "build": "tsc -b && vite build",
    10	    "lint": "eslint .",
    11	    "preview": "vite preview"
    12	  },
    13	  "dependencies": {
    14	    "@headlessui/react": "^2.2.1",
    15	    "@supabase/supabase-js": "^2.49.3",
    16	    "@tanstack/react-query": "^5.72.2",
    17	    "@tanstack/react-query-devtools": "^5.72.2",
    18	    "@tanstack/react-query-persist-client": "^5.72.2",
    19	    "@tanstack/react-table": "^8.21.2",
    20	    "arktype": "^2.1.19",
    21	    "autoprefixer": "^10.4.21",
    22	    "axios": "^1.8.4",
    23	    "chart.js": "^4.4.8",
    24	    "postcss": "^8.5.3",
    25	    "react": "^19.0.0",
    26	    "react-chartjs-2": "^5.3.0",
    27	    "react-dom": "^19.0.0",
    28	    "react-icons": "^5.5.0",
    29	    "react-router-dom": "^6.30.0",
    30	    "zustand": "^5.0.3"
    31	  },
    32	  "devDependencies": {
    33	    "@eslint/js": "^9.21.0",
    34	    "@types/react": "^19.0.10",
    35	    "@types/react-dom": "^19.0.4",
    36	    "@vitejs/plugin-react": "^4.3.4",
    37	    "eslint": "^9.21.0",
    38	    "eslint-plugin-react-hooks": "^5.1.0",
    39	    "eslint-plugin-react-refresh": "^0.4.19",
    40	    "globals": "^15.15.0",
    41	    "tailwindcss": "^3.4.17",
    42	    "typescript": "^5.8.3",
    43	    "typescript-eslint": "^8.24.1",
    44	    "vite": "^6.2.0"
    45	  }
    46	}


===============================================
= File: ./README.md 
===============================================

     1	# React + TypeScript + Vite
     2	
     3	This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.
     4	
     5	Currently, two official plugins are available:
     6	
     7	- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
     8	- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh
     9	
    10	## Expanding the ESLint configuration
    11	
    12	If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:
    13	
    14	```js
    15	export default tseslint.config({
    16	  extends: [
    17	    // Remove ...tseslint.configs.recommended and replace with this
    18	    ...tseslint.configs.recommendedTypeChecked,
    19	    // Alternatively, use this for stricter rules
    20	    ...tseslint.configs.strictTypeChecked,
    21	    // Optionally, add this for stylistic rules
    22	    ...tseslint.configs.stylisticTypeChecked,
    23	  ],
    24	  languageOptions: {
    25	    // other options...
    26	    parserOptions: {
    27	      project: ['./tsconfig.node.json', './tsconfig.app.json'],
    28	      tsconfigRootDir: import.meta.dirname,
    29	    },
    30	  },
    31	})
    32	```
    33	
    34	You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:
    35	
    36	```js
    37	// eslint.config.js
    38	import reactX from 'eslint-plugin-react-x'
    39	import reactDom from 'eslint-plugin-react-dom'
    40	
    41	export default tseslint.config({
    42	  plugins: {
    43	    // Add the react-x and react-dom plugins
    44	    'react-x': reactX,
    45	    'react-dom': reactDom,
    46	  },
    47	  rules: {
    48	    // other rules...
    49	    // Enable its recommended typescript rules
    50	    ...reactX.configs['recommended-typescript'].rules,
    51	    ...reactDom.configs.recommended.rules,
    52	  },
    53	})
    54	```


===============================================
= File: ./src/App.css 
===============================================

     1	#root {
     2	  max-width: 1280px;
     3	  margin: 0 auto;
     4	  padding: 2rem;
     5	  text-align: center;
     6	}
     7	
     8	.logo {
     9	  height: 6em;
    10	  padding: 1.5em;
    11	  will-change: filter;
    12	  transition: filter 300ms;
    13	}
    14	.logo:hover {
    15	  filter: drop-shadow(0 0 2em #646cffaa);
    16	}
    17	.logo.react:hover {
    18	  filter: drop-shadow(0 0 2em #61dafbaa);
    19	}
    20	
    21	@keyframes logo-spin {
    22	  from {
    23	    transform: rotate(0deg);
    24	  }
    25	  to {
    26	    transform: rotate(360deg);
    27	  }
    28	}
    29	
    30	@media (prefers-reduced-motion: no-preference) {
    31	  a:nth-of-type(2) .logo {
    32	    animation: logo-spin infinite 20s linear;
    33	  }
    34	}
    35	
    36	.card {
    37	  padding: 2em;
    38	}
    39	
    40	.read-the-docs {
    41	  color: #888;
    42	}


===============================================
= File: ./src/App.tsx 
===============================================

     1	// src/App.tsx
     2	import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
     3	import { Suspense, lazy, useEffect } from 'react';
     4	import MainLayout from './components/layout/MainLayout';
     5	import Login from './pages/auth/Login';
     6	import './index.css';
     7	import { useAuthStore } from './store/authStore';
     8	import { ConfirmDialogProvider } from './components/ui/ConfirmDialog';
     9	
    10	// Lazy load pages
    11	const Dashboard = lazy(() => import('./pages/dashboard/Dashboard'));
    12	const ItemList = lazy(() => import('./pages/master-data/ItemList'));
    13	const CategoryList = lazy(() => import('./pages/master-data/CategoryList'));
    14	const UnitList = lazy(() => import('./pages/master-data/UnitList'));
    15	const TypeList = lazy(() => import('./pages/master-data/TypeList'));
    16	const AddItem = lazy(() => import('./pages/master-data/AddItem'));
    17	// ---> ADD THIS IMPORT <---
    18	const SupplierList = lazy(() => import('./pages/master-data/SupplierList'));
    19	const UploadInvoice = lazy(() => import('./pages/purchases/UploadInvoice'));
    20	const PurchaseList = lazy(() => import('./pages/purchases/PurchaseList'));
    21	const CreatePurchase = lazy(() => import('./pages/purchases/CreatePurchase'));
    22	const Profile = lazy(() => import('./pages/settings/Profile'));
    23	const PrintPurchase = lazy(() => import('./pages/purchases/PrintPurchase'));
    24	const ViewPurchase = lazy(() => import('./pages/purchases/ViewPurchase'));
    25	// Tambahkan halaman lain sesuai kebutuhan
    26	
    27	// Komponen placeholder untuk halaman yang belum diimplementasi
    28	const ComingSoon = ({ title }: { title: string }) => {
    29	  return (
    30	    <div className="flex flex-col items-center justify-center min-h-[50vh] text-gray-500">
    31	      <h2 className="text-2xl font-bold mb-4">{title}</h2>
    32	      <p className="text-xl">Fitur ini akan segera hadir!</p>
    33	      <div className="mt-8 p-4 border border-blue-300 rounded-lg bg-blue-50 max-w-md">
    34	        <p className="text-blue-600 text-center">
    35	          Halaman ini sedang dalam pengembangan.
    36	        </p>
    37	      </div>
    38	    </div>
    39	  );
    40	};
    41	
    42	function App() {
    43	  const { session, initialize } = useAuthStore();
    44	
    45	  // Inisialisasi auth state saat aplikasi dimuat
    46	  useEffect(() => {
    47	    initialize();
    48	  }, [initialize]);
    49	
    50	
    51	  return (
    52	    <ConfirmDialogProvider>
    53	      <Router future={{ v7_startTransition: true, v7_relativeSplatPath: true }}>
    54	        <Routes>
    55	          <Route path="/login" element={!session ? <Login /> : <Navigate to="/" />} />
    56	
    57	          {/* Route khusus untuk tampilan cetak - tanpa layout */}
    58	          <Route path="/purchases/print-view" element={
    59	            <Suspense fallback={<div>Loading...</div>}>
    60	              <PrintPurchase />
    61	            </Suspense>} />
    62	
    63	          <Route path="/" element={session ? <MainLayout /> : <Navigate to="/login" />}>
    64	            <Route
    65	              index
    66	              element={
    67	              <div className="text-gray-800">
    68	                <Suspense fallback={<div>Loading...</div>}>
    69	                  <Dashboard />
    70	                </Suspense>
    71	              </div>
    72	            } />
    73	
    74	            <Route path="master-data">
    75	              <Route path="items" element={
    76	                <Suspense fallback={<div>Loading...</div>}>
    77	                  <ItemList />
    78	                </Suspense>
    79	              } />
    80	              <Route path="items/add" element={
    81	                <Suspense fallback={<div>Loading...</div>}>
    82	                  <AddItem />
    83	                </Suspense>
    84	              } />
    85	              <Route path="categories" element={
    86	                <Suspense fallback={<div>Loading...</div>}>
    87	                  <CategoryList />
    88	                </Suspense>
    89	              } />
    90	              <Route path="types" element={
    91	                <Suspense fallback={<div>Loading...</div>}>
    92	                  <TypeList />
    93	                </Suspense>
    94	              } />
    95	              <Route path="units" element={
    96	                <Suspense fallback={<div>Loading...</div>}>
    97	                  <UnitList />
    98	                </Suspense>
    99	              } />
   100	               {/* ---> ADD THIS ROUTE <--- */}
   101	               <Route path="suppliers" element={
   102	                <Suspense fallback={<div>Loading...</div>}>
   103	                  <SupplierList />
   104	                </Suspense>
   105	               } />
   106	              {/* Tambahkan route lain sesuai kebutuhan (e.g., /add, /edit/:id for suppliers) */}
   107	            </Route>
   108	
   109	            <Route path="purchases">
   110	              <Route
   111	                index
   112	                element={
   113	                  <Suspense fallback={<div>Loading...</div>}>
   114	                    <PurchaseList />
   115	                  </Suspense>
   116	                }
   117	              />
   118	              <Route
   119	                path="create"
   120	                element={
   121	                  <Suspense fallback={<div>Loading...</div>}>
   122	                    <CreatePurchase />
   123	                  </Suspense>
   124	                }
   125	              />
   126	              <Route
   127	                path="upload-invoice"
   128	                element={
   129	                  <Suspense fallback={<div>Loading...</div>}>
   130	                    <UploadInvoice />
   131	                  </Suspense>
   132	                }
   133	              />
   134	              <Route
   135	                path="view/:id"
   136	                element={
   137	                  <Suspense fallback={<div>Loading...</div>}>
   138	                    <ViewPurchase />
   139	                  </Suspense>
   140	                }
   141	              />
   142	              <Route path="orders" element={<ComingSoon title="Daftar Pesanan Beli" />} />
   143	              <Route path="price-history" element={<ComingSoon title="Riwayat Harga Beli" />} />
   144	            </Route>
   145	
   146	            <Route path="inventory">
   147	              <Route
   148	                index
   149	                element={<ComingSoon title="Persediaan" />}
   150	              />
   151	              <Route
   152	                path="stock"
   153	                element={<ComingSoon title="Stok Obat" />}
   154	              />
   155	              <Route
   156	                path="stock-opname"
   157	                element={<ComingSoon title="Stok Opname" />}
   158	              />
   159	              <Route
   160	                path="expired"
   161	                element={<ComingSoon title="Obat Kadaluarsa" />}
   162	              />
   163	            </Route>
   164	
   165	            <Route path="sales">
   166	              <Route
   167	                index
   168	                element={<ComingSoon title="Daftar Penjualan" />}
   169	              />
   170	              <Route
   171	                path="create"
   172	                element={<ComingSoon title="Tambah Penjualan" />}
   173	              />
   174	            </Route>
   175	
   176	            <Route path="clinic">
   177	              <Route
   178	                index
   179	                element={<ComingSoon title="Klinik" />}
   180	              />
   181	              <Route
   182	                path="patients"
   183	                element={<ComingSoon title="Daftar Pasien" />}
   184	              />
   185	              <Route
   186	                path="queue"
   187	                element={<ComingSoon title="Antrian" />}
   188	              />
   189	              <Route
   190	                path="medical-records"
   191	                element={<ComingSoon title="Rekam Medis" />}
   192	              />
   193	            </Route>
   194	
   195	            <Route path="reports">
   196	              <Route index element={<ComingSoon title="Laporan" />} />
   197	              <Route path="sales" element={<ComingSoon title="Laporan Penjualan" />} />
   198	              <Route path="purchases" element={<ComingSoon title="Laporan Pembelian" />} />
   199	              <Route path="stock" element={<ComingSoon title="Laporan Stok" />} />
   200	            </Route>
   201	
   202	            <Route path="settings">
   203	              <Route path="profile" element={
   204	                <Suspense fallback={<div>Loading...</div>}>
   205	                  <Profile />
   206	                </Suspense>
   207	              } />
   208	              <Route path="users" element={<ComingSoon title="Pengguna" />} />
   209	              <Route path="app" element={<ComingSoon title="Pengaturan Aplikasi" />} />
   210	            </Route>
   211	            {/* Tambahkan route untuk modul lain */}
   212	          </Route>
   213	        </Routes>
   214	      </Router>
   215	    </ConfirmDialogProvider>
   216	  );
   217	}
   218	
   219	export default App;


===============================================
= File: ./src/components/layout/MainLayout.tsx 
===============================================

     1	import { useState } from "react";
     2	import { Outlet } from "react-router-dom";
     3	import Navbar from "./Navbar";
     4	import Sidebar from "./Sidebar";
     5	
     6	const MainLayout = () => {
     7	    const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
     8	
     9	    const toggleSidebar = () => {
    10	        setSidebarCollapsed(!sidebarCollapsed);
    11	    };
    12	
    13	    return (
    14	        <div className="flex h-screen bg-gray-100 text-gray-800">
    15	            <Sidebar collapsed={sidebarCollapsed} toggleSidebar={toggleSidebar} />
    16	
    17	            <div className="flex flex-col flex-1 overflow-hidden">
    18	                <Navbar />
    19	
    20	                <main className="flex-1 overflow-y-auto p-4 text-gray-800">
    21	                    <Outlet />
    22	                </main>
    23	            </div>
    24	        </div>
    25	    );
    26	};
    27	
    28	export default MainLayout;


===============================================
= File: ./src/components/layout/Navbar.tsx 
===============================================

     1	// src/components/layout/Navbar.tsx
     2	import { useState } from 'react';
     3	import { useAuthStore } from '../../store/authStore';
     4	import { Button } from '../ui/Button';
     5	
     6	const Navbar = () => {
     7	    const { user, logout } = useAuthStore();
     8	    const [dropdownOpen, setDropdownOpen] = useState(false);
     9	
    10	    const toggleDropdown = () => {
    11	        setDropdownOpen(!dropdownOpen);
    12	    };
    13	
    14	    const handleLogout = async () => {
    15	        await logout();
    16	    };
    17	
    18	    return (
    19	        <nav className="bg-white border-b px-6 py-3">
    20	            <div className="flex justify-between items-center">
    21	                <div>
    22	                    <h1 className="text-xl font-semibold text-gray-800">PharmaSys</h1>
    23	                </div>
    24	
    25	                <div className="relative">
    26	                    <button
    27	                        className="flex items-center space-x-2"
    28	                        onClick={toggleDropdown}
    29	                    >
    30	                        <div className="w-8 h-8 rounded-full bg-primary text-white flex items-center justify-center">
    31	                            {user?.name ? user.name.charAt(0).toUpperCase() : 'U'}
    32	                        </div>
    33	                        <span className="font-medium">{user?.name || 'User'}</span>
    34	                    </button>
    35	
    36	                    {dropdownOpen && (
    37	                        <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg z-10">
    38	                            <div className="py-1">
    39	                                <Button
    40	                                    variant="outline"
    41	                                    className="w-full justify-start rounded-none"
    42	                                    onClick={handleLogout}
    43	                                >
    44	                                    Logout
    45	                                </Button>
    46	                            </div>
    47	                        </div>
    48	                    )}
    49	                </div>
    50	            </div>
    51	        </nav>
    52	    );
    53	};
    54	
    55	export default Navbar;


===============================================
= File: ./src/components/layout/Sidebar.tsx 
===============================================

     1	import { Link } from "react-router-dom";
     2	import { useState, useEffect, useCallback } from "react";
     3	import { useLocation } from "react-router-dom";
     4	import {
     5	    FaDatabase,
     6	    FaBoxes,
     7	    FaShoppingCart,
     8	    FaHome,
     9	    FaArrowLeft,
    10	    FaAngleDown,
    11	    FaChartBar,
    12	    FaHospital,
    13	    FaShoppingBag,
    14	    FaCog
    15	} from "react-icons/fa";
    16	import { JSX } from "react/jsx-runtime";
    17	
    18	interface SidebarProps {
    19	    collapsed: boolean;
    20	    toggleSidebar: () => void;
    21	}
    22	
    23	interface MenuItem {
    24	    name: string;
    25	    path: string;
    26	    icon: JSX.Element;
    27	    children?: {
    28	        name: string;
    29	        path: string;
    30	    }[];
    31	}
    32	
    33	const Sidebar = ({ collapsed, toggleSidebar }: SidebarProps) => {
    34	    const location = useLocation();
    35	    const [openMenus, setOpenMenus] = useState<Record<string, boolean>>({
    36	        masterData: false,
    37	        inventory: false,
    38	        purchasing: false,
    39	        sales: false,
    40	        clinic: false,
    41	        finance: false,
    42	        reports: false,
    43	        settings: false,
    44	    });
    45	
    46	    const [savedOpenMenus, setSavedOpenMenus] = useState<Record<string, boolean>>({});
    47	    const [hoverMenu, setHoverMenu] = useState<string | null>(null);
    48	
    49	    // Define menu structure
    50	    const menuItems: MenuItem[] = [
    51	        {
    52	            name: "Dashboard",
    53	            path: "/",
    54	            icon: <FaHome className="text-lg" />,
    55	        },
    56	        {
    57	            name: "Master Data",
    58	            path: "/master-data",
    59	            icon: <FaDatabase className="text-lg" />,
    60	            children: [
    61	                { name: "Daftar Item", path: "/master-data/items" },
    62	                { name: "Kategori Item", path: "/master-data/categories" },
    63	                { name: "Jenis Item", path: "/master-data/types" },
    64	                { name: "Satuan", path: "/master-data/units" },
    65	                { name: "Supplier", path: "/master-data/suppliers" },
    66	                { name: "Pasien", path: "/master-data/patients" },
    67	                { name: "Dokter", path: "/master-data/doctors" },
    68	            ],
    69	        },
    70	        {
    71	            name: "Persediaan",
    72	            path: "/inventory",
    73	            icon: <FaBoxes className="text-lg" />,
    74	            children: [
    75	                { name: "Stok Obat", path: "/inventory/stock" },
    76	                { name: "Stok Opname", path: "/inventory/stock-opname" },
    77	                { name: "Obat Kadaluarsa", path: "/inventory/expired" },
    78	            ],
    79	        },
    80	        {
    81	            name: "Pembelian",
    82	            path: "/purchases",
    83	            icon: <FaShoppingCart className="text-lg" />,
    84	            children: [
    85	                { name: "Daftar Pesanan Beli", path: "/purchases/orders" },
    86	                { name: "Daftar Pembelian", path: "/purchases" },
    87	                { name: "Riwayat Harga Beli", path: "/purchases/price-history" },
    88	            ],
    89	        },
    90	        {
    91	            name: "Penjualan",
    92	            path: "/sales",
    93	            icon: <FaShoppingBag className="text-lg" />,
    94	            children: [
    95	                { name: "Daftar Penjualan", path: "/sales" },
    96	                { name: "Tambah Penjualan", path: "/sales/create" },
    97	            ],
    98	        },
    99	        {
   100	            name: "Klinik",
   101	            path: "/clinic",
   102	            icon: <FaHospital className="text-lg" />,
   103	            children: [
   104	                { name: "Daftar Pasien", path: "/clinic/patients" },
   105	                { name: "Antrian", path: "/clinic/queue" },
   106	                { name: "Rekam Medis", path: "/clinic/medical-records" },
   107	            ],
   108	        },
   109	        {
   110	            name: "Laporan",
   111	            path: "/reports",
   112	            icon: <FaChartBar className="text-lg" />,
   113	            children: [
   114	                { name: "Penjualan", path: "/reports/sales" },
   115	                { name: "Pembelian", path: "/reports/purchases" },
   116	                { name: "Stok", path: "/reports/stock" },
   117	            ],
   118	        },
   119	        {
   120	            name: "Pengaturan",
   121	            path: "/settings",
   122	            icon: <FaCog className="text-lg" />,
   123	            children: [
   124	                { name: "Profil", path: "/settings/profile" },
   125	                { name: "Pengguna", path: "/settings/users" },
   126	                { name: "Aplikasi", path: "/settings/app" },
   127	            ],
   128	        },
   129	    ];
   130	
   131	    useEffect(() => {
   132	        if (collapsed) {
   133	            setSavedOpenMenus({ ...openMenus });
   134	            setOpenMenus({
   135	                masterData: false,
   136	                inventory: false,
   137	                purchasing: false,
   138	                sales: false,
   139	                clinic: false,
   140	                finance: false,
   141	                reports: false,
   142	                settings: false,
   143	            });
   144	        } else {
   145	            setOpenMenus(savedOpenMenus);
   146	        }
   147	        // eslint-disable-next-line react-hooks/exhaustive-deps
   148	    }, [collapsed]);
   149	
   150	    // Check if path is active
   151	    const isActive = useCallback((path: string) => {
   152	        if (path === '/') {
   153	            return location.pathname === '/';
   154	        }
   155	        return location.pathname.startsWith(path);
   156	    }, [location]);
   157	
   158	    // Check if submenu is active
   159	    const hasActiveChild = useCallback((children?: { path: string }[]) => {
   160	        if (!children) return false;
   161	        return children.some(child => isActive(child.path));
   162	    }, [isActive]);
   163	
   164	    // Toggle menu open/closed
   165	    const toggleMenu = useCallback((menu: string) => {
   166	        if (!collapsed) {
   167	            setOpenMenus((prev) => ({
   168	                ...prev,
   169	                [menu]: !prev[menu],
   170	            }));
   171	        }
   172	    }, [collapsed]);
   173	
   174	    // Handle hover for collapsed sidebar
   175	    const handleMouseEnter = useCallback((menu: string) => {
   176	        if (collapsed) {
   177	            setHoverMenu(menu);
   178	        }
   179	    }, [collapsed]);
   180	
   181	    const handleMouseLeave = useCallback(() => {
   182	        setHoverMenu(null);
   183	    }, []);
   184	
   185	    return (
   186	        <aside
   187	            className={`bg-gradient-to-b from-blue-600 to-blue-800 text-white 
   188	                        transition-all duration-500 ease-in-out h-screen 
   189	                        ${collapsed ? 'w-16' : 'w-64'} relative group z-10`}
   190	        >
   191	            <div className="flex flex-col h-full">
   192	                {/* Logo Area */}
   193	                <div className={`p-4 border-b border-blue-500/30 flex items-center justify-between group`}>
   194	                    {!collapsed ? (
   195	                        <>
   196	                        <div className="flex items-center">
   197	                            <div className="h-8 w-8 bg-white rounded-md flex items-center justify-center">
   198	                                <span className="text-blue-600 text-xl font-bold">P</span>
   199	                            </div>
   200	                            <h2 className="ml-2 text-lg font-bold transition-opacity duration-200">PharmaSys</h2>
   201	                        </div>
   202	                        <button onClick={toggleSidebar} className="p-1.5 rounded-full bg-blue-500/20 hover:bg-blue-500/40 transition-all duration-300">
   203	                            <FaArrowLeft size={14} />
   204	                        </button>
   205	                        </>
   206	                    ) : (
   207	                        <div className="h-8 w-8 bg-white rounded-md flex items-center justify-center mx-auto cursor-pointer" onClick={toggleSidebar}>
   208	                            <span className="text-blue-600 text-xl font-bold">P</span>
   209	                        </div>
   210	                    )}
   211	                </div>
   212	
   213	                {/* Menu Items */}
   214	                <nav className="flex-grow overflow-y-auto py-2 scrollbar-hidden">
   215	                    {menuItems.map((item) => (
   216	                        <div key={item.name} className="mb-1" onMouseEnter={() => handleMouseEnter(item.name)} onMouseLeave={handleMouseLeave}>
   217	                            {/* Menu Item Button */}
   218	                            {item.children ? (
   219	                                <button
   220	                                    onClick={() => toggleMenu(item.name.toLowerCase().replace(' ', ''))}
   221	                                    className={`w-full text-left flex items-center justify-between px-2 py-3
   222	                                              ${isActive(item.path) || hasActiveChild(item.children)
   223	                                            ? 'bg-white/20 font-medium border-l-4 border-white'
   224	                                            : collapsed ? '' : 'border-l-4 border-transparent'} 
   225	                                                : 'hover:bg-white/5'} 
   226	                                              transition-all duration-150 group relative`}
   227	                                >
   228	                                    <div className={`flex items-center ${collapsed ? 'justify-start pl-3 w-full' : ''}`}>
   229	                                        <div className={`${isActive(item.path) || hasActiveChild(item.children)
   230	                                            ? 'text-white'
   231	                                            : 'text-blue-100'} 
   232	                                                      transition-colors duration-200`}>
   233	                                            {item.icon}
   234	                                        </div>
   235	                                        {!collapsed && <span className="ml-3 truncate text-white">{item.name}</span>}
   236	                                    </div>
   237	                                    {!collapsed && <FaAngleDown
   238	                                        className={`text-sm transition-transform duration-300 ${openMenus[item.name.toLowerCase().replace(' ', '')] ? "rotate-180" : ""
   239	                                            }`}
   240	                                    />}
   241	                                </button>
   242	                            ) : (
   243	                                <Link to={item.path}
   244	                                className={`w-full text-left flex items-center justify-between px-2 py-3
   245	                                          ${isActive(item.path) || hasActiveChild(item.children)
   246	                                        ? 'bg-white/20 font-medium border-l-4 border-white'
   247	                                        : collapsed ? '' : 'border-l-4 border-transparent'} 
   248	                                            : 'hover:bg-white/5'} 
   249	                                          transition-all duration-150 group relative`}
   250	                                >
   251	                                    <div className={`flex items-center ${collapsed ? 'justify-start pl-3 w-full' : ''}`}>
   252	                                        <div className={`${isActive(item.path) || hasActiveChild(item.children)
   253	                                        ? 'text-white'
   254	                                        : 'text-blue-100'} 
   255	                                                  transition-colors duration-200`}>
   256	                                            {item.icon}
   257	                                        </div>
   258	                                    {!collapsed && (
   259	                                        <span className="ml-3 truncate text-white">{item.name}</span>
   260	                                    )}
   261	                                </div>
   262	                            </Link>
   263	                            )}
   264	
   265	                            {/* Submenu Items */}
   266	                            {item.children && !collapsed && (
   267	                                <div 
   268	                                    className={`overflow-hidden transition-all duration-300 ease-in-out transform ${
   269	                                        openMenus[item.name.toLowerCase().replace(' ', '')] 
   270	                                            ? 'max-h-96 opacity-100 scale-y-100 origin-top' 
   271	                                            : 'max-h-0 opacity-0 scale-y-95 origin-top'
   272	                                    }`}
   273	                                >
   274	                                    <div className="pl-12 pr-4 py-1 space-y-1 bg-blue-700/20">
   275	                                        {item.children.map((child) => (
   276	                                            <Link
   277	                                                key={child.path}
   278	                                                to={child.path}
   279	                                                className={`block py-2 px-2 text-sm rounded-md transition-all duration-150 text-blue-100 hover:text-white visited:text-blue-100 
   280	                                                           ${isActive(child.path)
   281	                                                    ? 'bg-white/20 text-white font-medium'
   282	                                                    : 'text-blue-100 hover:bg-white/5 hover:text-white'}`}
   283	                                            >
   284	                                                {child.name}
   285	                                            </Link>
   286	                                        ))}
   287	                                    </div>
   288	                                </div>
   289	                            )}
   290	
   291	                            {/* Submenu dropdown for collapsed sidebar on hover */}
   292	                            {collapsed && item.children && hoverMenu === item.name && (
   293	                                <div
   294	                                    className="absolute left-full ml-2 top-0 bg-blue-800 rounded-md py-2 px-3 
   295	                                            min-w-40 z-20 shadow-xl"
   296	                                >
   297	                                    {item.children.map((child) => (
   298	                                        <Link
   299	                                            key={child.path}
   300	                                            to={child.path}
   301	                                            className={`block py-2 px-2 text-sm rounded-md transition-all duration-150 text-blue-100 hover:text-white visited:text-blue-100 
   302	                                                      ${isActive(child.path)
   303	                                                    ? 'bg-white/10 text-white'
   304	                                                    : 'text-blue-100 hover:bg-white/5 hover:text-white'}`}
   305	                                        >
   306	                                            {child.name}
   307	                                        </Link>
   308	                                    ))}
   309	                                </div>
   310	                            )}
   311	                        </div>
   312	                    ))}
   313	                </nav>
   314	
   315	                {/* Bottom version info */}
   316	                <div className={`p-4 text-xs text-blue-200/70 border-t border-blue-500/30 ${collapsed ? 'text-center' : ''}`}>
   317	                    {collapsed ? 'v2.3' : 'PharmaSys v2.3.0'}
   318	                </div>
   319	            </div>
   320	        </aside>
   321	    );
   322	};
   323	
   324	export default Sidebar;


===============================================
= File: ./src/components/purchases/InvoiceLayout.tsx 
===============================================

     1	// src/components/invoice/InvoiceLayout.tsx
     2	import React from 'react';
     3	
     4	// Definisikan tipe data props yang dibutuhkan
     5	interface PurchaseData {
     6	    id: string;
     7	    invoice_number: string;
     8	    date: string;
     9	    due_date: string | null;
    10	    so_number: string | null;
    11	    total: number;
    12	    payment_status: string;
    13	    payment_method: string;
    14	    vat_percentage: number;
    15	    is_vat_included: boolean;
    16	    vat_amount: number;
    17	    notes: string | null;
    18	    supplier: {
    19	        name: string;
    20	        address: string | null;
    21	        contact_person: string | null;
    22	    };
    23	    customer_name?: string;
    24	    customer_address?: string;
    25	    checked_by?: string;
    26	}
    27	
    28	interface PurchaseItem {
    29	    id: string;
    30	    item_id: string;
    31	    item: {
    32	        name: string;
    33	        code: string;
    34	    };
    35	    quantity: number;
    36	    price: number;
    37	    discount: number;
    38	    subtotal: number;
    39	    vat_percentage: number;
    40	    unit: string;
    41	    batch_no: string | null;
    42	    expiry_date: string | null;
    43	}
    44	
    45	interface Subtotals {
    46	    baseTotal: number;
    47	    discountTotal: number;
    48	    afterDiscountTotal: number;
    49	    vatTotal: number;
    50	    grandTotal: number;
    51	}
    52	
    53	interface InvoiceLayoutProps {
    54	    purchase: PurchaseData;
    55	    items: PurchaseItem[];
    56	    subtotals: Subtotals;
    57	    printRef?: React.RefObject<HTMLDivElement>; // Ref opsional untuk html2canvas
    58	    title?: string; // Judul opsional
    59	}
    60	
    61	export const InvoiceLayout: React.FC<InvoiceLayoutProps> = ({
    62	    purchase,
    63	    items,
    64	    subtotals,
    65	    printRef,
    66	    title = "FAKTUR PEMBELIAN" // Default title
    67	}) => {
    68	    return (
    69	        // Gunakan div ini untuk referensi cetak/pdf jika printRef disediakan
    70	        <div ref={printRef} className="faktur-a4 bg-white p-6 shadow print:shadow-none">
    71	            {/* Header Faktur */}
    72	            <div className="mb-8">
    73	                <h1 className="text-2xl font-bold text-center mb-2">{title}</h1>
    74	                <div className="border-b-2 border-gray-400 mb-4"></div>
    75	
    76	                <div className="flex justify-between gap-4">
    77	                    {/* Info Kiri: Supplier & Customer */}
    78	                    <div className="w-1/2">
    79	                        {/* Supplier Info */}
    80	                        <div className="text-left mb-4">
    81	                            <h2 className="font-bold text-lg text-gray-800">{purchase.supplier?.name || 'Supplier'}</h2>
    82	                            <div className="text-sm text-gray-600">
    83	                                <p>{purchase.supplier?.address || ''}</p>
    84	                            </div>
    85	                        </div>
    86	
    87	                        {/* Customer Info */}
    88	                        <div className="text-left">
    89	                            <h2 className="text-sm text-gray-600">Customer:</h2>
    90	                            <div className="text-sm ">
    91	                                <p className="font-bold">{purchase.customer_name || 'Data belum tersedia'}</p>
    92	                                <p className="text-gray-600">{purchase.customer_address || 'Alamat belum tersedia'}</p>
    93	                            </div>
    94	                        </div>
    95	                    </div>
    96	
    97	                    {/* Info Kanan: Detail Faktur */}
    98	                    <div className="w-1/2">
    99	                        <div className="bg-gray-50 p-3 rounded text-sm">
   100	                            <div className="grid grid-cols-[auto,auto,1fr] mb-1">
   101	                                <span className="text-left font-bold w-[100px]">No. Faktur</span>
   102	                                <span className="px-2">:</span>
   103	                                <span>{purchase.invoice_number}</span>
   104	                            </div>
   105	                            <div className="grid grid-cols-[auto,auto,1fr] mb-1">
   106	                                <span className="text-left w-[100px]">Tanggal</span>
   107	                                <span className="px-2">:</span>
   108	                                <span>{new Date(purchase.date).toLocaleDateString('id-ID')}</span>
   109	                            </div>
   110	                            <div className="grid grid-cols-[auto,auto,1fr] mb-1">
   111	                                <span className="text-left w-[100px]">Jatuh Tempo</span>
   112	                                <span className="px-2">:</span>
   113	                                <span>{purchase.due_date ? new Date(purchase.due_date).toLocaleDateString('id-ID') : '-'}</span>
   114	                            </div>
   115	                            {purchase.so_number && (
   116	                                <div className="grid grid-cols-[auto,auto,1fr] mb-1">
   117	                                    <span className="text-left w-[100px]">No. SO</span>
   118	                                    <span className="px-2">:</span>
   119	                                    <span>{purchase.so_number}</span>
   120	                                </div>
   121	                            )}
   122	                        </div>
   123	                    </div>
   124	                </div>
   125	            </div>
   126	
   127	            {/* Tabel Item */}
   128	            <div className="mb-8">
   129	                <table className="w-full border-collapse">
   130	                    <thead>
   131	                        <tr className="bg-gray-100 text-xs">
   132	                            <th className="border p-1 pt-2 pb-2 text-center w-[5%]">No.</th>
   133	                            <th className="border p-1 pt-2 pb-2 text-left w-[10%]">Kode</th>
   134	                            <th className="border p-1 pt-2 pb-2 text-left">Nama Item</th>
   135	                            <th className="border p-1 pt-2 pb-2 text-center w-[10%]">Batch</th>
   136	                            <th className="border p-1 pt-2 pb-2 text-center w-[10%]">Exp</th>
   137	                            <th className="border p-1 pt-2 pb-2 text-center w-[8%]">Qty</th>
   138	                            <th className="border p-1 pt-2 pb-2 text-center w-[8%]">Satuan</th>
   139	                            <th className="border p-1 pt-2 pb-2 text-right w-[12%]">Harga</th>
   140	                            <th className="border p-1 pt-2 pb-2 text-right w-[8%]">Disc</th>
   141	                            {!purchase.is_vat_included && (
   142	                                <th className="border p-1 pt-2 pb-2 text-right w-[8%]">PPN</th>
   143	                            )}
   144	                            <th className="border p-1 pt-2 pb-2 text-right w-[12%]">Subtotal</th>
   145	                        </tr>
   146	                    </thead>
   147	                    <tbody>
   148	                        {items.length === 0 ? (
   149	                            <tr>
   150	                                <td colSpan={purchase.is_vat_included ? 10 : 11} className="border p-2 pt-3 pb-3 text-center text-gray-500 text-xs">
   151	                                    Tidak ada item
   152	                                </td>
   153	                            </tr>
   154	                        ) : (
   155	                            items.map((item, index) => (
   156	                                <tr key={item.id} className="hover:bg-gray-50 text-xs">
   157	                                    <td className="border p-1 pt-2 pb-2 text-center">{index + 1}</td>
   158	                                    <td className="border p-1 pt-2 pb-2">{item.item?.code || '-'}</td>
   159	                                    <td className="border p-1 pt-2 pb-2">{item.item?.name || 'Item tidak ditemukan'}</td>
   160	                                    <td className="border p-1 pt-2 pb-2 text-center">{item.batch_no || '-'}</td>
   161	                                    <td className="border p-1 pt-2 pb-2 text-center">
   162	                                        {item.expiry_date ? new Date(item.expiry_date).toLocaleDateString('id-ID', { year: 'numeric', month: '2-digit', day: '2-digit' }) : '-'}
   163	                                    </td>
   164	                                    <td className="border p-1 pt-2 pb-2 text-center">{item.quantity}</td>
   165	                                    <td className="border p-1 pt-2 pb-2 text-center">{item.unit}</td>
   166	                                    <td className="border p-1 pt-2 pb-2 text-right">{item.price.toLocaleString('id-ID')}</td>
   167	                                    <td className="border p-1 pt-2 pb-2 text-right">{item.discount > 0 ? `${item.discount}%` : '-'}</td>
   168	                                    {!purchase.is_vat_included && (
   169	                                        <td className="border p-1 pt-2 pb-2 text-right">{item.vat_percentage > 0 ? `${item.vat_percentage}%` : '-'}</td>
   170	                                    )}
   171	                                    <td className="border p-1 pt-2 pb-2 text-right">{item.subtotal.toLocaleString('id-ID')}</td>
   172	                                </tr>
   173	                            ))
   174	                        )}
   175	                    </tbody>
   176	                </table>
   177	            </div>
   178	
   179	            {/* Footer: Catatan & Total */}
   180	            <div className="flex justify-between mt-8">
   181	                {/* Info Tambahan */}
   182	                <div className="max-w-md">
   183	                    <div className="grid grid-cols-[auto,auto,1fr] mb-1 text-sm">
   184	                        <span className="text-left w-[120px]">Diperiksa oleh</span>
   185	                        <span className="px-2">:</span>
   186	                        <span>{purchase.supplier?.contact_person || purchase.checked_by || '-'}</span>
   187	                    </div>
   188	
   189	                    <div className="grid grid-cols-[auto,auto,1fr] mb-1 text-sm">
   190	                        <span className="text-left w-[120px]">Status Pembayaran</span>
   191	                        <span className="px-2">:</span>
   192	                        <span className={`${purchase.payment_status === 'paid' ? 'text-green-600' :
   193	                            purchase.payment_status === 'partial' ? 'text-orange-600' : 'text-red-600'
   194	                        }`}>
   195	                            {purchase.payment_status === 'paid' ? 'Lunas' :
   196	                                purchase.payment_status === 'partial' ? 'Sebagian' : 'Belum Dibayar'}
   197	                        </span>
   198	                    </div>
   199	
   200	                    <div className="grid grid-cols-[auto,auto,1fr] mb-1 text-sm">
   201	                        <span className="text-left w-[120px]">Metode Pembayaran</span>
   202	                        <span className="px-2">:</span>
   203	                        <span>{purchase.payment_method === 'cash' ? 'Tunai' : purchase.payment_method === 'transfer' ? 'Transfer' : purchase.payment_method === 'credit' ? 'Kredit' : purchase.payment_method}</span>
   204	                    </div>
   205	
   206	                    <div className="grid grid-cols-[auto,auto,1fr] mb-1 text-sm">
   207	                        <span className="text-left w-[120px]">Catatan</span>
   208	                        <span className="px-2">:</span>
   209	                        <span>{purchase.notes || '-'}</span>
   210	                    </div>
   211	                    {purchase.is_vat_included && (
   212	                        <div className="grid grid-cols-[auto,auto,1fr] mt-2">
   213	                            <span className="text-left w-[120px]"></span>
   214	                            <span className="px-2"></span>
   215	                            <span className="text-sm italic">* PPN sudah termasuk dalam harga</span>
   216	                        </div>
   217	                    )}
   218	                </div>
   219	
   220	                {/* Rincian Total */}
   221	                <div className="border p-4 min-w-[250px] text-sm">
   222	                    <div className="grid grid-cols-[1fr,auto,auto] mb-1">
   223	                        <span className="text-left">Subtotal</span>
   224	                        <span className="px-2">:</span>
   225	                        <span className="text-right">{subtotals.baseTotal.toLocaleString('id-ID')}</span>
   226	                    </div>
   227	
   228	                    <div className="grid grid-cols-[1fr,auto,auto] mb-1">
   229	                        <span className="text-left">Diskon</span>
   230	                        <span className="px-2">:</span>
   231	                        <span className="text-right">-{subtotals.discountTotal.toLocaleString('id-ID')}</span>
   232	                    </div>
   233	
   234	                    <div className="grid grid-cols-[1fr,auto,auto] mb-1">
   235	                        <span className="text-left">Setelah Diskon</span>
   236	                        <span className="px-2">:</span>
   237	                        <span className="text-right">{subtotals.afterDiscountTotal.toLocaleString('id-ID')}</span>
   238	                    </div>
   239	
   240	                    {!purchase.is_vat_included && (
   241	                        <div className="grid grid-cols-[1fr,auto,auto] mb-1">
   242	                            <span className="text-left">PPN</span>
   243	                            <span className="px-2">:</span>
   244	                            <span className="text-right">+{subtotals.vatTotal.toLocaleString('id-ID')}</span>
   245	                        </div>
   246	                    )}
   247	
   248	                    <div className="border-t pt-2 grid grid-cols-[1fr,auto,auto] font-bold">
   249	                        <span className="text-left">TOTAL</span>
   250	                        <span className="px-2">:</span>
   251	                        <span className="text-right">{subtotals.grandTotal.toLocaleString('id-ID')}</span>
   252	                    </div>
   253	                </div>
   254	            </div>
   255	        </div>
   256	    );
   257	};


===============================================
= File: ./src/components/purchases/ItemSearchBar.tsx 
===============================================

     1	import React from 'react';
     2	import { FaPlus } from 'react-icons/fa';
     3	import { Button } from '../ui/Button';
     4	import { Item } from '../../hooks/useItemSelection';
     5	import { PurchaseItem } from '../../hooks/usePurchaseForm';
     6	
     7	interface ItemSearchBarProps {
     8	    searchItem: string;
     9	    setSearchItem: (value: string) => void;
    10	    showItemDropdown: boolean;
    11	    setShowItemDropdown: (value: boolean) => void;
    12	    filteredItems: Item[];
    13	    selectedItem: Item | null;
    14	    setSelectedItem: (item: Item | null) => void;
    15	    onAddItem: (item: PurchaseItem) => void;
    16	}
    17	
    18	const ItemSearchBar: React.FC<ItemSearchBarProps> = ({
    19	    searchItem,
    20	    setSearchItem,
    21	    showItemDropdown,
    22	    setShowItemDropdown,
    23	    filteredItems,
    24	    selectedItem,
    25	    setSelectedItem,
    26	    onAddItem
    27	}) => {
    28	    const addItem = () => {
    29	        if (!selectedItem) return;
    30	        
    31	        const newItem: PurchaseItem = {
    32	            id: Date.now().toString(),
    33	            item_id: selectedItem.id,
    34	            item_name: selectedItem.name,
    35	            quantity: 1,
    36	            price: selectedItem.base_price,
    37	            discount: 0,
    38	            subtotal: selectedItem.base_price,
    39	            unit: selectedItem.base_unit || 'Unit',
    40	            unit_conversion_rate: 1,
    41	            vat_percentage: 0,
    42	            batch_no: null,
    43	            expiry_date: null
    44	        };
    45	        
    46	        onAddItem(newItem);
    47	        setSelectedItem(null);
    48	        setSearchItem('');
    49	    };
    50	
    51	    return (
    52	        <div className="mb-4">
    53	            <div className="flex space-x-2">
    54	                <div className="relative flex-1">
    55	                    <input
    56	                        type="text"
    57	                        placeholder="Cari nama atau kode item..."
    58	                        className="w-full p-3 border rounded-md"
    59	                        value={searchItem}
    60	                        onChange={(e) => {
    61	                            setSearchItem(e.target.value);
    62	                            setShowItemDropdown(true);
    63	                        }}
    64	                        onFocus={() => setShowItemDropdown(true)}
    65	                    />
    66	                    
    67	                    {showItemDropdown && searchItem && (
    68	                        <div className="absolute z-10 w-full mt-1 bg-white border rounded-md shadow-lg max-h-60 overflow-y-auto">
    69	                            {filteredItems.length === 0 ? (
    70	                                <div className="p-3 text-gray-500">Tidak ada item yang ditemukan</div>
    71	                            ) : (
    72	                                filteredItems.map(item => (
    73	                                    <div
    74	                                        key={item.id}
    75	                                        className="p-3 hover:bg-gray-100 cursor-pointer"
    76	                                        onClick={() => {
    77	                                            setSelectedItem(item);
    78	                                            setSearchItem(item.name);
    79	                                            setShowItemDropdown(false);
    80	                                        }}
    81	                                    >
    82	                                        <div><span className="font-semibold">{item.code}</span> - {item.name}</div>
    83	                                        <div className="text-sm text-gray-500">
    84	                                            Harga Dasar: {item.base_price.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' })}
    85	                                        </div>
    86	                                    </div>
    87	                                ))
    88	                            )}
    89	                        </div>
    90	                    )}
    91	                </div>
    92	                <Button
    93	                    type="button"
    94	                    onClick={addItem}
    95	                    disabled={!selectedItem}
    96	                    className="flex items-center whitespace-nowrap"
    97	                >
    98	                    <FaPlus className="mr-2" />
    99	                    Tambah Item
   100	                </Button>
   101	            </div>
   102	        </div>
   103	    );
   104	};
   105	
   106	export default ItemSearchBar;


===============================================
= File: ./src/components/purchases/PurchaseInfoForm.tsx 
===============================================

     1	import React from 'react';
     2	import { FormSection, FormField } from '../ui/FormComponents';
     3	import { Input } from '../ui/Input';
     4	import { PurchaseFormData } from '../../hooks/usePurchaseForm';
     5	
     6	interface PurchaseInformationFormProps {
     7	    formData: PurchaseFormData;
     8	    suppliers: Array<{ id: string; name: string }>;
     9	    handleChange: (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => void;
    10	}
    11	
    12	const PurchaseInformationForm: React.FC<PurchaseInformationFormProps> = ({
    13	    formData,
    14	    suppliers,
    15	    handleChange
    16	}) => {
    17	    return (
    18	        <FormSection title="Informasi Pembelian">
    19	            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
    20	                <FormField label="Supplier">
    21	                    <select
    22	                        name="supplier_id"
    23	                        value={formData.supplier_id}
    24	                        onChange={handleChange}
    25	                        className="w-full p-3 border rounded-md"
    26	                    >
    27	                        <option value="">-- Pilih Supplier --</option>
    28	                        {suppliers.map(supplier => (
    29	                            <option key={supplier.id} value={supplier.id}>
    30	                                {supplier.name}
    31	                            </option>
    32	                        ))}
    33	                    </select>
    34	                </FormField>
    35	                
    36	                <FormField label="Nomor Faktur">
    37	                    <Input
    38	                        name="invoice_number"
    39	                        value={formData.invoice_number}
    40	                        onChange={handleChange}
    41	                        placeholder="Masukkan nomor faktur"
    42	                    />
    43	                </FormField>
    44	                
    45	                <FormField label="Tanggal Pembelian">
    46	                    <Input
    47	                        type="date"
    48	                        name="date"
    49	                        value={formData.date}
    50	                        onChange={handleChange}
    51	                    />
    52	                </FormField>
    53	            </div>
    54	            
    55	            <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
    56	                <FormField label="Tanggal Jatuh Tempo">
    57	                    <Input
    58	                        type="date"
    59	                        name="due_date"
    60	                        value={formData.due_date}
    61	                        onChange={handleChange}
    62	                        min={formData.date}
    63	                    />
    64	                </FormField>
    65	
    66	                <FormField label="PPN Termasuk Harga">
    67	                    <div className="flex items-center h-full pt-2">
    68	                        <input
    69	                            type="checkbox"
    70	                            name="is_vat_included"
    71	                            checked={formData.is_vat_included}
    72	                            onChange={handleChange}
    73	                            className="h-5 w-5 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
    74	                        />
    75	                    </div>
    76	                </FormField>
    77	                
    78	                <FormField label="Persentase PPN">
    79	                    <div className="flex items-center">
    80	                        <Input
    81	                            type="number"
    82	                            name="vat_percentage"
    83	                            value={formData.vat_percentage}
    84	                            onChange={handleChange}
    85	                            min="0"
    86	                            max="100"
    87	                            className="w-16"
    88	                        />
    89	                        <span className="ml-1">%</span>
    90	                    </div>
    91	                </FormField>
    92	                
    93	                <FormField label="Status Pembayaran">
    94	                    <select
    95	                        name="payment_status"
    96	                        value={formData.payment_status}
    97	                        onChange={handleChange}
    98	                        className="w-full p-3 border rounded-md"
    99	                    >
   100	                        <option value="unpaid">Belum Dibayar</option>
   101	                        <option value="partial">Sebagian</option>
   102	                        <option value="paid">Lunas</option>
   103	                    </select>
   104	                </FormField>
   105	                
   106	                <FormField label="Metode Pembayaran">
   107	                    <select
   108	                        name="payment_method"
   109	                        value={formData.payment_method}
   110	                        onChange={handleChange}
   111	                        className="w-full p-3 border rounded-md"
   112	                    >
   113	                        <option value="cash">Tunai</option>
   114	                        <option value="transfer">Transfer</option>
   115	                        <option value="credit">Kredit</option>
   116	                    </select>
   117	                </FormField>
   118	            </div>
   119	            
   120	            <FormField label="Catatan">
   121	                <textarea
   122	                    name="notes"
   123	                    value={formData.notes}
   124	                    onChange={handleChange}
   125	                    className="w-full p-3 border rounded-md"
   126	                    rows={3}
   127	                />
   128	            </FormField>
   129	        </FormSection>
   130	    );
   131	};
   132	
   133	export default PurchaseInformationForm;


===============================================
= File: ./src/components/purchases/PurchaseItemsTable.tsx 
===============================================

     1	import React from 'react';
     2	import { FaTrash } from 'react-icons/fa';
     3	import { Table, TableHead, TableBody, TableRow, TableCell, TableHeader } from '../ui/Table';
     4	import { Button } from '../ui/Button';
     5	import { formatRupiah, extractNumericValue } from '../../lib/formatters';
     6	import { PurchaseItem } from '../../hooks/usePurchaseForm';
     7	
     8	interface PurchaseItemsTableProps {
     9	    purchaseItems: PurchaseItem[];
    10	    total: number;
    11	    isVatIncluded: boolean;
    12	    onUpdateItem: (id: string, field: 'quantity' | 'price' | 'discount', value: number) => void;
    13	    onRemoveItem: (id: string) => void;
    14	    onUpdateItemVat: (id: string, vatPercentage: number) => void;
    15	    onUpdateItemExpiry: (id: string, expiryDate: string) => void;
    16	    onUpdateItemBatchNo: (id: string, batchNo: string) => void;
    17	    onUnitChange: (id: string, unitName: string) => void;
    18	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    19	    getItemByID: (itemId: string) => any;
    20	}
    21	
    22	const PurchaseItemsTable: React.FC<PurchaseItemsTableProps> = ({
    23	    purchaseItems,
    24	    total,
    25	    isVatIncluded,
    26	    onUpdateItem,
    27	    onRemoveItem,
    28	    onUnitChange,
    29	    onUpdateItemVat,
    30	    onUpdateItemExpiry,
    31	    onUpdateItemBatchNo,
    32	    getItemByID
    33	}) => {
    34	    return (
    35	        <>
    36	            <Table>
    37	                <TableHead>
    38	                    <TableRow>
    39	                        <TableHeader className="w-12 text-center">No</TableHeader>
    40	                        <TableHeader className="w-24">Kode</TableHeader>
    41	                        <TableHeader className="w-full">Nama</TableHeader>
    42	                        <TableHeader className="w-28 text-center">Batch No.</TableHeader>
    43	                        <TableHeader className="w-32 text-center">Kadaluarsa</TableHeader>
    44	                        <TableHeader className="w-20 text-center">Jumlah</TableHeader>
    45	                        <TableHeader className="w-24 text-center">Satuan</TableHeader>
    46	                        <TableHeader className="w-28 text-right">Harga</TableHeader>
    47	                        <TableHeader className="w-10 text-right">Disc</TableHeader>
    48	                        {!isVatIncluded && <TableHeader className="w-10 text-right">VAT</TableHeader>}
    49	                        <TableHeader className="w-28 text-right">Subtotal</TableHeader>
    50	                        <TableHeader className="w-16 text-center">Aksi</TableHeader>
    51	                    </TableRow>
    52	                </TableHead>
    53	                <TableBody>
    54	                    {purchaseItems.length === 0 ? (
    55	                        <TableRow>
    56	                            <TableCell colSpan={12} className="text-center text-gray-500">
    57	                                Belum ada item ditambahkan
    58	                            </TableCell>
    59	                        </TableRow>
    60	                    ) : (
    61	                        purchaseItems.map((item, index) => (
    62	                            <TableRow key={item.id}>
    63	                                <TableCell className="text-center">{index + 1}</TableCell>
    64	                                <TableCell>{getItemByID(item.item_id)?.code || '-'}</TableCell>
    65	                                <TableCell>{item.item_name}</TableCell>
    66	                                <TableCell>
    67	                                    <input
    68	                                        type="text"
    69	                                        value={item.batch_no || ''}
    70	                                        onChange={(e) => onUpdateItemBatchNo(item.id, e.target.value)}
    71	                                        className="w-28 bg-transparent border-b border-gray-300 focus:border-primary focus:outline-none px-1 py-0.5 text-center"
    72	                                        placeholder="No Batch"
    73	                                    />
    74	                                </TableCell>
    75	                                <TableCell>
    76	                                    <input
    77	                                        type="date"
    78	                                        value={item.expiry_date || ''}
    79	                                        onChange={(e) => onUpdateItemExpiry(item.id, e.target.value)}
    80	                                        className="w-32 bg-transparent border-b border-gray-300 focus:border-primary focus:outline-none px-1 py-0.5 text-center"
    81	                                        min={new Date().toISOString().split('T')[0]}
    82	                                        title="Tanggal Kadaluarsa"
    83	                                    />
    84	                                </TableCell>
    85	                                <TableCell className="text-center">
    86	                                    <input
    87	                                        type="number"
    88	                                        onFocus={(e) => e.target.select()}
    89	                                        onClick={(e) => (e.target as HTMLInputElement).select()}
    90	                                        value={item.quantity}
    91	                                        onChange={(e) => {
    92	                                            const inputValue = e.target.value;
    93	                                            
    94	                                            // Izinkan input kosong untuk sementara agar user bisa mengetik ulang
    95	                                            if (inputValue === '') {
    96	                                                onUpdateItem(item.id, 'quantity', 0); // Gunakan 0 sementara
    97	                                                return;
    98	                                            }
    99	                                            
   100	                                            // Untuk input tidak kosong, parse dan update
   101	                                            const newValue = parseInt(inputValue, 10);
   102	                                            if (!isNaN(newValue) && newValue >= 0) {
   103	                                                onUpdateItem(item.id, 'quantity', newValue);
   104	                                            }
   105	                                        }}
   106	                                        onBlur={() => {
   107	                                            // Pastikan nilai minimum 1 ketika input kehilangan fokus
   108	                                            const numericValue = parseInt(item.quantity.toString(), 10);
   109	                                            onUpdateItem(item.id, 'quantity', numericValue < 1 ? 1 : numericValue);
   110	                                        }}
   111	                                        className="w-16 bg-transparent border-b border-gray-300 focus:border-primary focus:outline-none px-1 py-0.5 text-center"
   112	                                    />
   113	                                </TableCell>
   114	                                <TableCell className="text-center">
   115	                                    <select
   116	                                        value={item.unit}
   117	                                        onChange={(e) => onUnitChange(item.id, e.target.value)}
   118	                                        className="bg-transparent border-b border-gray-300 focus:border-primary focus:outline-none px-1 py-0.5 text-center appearance-none cursor-pointer"
   119	                                    >
   120	                                        <option value={getItemByID(item.item_id)?.base_unit || 'Unit'}>
   121	                                            {getItemByID(item.item_id)?.base_unit || 'Unit'}
   122	                                        </option>
   123	                                        {getItemByID(item.item_id)?.unit_conversions?.map((uc: { id: string; unit_name: string }) => (
   124	                                            <option key={uc.id} value={uc.unit_name}>{uc.unit_name}</option>
   125	                                        ))}
   126	                                    </select>
   127	                                </TableCell>
   128	                                <TableCell className="text-right">
   129	                                    <input
   130	                                        type="text"
   131	                                        value={item.price === 0 ? '' : formatRupiah(item.price)}
   132	                                        onChange={(e) => {
   133	                                            const numericValue = extractNumericValue(e.target.value);
   134	                                            onUpdateItem(item.id, 'price', numericValue);
   135	                                        }}
   136	                                        className="w-28 bg-transparent border-b border-gray-300 focus:border-primary focus:outline-none px-1 py-0.5 text-right"
   137	                                        placeholder="Rp 0"
   138	                                    />
   139	                                </TableCell>
   140	                                <TableCell className="text-right">
   141	                                    <input
   142	                                        type="text"
   143	                                        value={item.discount === 0 ? '' : `${item.discount}%`}
   144	                                        onChange={(e) => {
   145	                                            // Hapus tanda % jika ada
   146	                                            let inputValue = e.target.value;
   147	                                            if (inputValue.endsWith('%')) {
   148	                                                inputValue = inputValue.slice(0, -1);
   149	                                            }
   150	                                            
   151	                                            // Ambil nilai numerik saja tanpa %
   152	                                            const numericValue = parseInt(inputValue.replace(/[^\d]/g, '')) || 0;
   153	                                            onUpdateItem(item.id, 'discount', Math.min(numericValue, 100));
   154	                                        }}
   155	                                        className="w-16 bg-transparent border-b border-gray-300 focus:border-primary focus:outline-none px-1 py-0.5 text-right"
   156	                                        placeholder="0%"
   157	                                        onKeyDown={(e) => {
   158	                                            // Tangani backspace saat kursor berada di akhir input
   159	                                            if (e.key === 'Backspace' && 
   160	                                                item.discount > 0 && 
   161	                                                e.currentTarget.selectionStart === e.currentTarget.value.length) {
   162	                                                // Cegah perilaku default dan update nilai secara manual
   163	                                                e.preventDefault();
   164	                                                const newValue = Math.floor(item.discount / 10);
   165	                                                onUpdateItem(item.id, 'discount', newValue);
   166	                                            }
   167	                                        }}
   168	                                    />
   169	                                </TableCell>
   170	                                {!isVatIncluded && (
   171	                                    <TableCell className="text-right">
   172	                                        <input
   173	                                            type="text"
   174	                                            value={item.vat_percentage === 0 ? '' : `${item.vat_percentage}%`}
   175	                                            onChange={(e) => {
   176	                                                // Hapus tanda % jika ada
   177	                                                let inputValue = e.target.value;
   178	                                                if (inputValue.endsWith('%')) {
   179	                                                    inputValue = inputValue.slice(0, -1);
   180	                                                }
   181	                                                
   182	                                                // Ambil nilai numerik saja tanpa %
   183	                                                const numericValue = parseInt(inputValue.replace(/[^\d]/g, '')) || 0;
   184	                                                onUpdateItemVat(item.id, Math.min(numericValue, 100));
   185	                                            }}
   186	                                            className="w-16 bg-transparent border-b border-gray-300 focus:border-primary focus:outline-none px-1 py-0.5 text-right"
   187	                                            placeholder="0%"
   188	                                            onKeyDown={(e) => {
   189	                                                // Tangani backspace saat kursor berada di akhir input
   190	                                                if (e.key === 'Backspace' && 
   191	                                                    item.vat_percentage > 0 && 
   192	                                                    e.currentTarget.selectionStart === e.currentTarget.value.length) {
   193	                                                    // Cegah perilaku default dan update nilai secara manual
   194	                                                    e.preventDefault();
   195	                                                    const newValue = Math.floor(item.vat_percentage / 10);
   196	                                                    onUpdateItemVat(item.id, newValue);
   197	                                                }
   198	                                            }}
   199	                                        />
   200	                                    </TableCell>
   201	                                )}
   202	                                <TableCell className="text-right">
   203	                                    {item.subtotal.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' })}
   204	                                </TableCell>
   205	                                <TableCell className="text-center">
   206	                                    <Button
   207	                                        type="button"
   208	                                        variant="danger"
   209	                                        size="sm"
   210	                                        onClick={() => onRemoveItem(item.id)}
   211	                                    >
   212	                                        <FaTrash />
   213	                                    </Button>
   214	                                </TableCell>
   215	                            </TableRow>
   216	                        ))
   217	                    )}
   218	                </TableBody>
   219	            </Table>
   220	            
   221	            {/* Total display outside the table */}
   222	            <div className="flex justify-end items-center mt-4 font-semibold text-lg">
   223	                <div className="mr-4">Total:</div>
   224	                <div className="w-40 text-right">
   225	                    {total.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' })}
   226	                </div>
   227	            </div>
   228	        </>
   229	    );
   230	};
   231	
   232	export default PurchaseItemsTable;


===============================================
= File: ./src/components/tools/UnitConversionManager.tsx 
===============================================

     1	import { useEffect } from "react";
     2	import { Input } from "../ui/Input";
     3	import { Button } from "../ui/Button";
     4	import { Table, TableHead, TableBody, TableRow, TableCell, TableHeader } from "../ui/Table";
     5	import { FormSection, FormField } from "../ui/FormComponents";
     6	import { UseUnitConversionReturn } from "../../hooks/useUnitConversion";
     7	import { FaTrash } from "react-icons/fa";
     8	
     9	interface UnitConversionManagerProps {
    10	    unitConversionHook: UseUnitConversionReturn;
    11	}
    12	
    13	const UnitConversionManager: React.FC<UnitConversionManagerProps> = ({
    14	    unitConversionHook
    15	}) => {
    16	    const {
    17	        baseUnit,
    18	        // setBaseUnit,
    19	        basePrice,
    20	        // setBasePrice,
    21	        unitConversions,
    22	        addUnitConversion,
    23	        removeUnitConversion,
    24	        unitConversionFormData,
    25	        setUnitConversionFormData,
    26	        recalculateBasePrices,
    27	        availableUnits
    28	    } = unitConversionHook;
    29	
    30	    // Recalculate base prices when base price changes
    31	    useEffect(() => {
    32	        if (basePrice > 0 && unitConversions.length > 0) {
    33	            recalculateBasePrices();
    34	        }
    35	    // eslint-disable-next-line react-hooks/exhaustive-deps
    36	    }, [basePrice, recalculateBasePrices]);
    37	
    38	    // const handleBaseUnitChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    39	    //     const { name, value } = e.target;
    40	    //     if (name === "baseUnit") {
    41	    //         setBaseUnit(value);
    42	    //     } else if (name === "basePrice") {
    43	    //         setBasePrice(parseFloat(value) || 0);
    44	    //     }
    45	    // };
    46	
    47	    // Handler untuk form konversi satuan
    48	    const handleConversionFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    49	        const { name, value } = e.target;
    50	        setUnitConversionFormData({
    51	            ...unitConversionFormData,
    52	            [name]: name === "conversion" ? parseFloat(value) || 0 : value,
    53	        });
    54	    };
    55	
    56	    // Tambahkan konversi baru
    57	    const handleAddConversion = () => {
    58	        if (!unitConversionFormData.unit || unitConversionFormData.conversion <= 0) {
    59	            alert("Satuan dan konversi harus diisi dengan benar!");
    60	            return;
    61	        }
    62	
    63	        // Cek apakah satuan sudah ada
    64	        const existingUnit = unitConversions.find(uc => uc.unit.name === unitConversionFormData.unit);
    65	        if (existingUnit) {
    66	            alert("Satuan tersebut sudah ada dalam daftar!");
    67	            return;
    68	        }
    69	        
    70	        const selectedUnit = availableUnits.find(u => u.name === unitConversionFormData.unit);
    71	            if (!selectedUnit) {
    72	                alert("Satuan tidak valid!");
    73	            return;
    74	        }
    75	
    76	        addUnitConversion({
    77	            unit: selectedUnit,
    78	            conversion: unitConversionFormData.conversion,
    79	        });
    80	
    81	        // Reset form
    82	        setUnitConversionFormData({
    83	            unit: "",
    84	            conversion: 0,
    85	        });
    86	    };
    87	
    88	    return (
    89	        <FormSection title="Satuan dan Konversi">
    90	            <div>
    91	                <h3 className="text-lg font-medium mb-3">Konversi Satuan</h3>
    92	                <p className="text-sm text-gray-600 mb-3">
    93	                    Tentukan berapa banyak satuan turunan dalam satu satuan dasar.
    94	                </p>
    95	
    96	                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
    97	                    <FormField label="Satuan Konversi">
    98	                        <select
    99	                            name="unit"
   100	                            value={unitConversionFormData.unit}
   101	                            onChange={handleConversionFormChange}
   102	                            className="w-full p-3 border rounded-md"
   103	                        >
   104	                            <option value="">-- Pilih Satuan --</option>
   105	                            {availableUnits
   106	                                .filter(unit => unit.name !== baseUnit)
   107	                                .filter(unit => !unitConversions.some(uc => uc.unit.name === unit.name))
   108	                                .map(unit => (
   109	                                <option key={unit.id} value={unit.name}>
   110	                                    {unit.name}
   111	                                </option>
   112	                            ))}
   113	                        </select>
   114	                    </FormField>
   115	
   116	                    <FormField label={`1 ${baseUnit || 'satuan dasar'} = ? ${unitConversionFormData.unit || 'satuan'}`}>
   117	                        <div className="flex space-x-2">
   118	                            <Input
   119	                                name="conversion"
   120	                                value={unitConversionFormData.conversion || ""}
   121	                                onChange={handleConversionFormChange}
   122	                                type="number"
   123	                                min="1"
   124	                                placeholder="Jumlah satuan dasar"
   125	                                className="w-full"
   126	                            />
   127	                            <Button
   128	                                type="button"
   129	                                onClick={handleAddConversion}
   130	                                className="whitespace-nowrap"
   131	                            >
   132	                                Tambah Satuan
   133	                            </Button>
   134	                        </div>
   135	                    </FormField>
   136	                </div>
   137	
   138	                <div className="border rounded-lg overflow-hidden">
   139	                    <Table>
   140	                        <TableHead>
   141	                            <TableRow>
   142	                                <TableHeader>Satuan Turunan</TableHeader>
   143	                                <TableHeader>Konversi</TableHeader>
   144	                                <TableHeader>Harga Pokok</TableHeader>
   145	                                <TableHeader className="text-center">Aksi</TableHeader>
   146	                            </TableRow>
   147	                        </TableHead>
   148	                        <TableBody>
   149	                            {unitConversions.length === 0 ? (
   150	                                <TableRow>
   151	                                    <TableCell colSpan={4} className="text-center text-gray-500">
   152	                                        Belum ada data konversi
   153	                                    </TableCell>
   154	                                </TableRow>
   155	                            ) : (
   156	                                unitConversions.map((uc) => (
   157	                                    <TableRow key={uc.id}>
   158	                                        <TableCell>{uc.unit.name}</TableCell>
   159	                                        <TableCell>
   160	                                            1 {baseUnit} = {uc.conversion} {uc.unit.name}
   161	                                        </TableCell>
   162	                                        <TableCell>
   163	                                            {(uc.basePrice || 0).toLocaleString("id-ID", {
   164	                                                style: "currency",
   165	                                                currency: "IDR",
   166	                                            })}
   167	                                        </TableCell>
   168	                                        <TableCell className="text-center">
   169	                                            <Button
   170	                                                variant="danger"
   171	                                                size="sm"
   172	                                                onClick={() => removeUnitConversion(uc.id)}
   173	                                            >
   174	                                                <FaTrash />
   175	                                            </Button>
   176	                                        </TableCell>
   177	                                    </TableRow>
   178	                                ))
   179	                            )}
   180	                        </TableBody>
   181	                    </Table>
   182	                </div>
   183	
   184	                <div className="mt-4 text-sm text-gray-600">
   185	                    <ul className="list-disc pl-5 space-y-1">
   186	                        <li>Harga pokok satuan turunan dihitung dengan: Harga pokok satuan dasar ÷ jumlah satuan turunan.</li>
   187	                        <li className="text-red-500 font-semibold">PENTING: Disarankan untuk tidak mengubah satuan jika sudah terdapat transaksi yang berhubungan dengan item ini.</li>
   188	                    </ul>
   189	                </div>
   190	            </div>
   191	        </FormSection>
   192	    );
   193	};
   194	
   195	export default UnitConversionManager;


===============================================
= File: ./src/components/ui/AddItemCard.tsx 
===============================================

     1	import React from 'react';
     2	import { FaPlus } from 'react-icons/fa';
     3	import { Link } from 'react-router-dom';
     4	
     5	interface AddItemCardProps {
     6	    label: string;
     7	    to: string;
     8	    className?: string;
     9	}
    10	
    11	const AddItemCard: React.FC<AddItemCardProps> = ({ label, to, className }) => {
    12	    return (
    13	        <Link
    14	            to={to}
    15	            className={`group aspect-video h-48 md:h-56 border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center text-gray-400 hover:border-primary hover:text-primary hover:bg-blue-50/50 hover:shadow-lg transition-all duration-500 ease-in-out cursor-pointer transform hover:scale-105 ${className || ''}`}
    16	        >
    17	            <FaPlus className="text-4xl mb-2 transition-all duration-500 ease-in-out group-hover:scale-125 group-hover:rotate-90" />
    18	            <span className="text-sm font-medium transition-all duration-500 ease-in-out group-hover:font-bold">{label}</span>
    19	        </Link>
    20	    );
    21	};
    22	
    23	export default AddItemCard;


===============================================
= File: ./src/components/ui/Badge.tsx 
===============================================

     1	// src/components/ui/Badge.tsx
     2	import { classNames } from "../../lib/classNames";
     3	
     4	export type BadgeVariant =
     5	    | "primary"
     6	    | "secondary"
     7	    | "accent"
     8	    | "success"
     9	    | "warning"
    10	    | "danger";
    11	
    12	interface BadgeProps {
    13	    children: React.ReactNode;
    14	    variant?: BadgeVariant;
    15	    className?: string;
    16	}
    17	
    18	export const Badge = ({
    19	    children,
    20	    variant = "primary",
    21	    className,
    22	}: BadgeProps) => {
    23	    const variants = {
    24	        primary: "bg-blue-100 text-blue-800",
    25	        secondary: "bg-gray-100 text-gray-800",
    26	        accent: "bg-red-100 text-red-800",
    27	        success: "bg-green-100 text-green-800",
    28	        warning: "bg-yellow-100 text-yellow-800",
    29	        danger: "bg-red-100 text-red-800",
    30	    };
    31	
    32	    return (
    33	        <span
    34	            className={classNames(
    35	                "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium",
    36	                variants[variant],
    37	                className
    38	            )}
    39	        >
    40	            {children}
    41	        </span>
    42	    );
    43	};


===============================================
= File: ./src/components/ui/Button.tsx 
===============================================

     1	// src/components/ui/Button.tsx
     2	import { classNames } from "../../lib/classNames";
     3	
     4	export type ButtonVariant =
     5	    | "primary"
     6	    | "secondary"
     7	    | "accent"
     8	    | "outline"
     9	    | "text"
    10	    | "danger";
    11	export type ButtonSize = "sm" | "md" | "lg";
    12	
    13	export interface ButtonProps
    14	    extends React.ButtonHTMLAttributes<HTMLButtonElement> {
    15	    variant?: ButtonVariant;
    16	    size?: ButtonSize;
    17	    isLoading?: boolean;
    18	    fullWidth?: boolean;
    19	}
    20	
    21	export const Button = ({
    22	    children,
    23	    className,
    24	    variant = "primary",
    25	    size = "md",
    26	    isLoading = false,
    27	    fullWidth = false,
    28	    ...props
    29	}: ButtonProps) => {
    30	    const variants = {
    31	        primary: "rounded-md shadow-md bg-blue-500 flex items-center hover:bg-blue-600 text-white hover:text-white",
    32	        secondary: "rounded-md bg-blue-600 bg-secondary flex items-center hover:bg-blue-700 text-white hover:text-white",
    33	        accent: "bg-accent hover:bg-red-600 text-white",
    34	        outline: "border border-primary text-primary hover:bg-blue-50",
    35	        text: "bg-transparent hover:bg-opacity-10 focus:outline-none focus:ring-0 focus:shadow-none",
    36	        danger: "bg-red-600 hover:bg-red-700 text-white",
    37	    };
    38	
    39	    const sizes = {
    40	        sm: "px-3 py-1.5 text-sm",
    41	        md: "px-4 py-2",
    42	        lg: "px-6 py-3 text-lg",
    43	    };
    44	
    45	    const baseClasses = "font-medium rounded-md transition-colors disabled:opacity-50 disabled:cursor-not-allowed";
    46	    const focusClasses = variant === 'text' ? "" : "focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary";
    47	    
    48	    return (
    49	        <button
    50	            className={classNames(
    51	                baseClasses, focusClasses,
    52	                variants[variant],
    53	                sizes[size],
    54	                fullWidth ? "w-full" : "",
    55	                className
    56	            )}
    57	            disabled={isLoading || props.disabled}
    58	            {...props}
    59	        >
    60	            {isLoading ? (
    61	                <span className="flex items-center justify-center">
    62	                    <svg
    63	                        className="animate-spin -ml-1 mr-2 h-4 w-4 text-current"
    64	                        xmlns="http://www.w3.org/2000/svg"
    65	                        fill="none"
    66	                        viewBox="0 0 24 24"
    67	                    >
    68	                        <circle
    69	                            className="opacity-25"
    70	                            cx="12"
    71	                            cy="12"
    72	                            r="10"
    73	                            stroke="currentColor"
    74	                            strokeWidth="4"
    75	                        ></circle>
    76	                        <path
    77	                            className="opacity-75"
    78	                            fill="currentColor"
    79	                            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
    80	                        ></path>
    81	                    </svg>
    82	                    Loading...
    83	                </span>
    84	            ) : (
    85	                children
    86	            )}
    87	        </button>
    88	    );
    89	};


===============================================
= File: ./src/components/ui/Card.tsx 
===============================================

     1	// src/components/ui/Card.tsx
     2	import { classNames } from '../../lib/classNames';
     3	
     4	interface CardProps {
     5	    children: React.ReactNode;
     6	    className?: string;
     7	}
     8	
     9	export const Card = ({ children, className }: CardProps) => {
    10	    return (
    11	        <div className={classNames('bg-white p-6 rounded-lg shadow', className)}>
    12	            {children}
    13	        </div>
    14	    );
    15	};
    16	
    17	export const CardHeader = ({ children, className }: CardProps) => {
    18	    return (
    19	        <div className={classNames('mb-4', className)}>
    20	            {children}
    21	        </div>
    22	    );
    23	};
    24	
    25	export const CardTitle = ({ children, className }: CardProps) => {
    26	    return (
    27	        <h2 className={classNames('text-2xl font-semibold text-gray-800', className)}>
    28	            {children}
    29	        </h2>
    30	    );
    31	};
    32	
    33	export const CardContent = ({ children, className }: CardProps) => {
    34	    return (
    35	        <div className={classNames('', className)}>
    36	            {children}
    37	        </div>
    38	    );
    39	};
    40	
    41	export const CardFooter = ({ children, className }: CardProps) => {
    42	    return (
    43	        <div className={classNames('mt-4 pt-4 border-t', className)}>
    44	            {children}
    45	        </div>
    46	    );
    47	};


===============================================
= File: ./src/components/ui/ConfirmDialog.tsx 
===============================================

     1	// src/components/ui/ConfirmDialog.tsx
     2	import React, { createContext, useState, useContext, useCallback, Fragment } from 'react';
     3	import { createPortal } from 'react-dom';
     4	import { Button } from './Button';
     5	import { Transition, TransitionChild } from '@headlessui/react';
     6	
     7	// Context untuk mengelola state dialog
     8	interface ConfirmDialogContextType {
     9	    isOpen: boolean;
    10	    title: string;
    11	    message: string;
    12	    confirmText: string;
    13	    cancelText: string;
    14	    onConfirm: () => void;
    15	    onCancel: () => void;
    16	    variant: 'danger' | 'primary';
    17	    openConfirmDialog: (options: ConfirmDialogOptions) => void;
    18	    closeConfirmDialog: () => void;
    19	}
    20	
    21	interface ConfirmDialogOptions {
    22	    title: string;
    23	    message: string;
    24	    confirmText?: string;
    25	    cancelText?: string;
    26	    onConfirm: () => void;
    27	    onCancel?: () => void;
    28	    variant?: 'danger' | 'primary';
    29	}
    30	
    31	const initialState: ConfirmDialogContextType = {
    32	    isOpen: false,
    33	    title: '',
    34	    message: '',
    35	    confirmText: 'Ya',
    36	    cancelText: 'Batal',
    37	    onConfirm: () => { },
    38	    onCancel: () => { },
    39	    variant: 'primary',
    40	    openConfirmDialog: () => { },
    41	    closeConfirmDialog: () => { }
    42	};
    43	
    44	const ConfirmDialogContext = createContext<ConfirmDialogContextType>(initialState);
    45	
    46	// Provider untuk modal
    47	export const ConfirmDialogProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    48	    const [dialogState, setDialogState] = useState<Omit<ConfirmDialogContextType, 'openConfirmDialog' | 'closeConfirmDialog'>>(initialState);
    49	
    50	    // Fungsi untuk membuka dialog
    51	    const openConfirmDialog = useCallback((options: ConfirmDialogOptions) => {
    52	        setDialogState({
    53	            isOpen: true,
    54	            title: options.title,
    55	            message: options.message,
    56	            confirmText: options.confirmText || 'Ya',
    57	            cancelText: options.cancelText || 'Batal',
    58	            onConfirm: options.onConfirm,
    59	            onCancel: options.onCancel || (() => { }),
    60	            variant: options.variant || 'primary'
    61	        });
    62	    }, []);
    63	
    64	    // Fungsi untuk menutup dialog
    65	    const closeConfirmDialog = useCallback(() => {
    66	        setDialogState(state => ({
    67	            ...state,
    68	            isOpen: false
    69	        }));
    70	    }, []);
    71	
    72	    return (
    73	        <ConfirmDialogContext.Provider
    74	            value={{
    75	                ...dialogState,
    76	                openConfirmDialog,
    77	                closeConfirmDialog
    78	            }}
    79	        >
    80	            {children}
    81	            <ConfirmDialogComponent />
    82	        </ConfirmDialogContext.Provider>
    83	    );
    84	};
    85	
    86	// Hook untuk menggunakan confirm dialog
    87	// eslint-disable-next-line react-refresh/only-export-components
    88	export const useConfirmDialog = () => {
    89	    const context = useContext(ConfirmDialogContext);
    90	    if (!context) {
    91	        throw new Error('useConfirmDialog must be used within a ConfirmDialogProvider');
    92	    }
    93	    return context;
    94	};
    95	
    96	// Komponen dialog
    97	const ConfirmDialogComponent: React.FC = () => {
    98	    const {
    99	        isOpen,
   100	        title,
   101	        message,
   102	        confirmText,
   103	        cancelText,
   104	        onConfirm,
   105	        onCancel,
   106	        variant,
   107	        closeConfirmDialog
   108	    } = useContext(ConfirmDialogContext);
   109	
   110	    const handleConfirm = () => {
   111	        onConfirm();
   112	        closeConfirmDialog();
   113	    };
   114	
   115	    const handleCancel = () => {
   116	        onCancel();
   117	        closeConfirmDialog();
   118	    };
   119	
   120	    const handleBackdropClick = (e: React.MouseEvent<HTMLDivElement>) => {
   121	        if (e.target === e.currentTarget) {
   122	            handleCancel();
   123	        }
   124	    };
   125	
   126	    // Gunakan portal untuk merender dialog di luar hierarki komponen
   127	    return createPortal(
   128	        <Transition show={isOpen} as={Fragment}>
   129	            <div
   130	                className="fixed inset-0 z-50 flex items-center justify-center overflow-y-auto"
   131	                onClick={handleBackdropClick} // Backdrop click handler remains here
   132	            >
   133	                {/* Backdrop transition */}
   134	                <div
   135	                    className="fixed inset-0 bg-black/50 backdrop-blur-sm transition-opacity duration-300"
   136	                    aria-hidden="true"
   137	                />
   138	
   139	                {/* Dialog panel transition */}
   140	                <TransitionChild
   141	                    as={Fragment}
   142	                    enter="transition-all duration-300 ease-out"
   143	                    enterFrom="opacity-0 scale-95"
   144	                    enterTo="opacity-100 scale-100"
   145	                    leave="transition-all duration-200 ease-in"
   146	                    leaveFrom="opacity-100 scale-100"
   147	                    leaveTo="opacity-0 scale-95"
   148	                >
   149	                    <div
   150	                        className="relative bg-white rounded-lg shadow-xl max-w-md w-full mx-4 p-6"
   151	                    >
   152	                        <div className="text-lg font-semibold mb-2">{title}</div>
   153	                        <div className="text-gray-600 mb-6">{message}</div>
   154	
   155	                        <div className="flex justify-end space-x-3">
   156	                            <Button
   157	                                type="button"
   158	                                variant="outline"
   159	                                onClick={handleCancel}
   160	                            >
   161	                                {cancelText}
   162	                            </Button>
   163	                            <Button
   164	                                type="button"
   165	                                variant={variant}
   166	                                onClick={handleConfirm}
   167	                            >
   168	                                {confirmText}
   169	                            </Button>
   170	                        </div>
   171	                    </div>
   172	                </TransitionChild>
   173	            </div>
   174	        </Transition>,
   175	        document.body
   176	    );
   177	};
   178	
   179	export default ConfirmDialogProvider;


===============================================
= File: ./src/components/ui/DetailEditModal.tsx 
===============================================

     1	/* eslint-disable @typescript-eslint/no-explicit-any */
     2	// src/components/master-data/DetailEditModal.tsx
     3	import React, { useState } from 'react';
     4	import { FaEdit, FaCheck, FaTimes } from 'react-icons/fa';
     5	import { Button } from '../ui/Button';
     6	
     7	interface FieldConfig {
     8	    key: string;
     9	    label: string;
    10	    type?: 'text' | 'email' | 'tel' | 'textarea';
    11	    editable?: boolean;
    12	}
    13	
    14	interface DetailEditModalProps {
    15	    title: string;
    16	    data: Record<string, any>;
    17	    fields: FieldConfig[];
    18	    isOpen: boolean;
    19	    onClose: () => void;
    20	    onSave: (updatedData: Record<string, any>) => Promise<void>;
    21	    imageUrl?: string;
    22	    imagePlaceholder?: string;
    23	}
    24	
    25	const DetailEditModal: React.FC<DetailEditModalProps> = ({
    26	    title,
    27	    data,
    28	    fields,
    29	    isOpen,
    30	    onClose,
    31	    onSave,
    32	    imageUrl,
    33	    imagePlaceholder
    34	}) => {
    35	    const [editMode, setEditMode] = useState<Record<string, boolean>>({});
    36	    const [editValues, setEditValues] = useState<Record<string, any>>({});
    37	    const [loading, setLoading] = useState<Record<string, boolean>>({});
    38	
    39	    // Inisialisasi nilai editan dengan data saat ini
    40	    React.useEffect(() => {
    41	        if (isOpen && data) {
    42	            const initialValues: Record<string, any> = {};
    43	            fields.forEach(field => {
    44	                initialValues[field.key] = data[field.key] !== null ? data[field.key] : '';
    45	            });
    46	            setEditValues(initialValues);
    47	        }
    48	    }, [isOpen, data, fields]);
    49	
    50	    if (!isOpen) return null;
    51	
    52	    const toggleEdit = (key: string) => {
    53	        setEditMode(prev => ({
    54	            ...prev,
    55	            [key]: !prev[key]
    56	        }));
    57	    };
    58	
    59	    const handleChange = (key: string, value: any) => {
    60	        setEditValues(prev => ({
    61	            ...prev,
    62	            [key]: value
    63	        }));
    64	    };
    65	
    66	    const handleSaveField = async (key: string) => {
    67	        try {
    68	            setLoading(prev => ({ ...prev, [key]: true }));
    69	
    70	            // Buat object dengan hanya field yang diubah
    71	            const updatedData = { [key]: editValues[key] };
    72	            await onSave(updatedData);
    73	
    74	            // Toggle off edit mode setelah berhasil
    75	            toggleEdit(key);
    76	        } catch (error) {
    77	            console.error(`Error saving ${key}:`, error);
    78	        } finally {
    79	            setLoading(prev => ({ ...prev, [key]: false }));
    80	        }
    81	    };
    82	
    83	    const handleCancel = (key: string) => {
    84	        // Reset nilai ke data asli
    85	        setEditValues(prev => ({
    86	            ...prev,
    87	            [key]: data[key] !== null ? data[key] : ''
    88	        }));
    89	        toggleEdit(key);
    90	    };
    91	
    92	    return (
    93	        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center">
    94	            <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-hidden">
    95	                <div className="flex justify-between items-center p-4 border-b">
    96	                    <h2 className="text-xl font-semibold">{title}</h2>
    97	                    <Button
    98	                        variant="text"
    99	                        onClick={onClose}
   100	                        className="text-gray-500 hover:text-gray-700"
   101	                    >
   102	                        <FaTimes size={20} />
   103	                    </Button>
   104	                </div>
   105	
   106	                <div className="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
   107	                    {/* Gambar Header (jika ada) */}
   108	                    {(imageUrl || imagePlaceholder) && (
   109	                        <div className="flex justify-center mb-6">
   110	                            <div className="w-32 h-32 rounded-full overflow-hidden bg-gray-200">
   111	                                <img
   112	                                    src={imageUrl || imagePlaceholder}
   113	                                    alt={data.name || 'Detail'}
   114	                                    className="w-full h-full object-cover"
   115	                                />
   116	                            </div>
   117	                        </div>
   118	                    )}
   119	
   120	                    {/* Fields */}
   121	                    <div className="space-y-4">
   122	                        {fields.map(field => (
   123	                            <div key={field.key} className="bg-white rounded-md">
   124	                                <div className="flex justify-between items-center mb-1">
   125	                                    <label className="text-sm font-medium text-gray-600">{field.label}</label>
   126	                                    {field.editable !== false && (
   127	                                        <div className="flex space-x-2">
   128	                                            {editMode[field.key] ? (
   129	                                                <>
   130	                                                    <Button
   131	                                                        variant="text"
   132	                                                        size="sm"
   133	                                                        onClick={() => handleCancel(field.key)}
   134	                                                        className="text-gray-500 hover:text-gray-700 p-1"
   135	                                                    >
   136	                                                        <FaTimes className="text-red-500" />
   137	                                                    </Button>
   138	                                                    <Button
   139	                                                        variant="text"
   140	                                                        size="sm"
   141	                                                        onClick={() => handleSaveField(field.key)}
   142	                                                        className="text-gray-500 hover:text-gray-700 p-1"
   143	                                                        disabled={loading[field.key]}
   144	                                                    >
   145	                                                        {loading[field.key] ? (
   146	                                                            <span className="w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin inline-block"></span>
   147	                                                        ) : (
   148	                                                            <FaCheck className="text-green-500" />
   149	                                                        )}
   150	                                                    </Button>
   151	                                                </>
   152	                                            ) : (
   153	                                                <Button
   154	                                                    variant="text"
   155	                                                    size="sm"
   156	                                                    onClick={() => toggleEdit(field.key)}
   157	                                                    className="text-gray-500 hover:text-gray-700 p-1"
   158	                                                >
   159	                                                    <FaEdit />
   160	                                                </Button>
   161	                                            )}
   162	                                        </div>
   163	                                    )}
   164	                                </div>
   165	
   166	                                {editMode[field.key] ? (
   167	                                    field.type === 'textarea' ? (
   168	                                        <textarea
   169	                                            value={editValues[field.key] || ''}
   170	                                            onChange={(e) => handleChange(field.key, e.target.value)}
   171	                                            className="w-full p-2 border rounded-md focus:ring-blue-500 focus:border-blue-500"
   172	                                            rows={3}
   173	                                        />
   174	                                    ) : (
   175	                                        <input
   176	                                            type={field.type || 'text'}
   177	                                            value={editValues[field.key] || ''}
   178	                                            onChange={(e) => handleChange(field.key, e.target.value)}
   179	                                            className="w-full p-2 border rounded-md focus:ring-blue-500 focus:border-blue-500"
   180	                                        />
   181	                                    )
   182	                                ) : (
   183	                                    <div className="p-2 bg-gray-50 rounded-md min-h-[40px]">
   184	                                        {data[field.key] || (
   185	                                            <span className="text-gray-400 italic">Tidak ada data</span>
   186	                                        )}
   187	                                    </div>
   188	                                )}
   189	                            </div>
   190	                        ))}
   191	                    </div>
   192	                </div>
   193	
   194	                <div className="p-4 border-t flex justify-end">
   195	                    <Button variant="outline" onClick={onClose}>
   196	                        Tutup
   197	                    </Button>
   198	                </div>
   199	            </div>
   200	        </div>
   201	    );
   202	};
   203	
   204	export default DetailEditModal;


===============================================
= File: ./src/components/ui/FormActions.tsx 
===============================================

     1	// src/components/ui/FormActions.tsx
     2	import { FaSave, FaTimes } from 'react-icons/fa';
     3	import { Button } from './Button';
     4	
     5	interface FormActionsProps {
     6	    onCancel: () => void;
     7	    isSaving: boolean;
     8	    isDisabled?: boolean;
     9	    cancelText?: string;
    10	    saveText?: string;
    11	}
    12	
    13	export const FormActions: React.FC<FormActionsProps> = ({
    14	    onCancel,
    15	    isSaving,
    16	    isDisabled = false,
    17	    cancelText = 'Batal',
    18	    saveText = 'Simpan'
    19	}) => {
    20	    return (
    21	        <div className="flex justify-between w-full">
    22	            <Button
    23	                type="button"
    24	                variant="outline"
    25	                onClick={onCancel}
    26	            >
    27	                <div className="flex items-center">
    28	                    <FaTimes className="mr-2" /> <span>{cancelText}</span>
    29	                </div>
    30	            </Button>
    31	            <Button 
    32	                type="submit"
    33	                disabled={isSaving || isDisabled}
    34	                isLoading={isSaving}
    35	            >
    36	                <FaSave className="mr-2" /> {saveText}
    37	            </Button>
    38	        </div>
    39	    );
    40	};


===============================================
= File: ./src/components/ui/FormComponents.tsx 
===============================================

     1	// src/components/ui/FormComponents.tsx
     2	import { classNames } from "../../lib/classNames";
     3	
     4	// FormSection component
     5	interface FormSectionProps {
     6	    title: string;
     7	    children: React.ReactNode;
     8	    className?: string;
     9	}
    10	
    11	export const FormSection: React.FC<FormSectionProps> = ({ title, children, className }) => {
    12	    return (
    13	        <div className={classNames("border border-gray-200 rounded-lg mb-6", className)}>
    14	            <h2 className="text-lg font-semibold bg-gray-100 p-3 border-b">
    15	                {title}
    16	            </h2>
    17	            <div className="p-4 space-y-4">
    18	                {children}
    19	            </div>
    20	        </div>
    21	    );
    22	};
    23	
    24	// FormField component
    25	interface FormFieldProps {
    26	    label: string;
    27	    children: React.ReactNode;
    28	    className?: string;
    29	}
    30	
    31	export const FormField: React.FC<FormFieldProps> = ({ label, children, className }) => {
    32	    return (
    33	        <div className={className}>
    34	            <label className="block text-sm font-medium text-gray-700 mb-1">
    35	                {label}
    36	            </label>
    37	            {children}
    38	        </div>
    39	    );
    40	};


===============================================
= File: ./src/components/ui/ImageCard.tsx 
===============================================

     1	import React from 'react';
     2	
     3	interface ImageCardProps {
     4	    id: string;
     5	    title: string;
     6	    subtitle?: string;
     7	    imageUrl?: string;
     8	    fallbackImage?: string;
     9	    onClick?: () => void;
    10	    className?: string;
    11	}
    12	
    13	const ImageCard: React.FC<ImageCardProps> = ({
    14	    id,
    15	    title,
    16	    subtitle,
    17	    imageUrl,
    18	    fallbackImage,
    19	    onClick,
    20	    className
    21	}) => {
    22	    return (
    23	        <div
    24	            className={`group relative aspect-video h-48 md:h-56 bg-gray-300 rounded-lg shadow-lg overflow-hidden cursor-pointer transform transition-all duration-500 ease-in-out hover:scale-105 hover:shadow-xl ${className || ''}`}
    25	            onClick={onClick}
    26	        >
    27	            {/* Background Image */}
    28	            <img
    29	                src={imageUrl || fallbackImage || `https://picsum.photos/seed/${id}/400/300`}
    30	                alt={`Image for ${title}`}
    31	                className="absolute inset-0 w-full h-full object-cover transition-transform duration-500 ease-in-out group-hover:scale-105"
    32	            />
    33	
    34	            {/* Overlay with content on hover */}
    35	            <div className="absolute inset-0 p-4 bg-white/70 backdrop-blur-sm flex flex-col justify-end opacity-0 group-hover:opacity-100 transition-opacity duration-500 ease-in-out">
    36	                <h3 className="text-gray-800 font-semibold truncate text-lg mb-1">
    37	                    {title}
    38	                </h3>
    39	                {subtitle && (
    40	                    <p className="text-gray-600 text-sm line-clamp-3">{subtitle}</p>
    41	                )}
    42	            </div>
    43	        </div>
    44	    );
    45	};
    46	
    47	export default ImageCard;


===============================================
= File: ./src/components/ui/Input.tsx 
===============================================

     1	// src/components/ui/Input.tsx
     2	import { classNames } from '../../lib/classNames';
     3	
     4	export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
     5	    label?: string;
     6	    error?: string;
     7	    fullWidth?: boolean;
     8	}
     9	
    10	export const Input = ({
    11	    label,
    12	    error,
    13	    className,
    14	    fullWidth = true,
    15	    ...props
    16	}: InputProps) => {
    17	    return (
    18	        <div className={fullWidth ? 'w-full' : ''}>
    19	            {label && (
    20	                <label className="block text-gray-700 mb-2" htmlFor={props.id}>
    21	                    {label}
    22	                </label>
    23	            )}
    24	            <input
    25	                className={classNames(
    26	                    'p-3 border rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent',
    27	                    error ? 'border-red-500' : 'border-gray-300',
    28	                    fullWidth ? 'w-full' : '',
    29	                    className
    30	                )}
    31	                {...props}
    32	            />
    33	            {error && <p className="mt-1 text-sm text-red-600">{error}</p>}
    34	        </div>
    35	    );
    36	};


===============================================
= File: ./src/components/ui/Loading.tsx 
===============================================

     1	import { classNames } from "../../lib/classNames";
     2	
     3	interface LoadingProps {
     4	    className?: string;
     5	    message?: string;
     6	}
     7	
     8	export const Loading = ({ className, message = "" }: LoadingProps) => (
     9	    <div className={classNames("text-center py-6", className)}>
    10	        <div className="inline-block animate-spin rounded-full h-8 w-8 border-4 border-primary border-t-transparent"></div>
    11	        <p className="mt-2 text-gray-600">{message}</p>
    12	    </div>
    13	);


===============================================
= File: ./src/components/ui/Pagination.tsx 
===============================================

     1	// src/components/ui/Pagination.tsx
     2	import { classNames } from "../../lib/classNames";
     3	import { Button } from "./Button";
     4	
     5	export interface PaginationProps {
     6	    currentPage: number;
     7	    totalPages: number;
     8	    totalItems: number;
     9	    itemsPerPage: number;
    10	    itemsCount: number;
    11	    onPageChange: (page: number) => void;
    12	    onItemsPerPageChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;
    13	    className?: string;
    14	}
    15	
    16	export const Pagination = ({
    17	    currentPage,
    18	    totalPages,
    19	    // totalItems,
    20	    itemsPerPage,
    21	    // itemsCount,
    22	    onPageChange,
    23	    onItemsPerPageChange,
    24	    className,
    25	}: PaginationProps) => {
    26	    // const pageNumbers = [];
    27	    // Sudah tidak memerlukan pageNumbers untuk tampilan semua halaman
    28	
    29	    // Fungsi untuk menangani perubahan jumlah item per halaman
    30	    const handleItemsPerPageClick = (value: number) => {
    31	        const event = {
    32	            target: { value: value.toString() }
    33	        } as React.ChangeEvent<HTMLSelectElement>;
    34	        onItemsPerPageChange(event);
    35	    };
    36	
    37	    return (
    38	        <div className={classNames("flex justify-between items-center mt-4 gap-4", className)}>
    39	            {/* Items per page selection - left side */}
    40	            <div className="flex items-center rounded-full bg-zinc-100 p-1 shadow-md text-gray-700 overflow-hidden">
    41	                <button 
    42	                    className={classNames(
    43	                        "px-3 py-1.5 rounded-full focus:outline-none transition-all duration-300 ease-in-out", 
    44	                        itemsPerPage === 10 ? "bg-blue-500 text-white font-medium shadow-sm transform scale-105" : "hover:bg-blue-100 hover:text-blue-600"
    45	                    )}
    46	                    onClick={() => handleItemsPerPageClick(10)}
    47	                >
    48	                    {itemsPerPage === 10 ? "10 items" : "10"}
    49	                </button>
    50	                <button 
    51	                    className={classNames(
    52	                        "px-3 py-1.5 rounded-full focus:outline-none transition-all duration-300 ease-in-out", 
    53	                        itemsPerPage === 20 ? "bg-blue-500 text-white font-medium shadow-sm transform scale-105" : "hover:bg-blue-100 hover:text-blue-600"
    54	                    )}
    55	                    onClick={() => handleItemsPerPageClick(20)}
    56	                >
    57	                    {itemsPerPage === 20 ? "20 items" : "20"}
    58	                </button>
    59	                <button 
    60	                    className={classNames(
    61	                        "px-3 py-1.5 rounded-full focus:outline-none transition-all duration-300 ease-in-out", 
    62	                        itemsPerPage === 40 ? "bg-blue-500 text-white font-medium shadow-sm transform scale-105" : "hover:bg-blue-100 hover:text-blue-600"
    63	                    )}
    64	                    onClick={() => handleItemsPerPageClick(40)}
    65	                >
    66	                    {itemsPerPage === 40 ? "40 items" : "40"}
    67	                </button>
    68	            </div>
    69	
    70	            {/* Page navigation - right side */}
    71	            <div className="flex items-center rounded-full bg-primary p-1 shadow-md text-white overflow-hidden">
    72	                <Button
    73	                    variant="text"
    74	                    size="sm"
    75	                    onClick={() => onPageChange(currentPage - 1)}
    76	                    disabled={currentPage === 1}
    77	                    className={classNames("px-3 py-1.5 rounded-full text-white focus:ring-0 focus:outline-none transition-all duration-300", currentPage === 1 ? "opacity-50 cursor-not-allowed" : "hover:bg-blue-600")}
    78	                >
    79	                    &lt;
    80	                </Button>
    81	
    82	                <div className="px-3 py-1.5 font-medium">
    83	                    {currentPage} of {totalPages}
    84	                </div>
    85	
    86	                <Button
    87	                    variant="text"
    88	                    size="sm"
    89	                    onClick={() => onPageChange(currentPage + 1)}
    90	                    disabled={currentPage === totalPages || totalPages === 0}
    91	                    className={classNames("px-3 py-1.5 rounded-full text-white focus:ring-0 focus:outline-none transition-all duration-300", (currentPage === totalPages || totalPages === 0) ? "opacity-50 cursor-not-allowed" : "hover:bg-blue-600")}
    92	                >
    93	                    &gt;
    94	                </Button>
    95	            </div>
    96	        </div>
    97	    );
    98	};


===============================================
= File: ./src/components/ui/Table.tsx 
===============================================

     1	// src/components/ui/Table.tsx
     2	import { classNames } from '../../lib/classNames';
     3	
     4	interface TableProps {
     5	    children: React.ReactNode;
     6	    className?: string;
     7	}
     8	
     9	interface TableCellProps extends TableProps {
    10	    colSpan?: number;
    11	    rowSpan?: number;
    12	    align?: 'left' | 'center' | 'right';
    13	}
    14	
    15	export const Table = ({ children, className }: TableProps) => {
    16	    return (
    17	        <div className={classNames('overflow-x-auto rounded-lg shadow', className)}>
    18	            <table className="min-w-full bg-white rounded-lg overflow-hidden">
    19	                {children}
    20	            </table>
    21	        </div>
    22	    );
    23	};
    24	
    25	export const TableHead = ({ children, className }: TableProps) => {
    26	    return (
    27	        <thead className={classNames('bg-gray-50 text-gray-700 border-b border-gray-200', className)}>
    28	            {children}
    29	        </thead>
    30	    );
    31	};
    32	
    33	export const TableBody = ({ children, className }: TableProps) => {
    34	    return (
    35	        <tbody className={classNames('divide-y divide-gray-100 bg-white', className)}>
    36	            {children}
    37	        </tbody>
    38	    );
    39	};
    40	
    41	export const TableRow = ({ children, className }: TableProps) => {
    42	    return (
    43	        <tr className={classNames('transition-colors duration-150 hover:bg-gray-100 even:bg-gray-50/30', className)}>
    44	            {children}
    45	        </tr>
    46	    );
    47	};
    48	
    49	export const TableCell = ({ children, className }: TableCellProps) => {
    50	    return (
    51	        <td className={classNames('py-3 px-3 text-gray-700 align-middle', className)}>
    52	            {children}
    53	        </td>
    54	    );
    55	};
    56	
    57	export const TableHeader = ({ children, className }: TableProps) => {
    58	    return (
    59	        <th className={classNames('py-3 px-3 text-left bg-gray-200 text-gray-700 uppercase tracking-wider text-sm', className)}>
    60	            {children}
    61	        </th>
    62	    );
    63	};


===============================================
= File: ./src/hooks/useAddItemForm.ts 
===============================================

     1	import { useState, useEffect } from "react";
     2	import { useNavigate } from "react-router-dom";
     3	import { supabase } from "../lib/supabase";
     4	import { useUnitConversion } from "./useUnitConversion";
     5	import { formatRupiah, extractNumericValue } from "../lib/formatters";
     6	
     7	interface Category {
     8	    id: string;
     9	    name: string;
    10	}
    11	
    12	interface MedicineType {
    13	    id: string;
    14	    name: string;
    15	}
    16	
    17	interface Unit {
    18	    id: string;
    19	    name: string;
    20	}
    21	
    22	interface FormData {
    23	    code: string;
    24	    name: string;
    25	    type_id: string;
    26	    category_id: string;
    27	    unit_id: string;
    28	    rack: string;
    29	    description: string;
    30	    base_price: number;
    31	    sell_price: number;
    32	    min_stock: number;
    33	    is_active: boolean;
    34	    is_medicine: boolean;
    35	    has_expiry_date: boolean;
    36	}
    37	
    38	// interface UnitConversion {
    39	//     unit: {
    40	//         id: string;
    41	//     };
    42	//     conversion: number;
    43	//     basePrice: number;
    44	// }
    45	
    46	export const useAddItemForm = () => {
    47	    const navigate = useNavigate();
    48	    const [loading, setLoading] = useState(false);
    49	    const [saving, setSaving] = useState(false);
    50	    const [categories, setCategories] = useState<Category[]>([]);
    51	    const [types, setTypes] = useState<MedicineType[]>([]);
    52	    const [units, setUnits] = useState<Unit[]>([]);
    53	    // State untuk nilai yang ditampilkan dengan format mata uang
    54	    const [displayBasePrice, setDisplayBasePrice] = useState('');
    55	    const [displaySellPrice, setDisplaySellPrice] = useState('');
    56	
    57	    // Hook untuk konversi satuan
    58	    const unitConversionHook = useUnitConversion();
    59	
    60	    // Form state
    61	    const [formData, setFormData] = useState<FormData>({
    62	        code: "", // Kode akan dibuat otomatis
    63	        name: "",
    64	        type_id: "",
    65	        category_id: "",
    66	        unit_id: "",
    67	        rack: "",
    68	        description: "",
    69	        base_price: 0,
    70	        sell_price: 0,
    71	        min_stock: 10,
    72	        is_active: true,
    73	        is_medicine: true,
    74	        has_expiry_date: false,
    75	    });
    76	
    77	    // Fungsi untuk memperbarui formData secara lebih mudah
    78	    const updateFormData = (newData: Partial<FormData>) => {
    79	        setFormData(prev => ({
    80	            ...prev,
    81	            ...newData
    82	        }));
    83	    };
    84	
    85	    // Fungsi helper untuk menghasilkan kode dinamis
    86	    const generateTypeCode = (typeId: string): string => {
    87	        const selectedType = types.find(type => type.id === typeId);
    88	        if (!selectedType) return "X";
    89	
    90	        // Gunakan kode khusus untuk setiap jenis obat
    91	        const typeName = selectedType.name.toLowerCase();
    92	        if (typeName.includes("bebas") && !typeName.includes("terbatas")) return "B";
    93	        if (typeName.includes("bebas terbatas")) return "T";
    94	        if (typeName.includes("keras")) return "K";
    95	        if (typeName.includes("narkotika")) return "N";
    96	        if (typeName.includes("fitofarmaka")) return "F";
    97	        if (typeName.includes("herbal")) return "H";
    98	        
    99	        // Fallback ke huruf pertama jika tidak ada yang cocok
   100	        return selectedType.name.charAt(0).toUpperCase();
   101	    };
   102	    
   103	    const generateUnitCode = (unitId: string): string => {
   104	        const selectedUnit = units.find(unit => unit.id === unitId);
   105	        if (!selectedUnit) return "X";
   106	
   107	        // Ambil huruf pertama dari nama unit
   108	        return selectedUnit.name.charAt(0).toUpperCase();
   109	    };
   110	
   111	    const generateCategoryCode = (categoryId: string): string => {
   112	        const selectedCategory = categories.find(category => category.id === categoryId);
   113	        if (!selectedCategory) return "XX";
   114	
   115	        const name = selectedCategory.name;
   116	
   117	        // Cek apakah kategori dimulai dengan "Anti"
   118	        if (name.toLowerCase().startsWith("anti")) {
   119	            // Untuk kategori yang dimulai dengan "Anti"
   120	            // Ambil "A" dari "Anti" dan huruf pertama dari kata selanjutnya
   121	            const baseName = name.slice(4); // Hilangkan "Anti" dari awal
   122	            if (baseName.length > 0) {
   123	                return "A" + baseName.charAt(0).toUpperCase();
   124	            }
   125	            return "A";
   126	        } else {
   127	            // Untuk kategori lainnya, ambil 2 huruf pertama
   128	            if (name.length >= 2) {
   129	                return name.substring(0, 2).toUpperCase();
   130	            } else if (name.length === 1) {
   131	                return name.toUpperCase() + "X";
   132	            } else {
   133	                return "XX";
   134	            }
   135	        }
   136	    };
   137	
   138	    useEffect(() => {
   139	        fetchMasterData();
   140	    }, []);
   141	
   142	    useEffect(() => {
   143	        const generateItemCode = async () => {
   144	            // Jika tipe, kategori, atau satuan belum dipilih, keluar dari fungsi
   145	            if (!formData.type_id || !formData.category_id || !formData.unit_id)
   146	                return;
   147	
   148	            const typeCode = generateTypeCode(formData.type_id);
   149	            const unitCode = generateUnitCode(formData.unit_id);
   150	            const categoryCode = generateCategoryCode(formData.category_id);
   151	
   152	            const codePrefix = `${typeCode}${unitCode}${categoryCode}`;
   153	
   154	            // Cek database untuk mendapatkan urutan terakhir
   155	            try {
   156	                const { data } = await supabase
   157	                    .from("items")
   158	                    .select("code")
   159	                    .ilike("code", `${codePrefix}%`)
   160	                    .order("code", { ascending: false });
   161	
   162	                let sequence = 1; // Default mulai dari 1
   163	
   164	                if (data && data.length > 0) {
   165	                    // Ekstrak nomor urut dari kode yang sudah ada
   166	                    const lastSequenceStr = data[0].code.substring(codePrefix.length);
   167	                    const lastSequence = parseInt(lastSequenceStr);
   168	
   169	                    if (!isNaN(lastSequence)) {
   170	                        sequence = lastSequence + 1;
   171	                    }
   172	                }
   173	
   174	                // Format: membuat kode 2 digit (01, 02, ..., dst)
   175	                const sequenceStr = sequence.toString().padStart(2, "0");
   176	                const generatedCode = `${codePrefix}${sequenceStr}`;
   177	
   178	                // Update form
   179	                setFormData(prevFormData => ({
   180	                    ...prevFormData,
   181	                    code: generatedCode,
   182	                }));
   183	            } catch (error) {
   184	                console.error("Error generating item code:", error);
   185	            }
   186	        };
   187	
   188	        // Hanya generate code jika data master sudah dimuat dan semua pilihan sudah dipilih
   189	        if (formData.type_id && formData.category_id && formData.unit_id &&
   190	            categories.length > 0 && types.length > 0 && units.length > 0) {
   191	            generateItemCode();
   192	        }
   193	    // eslint-disable-next-line react-hooks/exhaustive-deps
   194	    }, [formData.type_id, formData.category_id, formData.unit_id, categories, types, units]);
   195	
   196	    const fetchMasterData = async () => {
   197	        setLoading(true);
   198	        try {
   199	            // Fetch categories
   200	            const { data: categoriesData } = await supabase
   201	                .from("item_categories")
   202	                .select("id, name")
   203	                .order("name");
   204	
   205	            // Fetch types
   206	            const { data: typesData } = await supabase
   207	                .from("item_types")
   208	                .select("id, name")
   209	                .order("name");
   210	
   211	            // Fetch units
   212	            const { data: unitsData } = await supabase
   213	                .from("item_units")
   214	                .select("id, name")
   215	                .order("name");
   216	
   217	            if (categoriesData) setCategories(categoriesData);
   218	            if (typesData) setTypes(typesData);
   219	            if (unitsData) setUnits(unitsData);
   220	        } catch (error) {
   221	            console.error("Error fetching master data:", error);
   222	        } finally {
   223	            setLoading(false);
   224	        }
   225	    };
   226	
   227	    const handleChange = (
   228	        e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
   229	        const { name, value, type } = e.target as HTMLInputElement;
   230	
   231	        if (name === "base_price" || name === "sell_price") {
   232	            // Untuk input harga
   233	            const numericInt = extractNumericValue(value);
   234	
   235	            // Update formData dengan nilai numerik
   236	            setFormData({
   237	                ...formData,
   238	                [name]: numericInt
   239	            });
   240	
   241	            // Update display value dengan format Rupiah
   242	            const formattedValue = formatRupiah(numericInt);
   243	            if (name === "base_price") {
   244	                setDisplayBasePrice(formattedValue);
   245	            } else {
   246	                setDisplaySellPrice(formattedValue);
   247	            }
   248	        } else if (type === "checkbox") {
   249	            const { checked } = e.target as HTMLInputElement;
   250	            setFormData({
   251	                ...formData,
   252	                [name]: checked,
   253	            });
   254	        } else if (type === "number") {
   255	            setFormData({
   256	                ...formData,
   257	                [name]: parseFloat(value) || 0,
   258	            });
   259	        } else {
   260	            setFormData({
   261	                ...formData,
   262	                [name]: value,
   263	            });
   264	        }
   265	    };
   266	
   267	    // Modifikasi handleChange untuk menjamin pemicu generate kode
   268	    const handleSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
   269	        const { name, value } = e.target;
   270	        setFormData(prevFormData => ({
   271	            ...prevFormData,
   272	            [name]: value,
   273	        }));
   274	    };
   275	
   276	    const handleSubmit = async (e: React.FormEvent) => {
   277	        e.preventDefault();
   278	        setSaving(true);
   279	
   280	        try {
   281	            // Check jika nama obat sudah ada
   282	            const { data: existingMedicine } = await supabase
   283	                .from("items")
   284	                .select("id")
   285	                .eq("name", formData.name);
   286	
   287	            if (existingMedicine && existingMedicine.length > 0) {
   288	                alert("Nama obat sudah ada. Silakan gunakan nama lain.");
   289	                setSaving(false);
   290	                return;
   291	            }
   292	
   293	            // 1. Insert item utama (dengan satuan dasar)
   294	            const mainItemData = {
   295	                name: formData.name,
   296	                category_id: formData.category_id,
   297	                type_id: formData.type_id,
   298	                unit_id: formData.unit_id,
   299	                base_price: formData.base_price,
   300	                sell_price: formData.sell_price,
   301	                stock: 0, // Default stok awal 0
   302	                min_stock: formData.min_stock,
   303	                description: formData.description || null,
   304	                is_active: formData.is_active,
   305	                rack: formData.rack || null,
   306	                code: formData.code,
   307	                is_medicine: formData.is_medicine,
   308	                base_unit: unitConversionHook.baseUnit,
   309	                unit_conversions: JSON.stringify(unitConversionHook.conversions),
   310	                has_expiry_date: formData.has_expiry_date,
   311	            };
   312	
   313	            const { data: newItem, error: mainError } = await supabase
   314	                .from("items")
   315	                .insert(mainItemData)
   316	                .select("id")
   317	                .single();
   318	
   319	            if (mainError) throw mainError;
   320	
   321	            // 2. Insert unit conversions ke tabel terpisah
   322	            if (unitConversionHook.conversions.length > 0 && newItem) {
   323	                // eslint-disable-next-line @typescript-eslint/no-explicit-any
   324	                const conversionRecords = unitConversionHook.conversions.map((uc: { unit: { id: any; name: any; }; conversion: any; basePrice: any; }) => ({
   325	                    item_id: newItem.id,
   326	                    unit_name: uc.unit.name,
   327	                    conversion_rate: uc.conversion,
   328	                    base_price: uc.basePrice,
   329	                    created_at: new Date()
   330	                }));
   331	
   332	                // Insert ke tabel unit_conversions
   333	                const { error: conversionError } = await supabase
   334	                    .from("unit_conversions")
   335	                    .insert(conversionRecords);
   336	
   337	                if (conversionError) {
   338	                    console.error("Error saving unit conversions:", conversionError);
   339	                    // Lanjutkan meskipun ada error pada konversi unit
   340	                }
   341	            }
   342	
   343	            // Redirect ke halaman daftar obat
   344	            navigate("/master-data/items");
   345	        } catch (error) {
   346	            console.error("Error saving item:", error);
   347	            alert("Gagal menyimpan data item. Silakan coba lagi.");
   348	        } finally {
   349	            setSaving(false);
   350	        }
   351	    };
   352	
   353	    return {
   354	        formData,
   355	        displayBasePrice,
   356	        displaySellPrice,
   357	        categories,
   358	        types,
   359	        units,
   360	        loading,
   361	        saving,
   362	        handleChange,
   363	        handleSelectChange,
   364	        handleSubmit,
   365	        unitConversionHook,
   366	        updateFormData
   367	    };
   368	};


===============================================
= File: ./src/hooks/useItemSelection.ts 
===============================================

     1	import { useState, useEffect } from 'react';
     2	import { supabase } from '../lib/supabase';
     3	
     4	export interface Item {
     5	    id: string;
     6	    name: string;
     7	    code?: string;
     8	    base_price: number;
     9	    stock: number;
    10	    unit_id: string;
    11	    base_unit: string;
    12	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    13	    unit_conversions: any[];
    14	}
    15	
    16	export const useItemSelection = () => {
    17	    const [items, setItems] = useState<Item[]>([]);
    18	    const [searchItem, setSearchItem] = useState('');
    19	    const [showItemDropdown, setShowItemDropdown] = useState(false);
    20	    const [selectedItem, setSelectedItem] = useState<Item | null>(null);
    21	
    22	    useEffect(() => {
    23	        fetchItems();
    24	    }, []);
    25	
    26	    const fetchItems = async () => {
    27	        try {
    28	            const { data, error } = await supabase
    29	                .from('items')
    30	                .select('id, name, code, base_price, stock, unit_id, base_unit, unit_conversions')
    31	                .order('name');
    32	                
    33	            if (error) throw error;
    34	            setItems(data || []);
    35	        } catch (error) {
    36	            console.error('Error fetching items:', error);
    37	        }
    38	    };
    39	    
    40	    const getItemByID = (itemId: string): Item | undefined => {
    41	        const item = items.find(item => item.id === itemId);
    42	        if (item) {
    43	            // Parse unit_conversions if it's a string
    44	            if (typeof item.unit_conversions === 'string') {
    45	                try {
    46	                    item.unit_conversions = JSON.parse(item.unit_conversions || '[]');
    47	                // eslint-disable-next-line @typescript-eslint/no-unused-vars
    48	                } catch (e) {
    49	                    item.unit_conversions = [];
    50	                }
    51	            }
    52	            // Ensure unit_conversions is always an array
    53	            item.unit_conversions = item.unit_conversions || [];
    54	        }
    55	        return item;
    56	    };
    57	
    58	    // Filter items based on search input
    59	    const filteredItems = items.filter(item =>
    60	        item.name.toLowerCase().includes(searchItem.toLowerCase()) || 
    61	        (item.code && item.code.toLowerCase().includes(searchItem.toLowerCase()))
    62	    );
    63	
    64	    return {
    65	        items,
    66	        searchItem,
    67	        setSearchItem,
    68	        showItemDropdown,
    69	        setShowItemDropdown,
    70	        selectedItem,
    71	        setSelectedItem,
    72	        filteredItems,
    73	        getItemByID
    74	    };
    75	};


===============================================
= File: ./src/hooks/usePurchaseForm.ts 
===============================================

     1	import { useState, useEffect } from 'react';
     2	import { useNavigate } from 'react-router-dom';
     3	import { supabase } from '../lib/supabase';
     4	
     5	interface Supplier {
     6	    id: string;
     7	    name: string;
     8	}
     9	
    10	export interface PurchaseFormData {
    11	    supplier_id: string;
    12	    invoice_number: string;
    13	    date: string;
    14	    due_date: string;
    15	    payment_status: string;
    16	    payment_method: string;
    17	    notes: string;
    18	    vat_percentage: number;
    19	    is_vat_included: boolean;
    20	}
    21	
    22	export interface PurchaseItem {
    23	    id: string;
    24	    item_id: string;
    25	    item_name: string;
    26	    quantity: number;
    27	    price: number;
    28	    discount: number;
    29	    subtotal: number;
    30	    unit: string;
    31	    vat_percentage: number;
    32	    batch_no: string | null;
    33	    expiry_date: string | null;
    34	    unit_conversion_rate: number;
    35	}
    36	
    37	export const usePurchaseForm = () => {
    38	    const navigate = useNavigate();
    39	    const [loading, setLoading] = useState(false);
    40	    const [suppliers, setSuppliers] = useState<Supplier[]>([]);
    41	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    42	    const [companyProfile, setCompanyProfile] = useState<any>(null);
    43	    const [purchaseItems, setPurchaseItems] = useState<PurchaseItem[]>([]);
    44	    
    45	    // Form data
    46	    const [formData, setFormData] = useState<PurchaseFormData>({
    47	        supplier_id: '',
    48	        invoice_number: '',
    49	        date: new Date().toISOString().slice(0, 10),
    50	        due_date: '',
    51	        payment_status: 'unpaid',
    52	        payment_method: 'cash',
    53	        vat_percentage: 11.0,
    54	        is_vat_included: true,
    55	        notes: ''
    56	    });
    57	    
    58	    // Calculate total
    59	    const total = purchaseItems.reduce((sum, item) => sum + item.subtotal, 0);
    60	    
    61	    useEffect(() => {
    62	        fetchSuppliers();
    63	        fetchCompanyProfile();
    64	    }, []);
    65	    
    66	    const fetchCompanyProfile = async () => {
    67	        try {
    68	            const { data, error } = await supabase
    69	                .from('company_profiles')
    70	                .select('*')
    71	                .single();
    72	                
    73	            if (error) {
    74	                console.error('Error fetching company profile:', error);
    75	                return;
    76	            }
    77	            
    78	            if (data) {
    79	                setCompanyProfile(data);
    80	            }
    81	        } catch (error) {
    82	            console.error('Error fetching company profile:', error);
    83	        }
    84	    };
    85	
    86	    const fetchSuppliers = async () => {
    87	        try {
    88	            const { data, error } = await supabase
    89	                .from('suppliers')
    90	                .select('id, name')
    91	                .order('name');
    92	                
    93	            if (error) throw error;
    94	            setSuppliers(data || []);
    95	        } catch (error) {
    96	            console.error('Error fetching suppliers:', error);
    97	        }
    98	    };
    99	    
   100	    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
   101	        const { name, value, type, checked } = e.target as HTMLInputElement;
   102	        setFormData({
   103	            ...formData,
   104	            [name]: type === 'checkbox' ? checked : value
   105	        });
   106	    };
   107	
   108	    const addItem = (newItem: PurchaseItem) => {
   109	        const newItems = [...purchaseItems, {
   110	            ...newItem,
   111	            vat_percentage: 0,
   112	            batch_no: null,
   113	            expiry_date: null,
   114	            unit: newItem.unit || 'Unit',
   115	            unit_conversion_rate: 1
   116	        }];
   117	        recalculateSubtotal(newItems);
   118	        setPurchaseItems(newItems);
   119	    };
   120	    
   121	    const updateItem = (id: string, field: 'quantity' | 'price' | 'discount', value: number) => {
   122	        const updatedItems = purchaseItems.map(item => {
   123	            if (item.id === id) {
   124	                const quantity = field === 'quantity' ? value : item.quantity;
   125	                const price = field === 'price' ? value : item.price;
   126	                const discount = field === 'discount' ? value : item.discount;
   127	                
   128	                // Hitung subtotal dengan diskon
   129	                let subtotal = quantity * price;
   130	                if (discount > 0) {
   131	                    const discountAmount = subtotal * (discount / 100);
   132	                    subtotal -= discountAmount;
   133	                }
   134	                
   135	                // Tambahkan VAT jika tidak termasuk
   136	                if (item.vat_percentage > 0 && !formData.is_vat_included) {
   137	                    const vatAmount = subtotal * (item.vat_percentage / 100);
   138	                    subtotal += vatAmount;
   139	                }
   140	                return {
   141	                    ...item,
   142	                    [field]: value,
   143	                    subtotal: subtotal
   144	                };
   145	            }
   146	            return item;
   147	        });
   148	        
   149	        setPurchaseItems(updatedItems);
   150	    };
   151	    
   152	    // Fungsi untuk memperbarui VAT per item
   153	    const updateItemVat = (id: string, vatPercentage: number) => {
   154	        const updatedItems = purchaseItems.map(item => {
   155	            if (item.id === id) {
   156	                // Hitung subtotal dengan diskon dan VAT baru
   157	                let subtotal = item.quantity * item.price;
   158	                if (item.discount > 0) {
   159	                    const discountAmount = subtotal * (item.discount / 100);
   160	                    subtotal -= discountAmount;
   161	                }
   162	                
   163	                // Tambahkan VAT jika tidak termasuk
   164	                if (vatPercentage > 0 && !formData.is_vat_included) {
   165	                    const vatAmount = subtotal * (vatPercentage / 100);
   166	                    subtotal += vatAmount;
   167	                }
   168	                
   169	                return {
   170	                    ...item,
   171	                    vat_percentage: vatPercentage,
   172	                    subtotal: subtotal
   173	                };
   174	            }
   175	            return item;
   176	        });
   177	        
   178	        setPurchaseItems(updatedItems);
   179	    };
   180	
   181	    // Fungsi untuk memperbarui tanggal kadaluarsa
   182	    const updateItemExpiry = (id: string, expiryDate: string) => {
   183	        setPurchaseItems(purchaseItems.map(item => 
   184	            item.id === id ? {...item, expiry_date: expiryDate} : item
   185	        ));
   186	    };
   187	
   188	    // Fungsi untuk memperbarui nomor batch
   189	    const updateItemBatchNo = (id: string, batchNo: string) => {
   190	        setPurchaseItems(purchaseItems.map(item => 
   191	            item.id === id ? {...item, batch_no: batchNo} : item
   192	        ));
   193	    };
   194	
   195	    // Fungsi untuk menghitung ulang semua subtotal
   196	    const recalculateSubtotal = (items = purchaseItems) => {
   197	        return items.map(item => {
   198	            let subtotal = item.quantity * item.price;
   199	            if (item.discount > 0) {
   200	                const discountAmount = subtotal * (item.discount / 100);
   201	                subtotal -= discountAmount;
   202	            }
   203	            
   204	            if (item.vat_percentage > 0 && !formData.is_vat_included) {
   205	                const vatAmount = subtotal * (item.vat_percentage / 100);
   206	                subtotal += vatAmount;
   207	            }
   208	            
   209	            return {
   210	                ...item,
   211	                subtotal: subtotal
   212	            };
   213	        });
   214	    };
   215	    
   216	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
   217	    const handleUnitChange = (id: string, unitName: string, getItemByID: (id: string) => any) => {
   218	        const updatedItems = purchaseItems.map(item => {
   219	            if (item.id === id) {
   220	                const itemData = getItemByID(item.item_id);
   221	                if (!itemData) return item;
   222	                
   223	                let price = itemData.base_price;
   224	                let conversionRate = 1;
   225	                
   226	                // Jika bukan satuan dasar, cari harga berdasarkan konversi
   227	                if (unitName !== itemData.base_unit) {
   228	                    const unitConversion = itemData.unit_conversions?.find((uc: { unit_name: string; }) => uc.unit_name === unitName);
   229	                    if (unitConversion) {
   230	                        price = unitConversion.base_price || itemData.base_price / unitConversion.conversion_rate;
   231	                        conversionRate = unitConversion.conversion_rate;
   232	                    }
   233	                }
   234	
   235	                const discountAmount = price * item.quantity * (item.discount / 100);
   236	                
   237	                return {
   238	                    ...item,
   239	                    unit: unitName,
   240	                    price: price,
   241	                    subtotal: price * item.quantity - discountAmount,
   242	                    unit_conversion_rate: conversionRate
   243	                };
   244	            }
   245	            return item;
   246	        });
   247	        
   248	        setPurchaseItems(updatedItems);
   249	    };
   250	    
   251	    const removeItem = (id: string) => {
   252	        setPurchaseItems(purchaseItems.filter(item => item.id !== id));
   253	    };
   254	    
   255	    // Calculate total VAT amount
   256	    const calculateTotalVat = () => {
   257	        return purchaseItems.reduce((total, item) => {
   258	            if (item.vat_percentage > 0) {
   259	                const subtotalBeforeVat = item.subtotal / (1 + item.vat_percentage / 100);
   260	                const vatAmount = item.subtotal - subtotalBeforeVat;
   261	                return total + vatAmount;
   262	            }
   263	            return total;
   264	        }, 0);
   265	    };
   266	    
   267	    const handleSubmit = async (e: React.FormEvent) => {
   268	        e.preventDefault();
   269	        
   270	        if (purchaseItems.length === 0) {
   271	            alert('Silakan tambahkan minimal satu item');
   272	            return;
   273	        }
   274	        
   275	        try {
   276	            setLoading(true);
   277	            
   278	            // Insert purchase record
   279	            const { data: purchaseData, error: purchaseError } = await supabase
   280	                .from('purchases')
   281	                .insert({
   282	                    supplier_id: formData.supplier_id || null,
   283	                    customer_name: companyProfile?.name || null,
   284	                    customer_address: companyProfile?.address || null,
   285	                    invoice_number: formData.invoice_number,
   286	                    date: formData.date,
   287	                    due_date: formData.due_date || null,
   288	                    total: total,
   289	                    payment_status: formData.payment_status,
   290	                    payment_method: formData.payment_method, 
   291	                    vat_percentage: formData.vat_percentage,
   292	                    is_vat_included: formData.is_vat_included,
   293	                    vat_amount: calculateTotalVat(),
   294	                    notes: formData.notes || null
   295	                })
   296	                .select('id')
   297	                .single();
   298	                
   299	            if (purchaseError) throw purchaseError; 
   300	            
   301	            // Insert purchase items
   302	            const purchaseItemsData = purchaseItems.map(item => ({
   303	                purchase_id: purchaseData.id,
   304	                item_id: item.item_id,
   305	                quantity: item.quantity,
   306	                discount: item.discount,
   307	                price: item.price,
   308	                subtotal: item.subtotal,
   309	                unit: item.unit,
   310	                vat_percentage: item.vat_percentage,
   311	                batch_no: item.batch_no,
   312	                expiry_date: item.expiry_date
   313	            }));
   314	            
   315	            const { error: itemsError } = await supabase
   316	                .from('purchase_items')
   317	                .insert(purchaseItemsData);
   318	                
   319	            if (itemsError) throw itemsError;
   320	            
   321	            // Update item stocks
   322	            for (const item of purchaseItems) {
   323	                // Ambil data item untuk mendapatkan satuan dasar, stok saat ini, dan konversi
   324	                const { data: itemData } = await supabase
   325	                    .from('items')
   326	                    .select('stock, base_unit, unit_conversions')
   327	                    .eq('id', item.item_id)
   328	                    .single();
   329	                
   330	                if (itemData) {
   331	                    let quantityInBaseUnit = item.quantity;
   332	                    
   333	                    // Jika satuan pembelian berbeda dengan satuan dasar, konversikan
   334	                    if (item.unit !== itemData.base_unit) {
   335	                        const unitConversion = itemData.unit_conversions.find(
   336	                            (uc: { unit_name: string; }) => uc.unit_name === item.unit
   337	                        );
   338	                        
   339	                        if (unitConversion) {
   340	                            // Konversikan ke satuan dasar
   341	                            quantityInBaseUnit = item.quantity / unitConversion.conversion_rate;
   342	                        }
   343	                    }
   344	                    
   345	                    // Hitung stok baru dan update
   346	                    const newStock = (itemData.stock || 0) + quantityInBaseUnit;
   347	                    await supabase
   348	                        .from('items').update({ stock: newStock }).eq('id', item.item_id);
   349	                }
   350	            }
   351	            
   352	            navigate('/purchases');
   353	        } catch (error) {
   354	            console.error('Error creating purchase:', error);
   355	            alert('Gagal menyimpan pembelian. Silakan coba lagi.');
   356	        } finally {
   357	            setLoading(false);
   358	        }
   359	    };
   360	
   361	    return {
   362	        formData,
   363	        suppliers,
   364	        purchaseItems,
   365	        total,
   366	        loading,
   367	        handleChange,
   368	        addItem,
   369	        updateItem,
   370	        updateItemVat,
   371	        updateItemExpiry,
   372	        updateItemBatchNo,
   373	        handleUnitChange,
   374	        removeItem,
   375	        handleSubmit
   376	    };
   377	};


===============================================
= File: ./src/hooks/useUnitConversion.ts 
===============================================

     1	import { useState, useEffect, useCallback } from "react";
     2	import { supabase } from "../lib/supabase";
     3	
     4	export interface UnitConversion {
     5	    id: string;
     6	    unit: {
     7	        id: string;
     8	        name: string;
     9	    };
    10	    conversion: number;
    11	    basePrice: number;
    12	}
    13	
    14	export interface UseUnitConversionReturn {
    15	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    16	    conversions: any;
    17	    baseUnit: string;
    18	    setBaseUnit: React.Dispatch<React.SetStateAction<string>>;
    19	    basePrice: number;
    20	    setBasePrice: React.Dispatch<React.SetStateAction<number>>;
    21	    unitConversions: UnitConversion[];
    22	    addUnitConversion: (unitConversion: Omit<UnitConversion, "id" | "basePrice">) => void;
    23	    removeUnitConversion: (id: string) => void;
    24	    unitConversionFormData: {
    25	        unit: string;
    26	        conversion: number;
    27	    };
    28	    setUnitConversionFormData: React.Dispatch<React.SetStateAction<{
    29	        unit: string;
    30	        conversion: number;
    31	    }>>;
    32	    recalculateBasePrices: () => void;
    33	    availableUnits: UnitData[];
    34	}
    35	
    36	export interface UnitData {
    37	    id: string;
    38	    name: string;
    39	}
    40	
    41	export const useUnitConversion = (): UseUnitConversionReturn => {
    42	    const [baseUnit, setBaseUnit] = useState<string>("");
    43	    const [basePrice, setBasePrice] = useState<number>(0);
    44	    const [unitConversions, setUnitConversions] = useState<UnitConversion[]>([]);
    45	    const [availableUnits, setAvailableUnits] = useState<UnitData[]>([]);
    46	
    47	    const [unitConversionFormData, setUnitConversionFormData] = useState({
    48	        unit: "",
    49	        conversion: 0,
    50	    });
    51	
    52	    // Fetch available units from database
    53	    useEffect(() => {
    54	        const fetchUnits = async () => {
    55	            const { data } = await supabase
    56	                .from("item_units")
    57	                .select("id, name")
    58	                .order("name");
    59	            
    60	            if (data) {
    61	                setAvailableUnits(data);
    62	            }
    63	        };
    64	
    65	        fetchUnits();
    66	    }, []);
    67	
    68	    // Fungsi untuk menambah konversi satuan
    69	    const addUnitConversion = useCallback((unitConversion: Omit<UnitConversion, "id" | "basePrice">) => {
    70	        // Hitung harga per unit kecil (misal: per tablet)
    71	        // Jika 1 strip = 10 tablet dan harga strip 50.000,
    72	        // maka harga per tablet = 50.000 / 10 = 5.000
    73	        const calculatedBasePrice = basePrice / unitConversion.conversion;
    74	        
    75	        const newUnitConversion: UnitConversion = {
    76	            ...unitConversion,
    77	            id: Date.now().toString(),
    78	            basePrice: calculatedBasePrice,
    79	        };
    80	        setUnitConversions(prevConversions => [...prevConversions, newUnitConversion]);
    81	    }, [basePrice]);
    82	
    83	    // Fungsi untuk menghapus konversi satuan
    84	    const removeUnitConversion = useCallback((id: string) => {
    85	        setUnitConversions(prevConversions => prevConversions.filter(uc => uc.id !== id));
    86	    }, []);
    87	
    88	    // Menghitung ulang harga pokok untuk semua konversi berdasarkan harga pokok dasar
    89	    const recalculateBasePrices = useCallback(() => {
    90	        if (basePrice <= 0 || unitConversions.length === 0) return;
    91	        
    92	        setUnitConversions(prevConversions => 
    93	            prevConversions.map(uc => ({
    94	                ...uc,
    95	                basePrice: basePrice > 0 ? (basePrice / uc.conversion) : 0
    96	            }))
    97	        );
    98	    // eslint-disable-next-line react-hooks/exhaustive-deps
    99	    }, [basePrice]);
   100	
   101	    return {
   102	        baseUnit,
   103	        setBaseUnit,
   104	        basePrice,
   105	        setBasePrice,
   106	        conversions: unitConversions,
   107	        unitConversions,
   108	        addUnitConversion,
   109	        removeUnitConversion,
   110	        unitConversionFormData,
   111	        setUnitConversionFormData,
   112	        recalculateBasePrices,
   113	        availableUnits
   114	    };
   115	};


===============================================
= File: ./src/index.css 
===============================================

     1	@tailwind base;
     2	@tailwind components;
     3	@tailwind utilities;
     4	
     5	:root {
     6	  font-family: 'Open Sans', sans-serif;
     7	  line-height: 1.5;
     8	  /* font-weight: 400; */
     9	  font-synthesis: none;
    10	  text-rendering: optimizeLegibility;
    11	  -webkit-font-smoothing: antialiased;
    12	  -moz-osx-font-smoothing: grayscale;
    13	}
    14	
    15	a {
    16	  /* font-weight: 500; */
    17	  color: #646cff;
    18	  text-decoration: inherit;
    19	}
    20	a:hover {
    21	  color: #1a73e8;
    22	}
    23	
    24	body {
    25	  margin: 0;
    26	  min-width: 320px;
    27	  min-height: 100vh;
    28	  color: #213547;
    29	  background-color: #ffffff;
    30	}
    31	
    32	h1 {
    33	  font-size: 3.2em;
    34	  line-height: 1.1;
    35	}
    36	
    37	@media print {
    38	  @page {
    39	    size: A4;
    40	    margin: 5mm;
    41	  }
    42	  
    43	  body {
    44	    -webkit-print-color-adjust: exact;
    45	    print-color-adjust: exact;
    46	    background-color: white !important;
    47	    font-size: 12px !important;
    48	  }
    49	  
    50	  .print\:hidden {
    51	    display: none !important;
    52	  }
    53	
    54	  .faktur-a4 {
    55	    width: 100% !important;
    56	    min-height: auto !important;
    57	    padding: 0 !important;
    58	    margin: 0 !important;
    59	    box-shadow: none !important;
    60	    border: none !important;
    61	  }
    62	  
    63	  .print\:shadow-none {
    64	    box-shadow: none !important;
    65	  }
    66	}
    67	
    68	/* Custom Scrollbar Styling */
    69	/* Untuk Webkit (Chrome, Safari, Edge baru) */
    70	::-webkit-scrollbar {
    71	  width: 6px;
    72	  height: 6px;
    73	}
    74	
    75	::-webkit-scrollbar-track {
    76	  background: rgba(0, 0, 0, 0.02);
    77	  border-radius: 10px;
    78	}
    79	
    80	::-webkit-scrollbar-thumb {
    81	  background: rgba(26, 115, 232, 0.3);
    82	  border-radius: 10px;
    83	  transition: all 0.3s ease;
    84	}
    85	
    86	::-webkit-scrollbar-thumb:hover {
    87	  background: rgba(26, 115, 232, 0.5);
    88	}
    89	
    90	/* Untuk Firefox */
    91	* {
    92	  scrollbar-width: thin;
    93	  scrollbar-color: rgba(26, 115, 232, 0.3) rgba(0, 0, 0, 0.02);
    94	}
    95	
    96	/* Kelas untuk menghilangkan scrollbar jika diperlukan */
    97	.scrollbar-hidden {
    98	  scrollbar-width: none;
    99	  -ms-overflow-style: none;
   100	}
   101	
   102	.scrollbar-hidden::-webkit-scrollbar {
   103	  display: none;
   104	}
   105	
   106	.faktur-a4 {
   107	  width: 210mm;
   108	  min-height: 297mm;
   109	  padding: 10mm;
   110	  margin: 0 auto;
   111	  background: white;
   112	}


===============================================
= File: ./src/lib/classNames.ts 
===============================================

     1	export function classNames(...classes: (string | boolean | undefined | null)[]): string {
     2	    return classes.filter(Boolean).join(' ');
     3	}


===============================================
= File: ./src/lib/formatters.ts 
===============================================

     1	// src/lib/formatters.ts
     2	export function formatRupiah(angka: number): string {
     3	    return new Intl.NumberFormat('id-ID', {
     4	        style: 'currency',
     5	        currency: 'IDR',
     6	        minimumFractionDigits: 0,
     7	        maximumFractionDigits: 0
     8	    }).format(angka);
     9	}
    10	
    11	export function formatPercentage(value: number): string {
    12	    return `${value}%`;
    13	}
    14	
    15	export function extractNumericValue(value: string): number {
    16	    const numericValue = value.replace(/[^\d]/g, '');
    17	    return numericValue ? parseInt(numericValue) : 0;
    18	}


===============================================
= File: ./src/lib/queryUtils.ts 
===============================================

     1	import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
     2	import { supabase } from './supabase';
     3	
     4	// Fungsi untuk mengambil data dengan cache
     5	export function useSupabaseQuery(key, fetcher, options = {}) {
     6	  return useQuery({
     7	    queryKey: Array.isArray(key) ? key : [key],
     8	    queryFn: fetcher,
     9	    ...options,
    10	  });
    11	}
    12	
    13	// Fungsi untuk mutasi data dengan invalidasi cache otomatis
    14	export function useSupabaseMutation(key, mutationFn, options = {}) {
    15	  const queryClient = useQueryClient();
    16	  
    17	  return useMutation({
    18	    mutationFn,
    19	    onSuccess: (data, variables, context) => {
    20	      // Invalidasi cache setelah mutasi berhasil
    21	      if (Array.isArray(key)) {
    22	        queryClient.invalidateQueries({ queryKey: key });
    23	      } else {
    24	        queryClient.invalidateQueries({ queryKey: [key] });
    25	      }
    26	      
    27	      if (options.onSuccess) {
    28	        options.onSuccess(data, variables, context);
    29	      }
    30	    },
    31	    ...options,
    32	  });
    33	}
    34	
    35	// Fungsi untuk mendengarkan perubahan data di Supabase
    36	export function useSupabaseSubscription(tableName, onDataChange) {
    37	  const queryClient = useQueryClient();
    38	  
    39	  React.useEffect(() => {
    40	    const subscription = supabase
    41	      .channel(`public:${tableName}`)
    42	      .on('postgres_changes', 
    43	          { event: '*', schema: 'public', table: tableName }, 
    44	          (payload) => {
    45	            // Eksekusi callback yang diberikan
    46	            if (onDataChange) {
    47	              onDataChange(payload);
    48	            }
    49	            
    50	            // Invalidasi query terkait
    51	            queryClient.invalidateQueries({ queryKey: [tableName] });
    52	          })
    53	      .subscribe();
    54	      
    55	    return () => {
    56	      supabase.removeChannel(subscription);
    57	    };
    58	  }, [tableName, onDataChange, queryClient]);
    59	}


===============================================
= File: ./src/lib/supabase.ts 
===============================================

     1	import { createClient } from '@supabase/supabase-js'
     2	
     3	const supabaseUrl = import.meta.env.VITE_SUPABASE_URL as string
     4	const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY as string
     5	
     6	export const supabase = createClient(supabaseUrl, supabaseAnonKey)


===============================================
= File: ./src/main.tsx 
===============================================

     1	import { StrictMode } from 'react'
     2	import { createRoot } from 'react-dom/client'
     3	import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
     4	import { ReactQueryDevtools } from '@tanstack/react-query-devtools'
     5	import './index.css'
     6	import App from './App.tsx'
     7	
     8	// Buat instance QueryClient
     9	const queryClient = new QueryClient()
    10	
    11	createRoot(document.getElementById('root')!).render(
    12	  <StrictMode>
    13	    <QueryClientProvider client={queryClient}>
    14	      <App />
    15	      <ReactQueryDevtools initialIsOpen={false} />
    16	    </QueryClientProvider>
    17	  </StrictMode>,
    18	)


===============================================
= File: ./src/pages/auth/Login.tsx 
===============================================

     1	// src/pages/auth/Login.tsx
     2	import { useState } from 'react';
     3	import { Button } from '../../components/ui/Button';
     4	import { Input } from '../../components/ui/Input';
     5	import { useAuthStore } from '../../store/authStore';
     6	
     7	const Login = () => {
     8	    const { login, error, loading } = useAuthStore();
     9	    const [email, setEmail] = useState('');
    10	    const [password, setPassword] = useState('');
    11	
    12	    const handleSubmit = async (e: React.FormEvent) => {
    13	        e.preventDefault();
    14	        await login(email, password);
    15	    };
    16	
    17	    return (
    18	        <div className="min-h-screen flex items-center justify-center bg-gray-100">
    19	            <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
    20	                <h1 className="text-2xl font-bold text-center text-primary mb-6">Apotek & Klinik Login</h1>
    21	                
    22	                {error && (
    23	                    <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
    24	                        {error}
    25	                    </div>
    26	                )}
    27	                
    28	                <form onSubmit={handleSubmit}>
    29	                    <div className="mb-4">
    30	                        <Input 
    31	                            label="Email"
    32	                            type="email"
    33	                            value={email}
    34	                            onChange={(e) => setEmail(e.target.value)}
    35	                            required
    36	                        />
    37	                    </div>
    38	                
    39	                    <Input 
    40	                        label="Password"
    41	                        type="password"
    42	                        className="mb-6"
    43	                        value={password}
    44	                        onChange={(e) => setPassword(e.target.value)}
    45	                        required
    46	                    />
    47	                
    48	                    <Button
    49	                        type="submit"
    50	                        variant="primary"
    51	                        fullWidth
    52	                        isLoading={loading}
    53	                    >
    54	                        Login
    55	                    </Button>
    56	                </form>
    57	            </div>
    58	        </div>
    59	    );
    60	};
    61	
    62	export default Login;


===============================================
= File: ./src/pages/dashboard/Dashboard.tsx 
===============================================

     1	import { useEffect, useState, useCallback } from 'react';
     2	import { supabase } from '../../lib/supabase';
     3	import {
     4	    Chart as ChartJS,
     5	    CategoryScale,
     6	    LinearScale,
     7	    PointElement,
     8	    LineElement,
     9	    BarElement,
    10	    Title,
    11	    Tooltip,
    12	    Legend,
    13	    ArcElement
    14	} from 'chart.js';
    15	import { Line, Pie, Bar, Doughnut } from 'react-chartjs-2';
    16	import { FaShoppingBag, FaShoppingCart, FaBoxes, FaExclamationTriangle } from 'react-icons/fa';
    17	
    18	ChartJS.register(
    19	    CategoryScale,
    20	    LinearScale,
    21	    PointElement,
    22	    LineElement,
    23	    BarElement,
    24	    Title,
    25	    Tooltip,
    26	    Legend,
    27	    ArcElement
    28	);
    29	
    30	const Dashboard = () => {
    31	    const [demoMode, setDemoMode] = useState(false);
    32	    const [stats, setStats] = useState({
    33	        totalSales: 0,
    34	        totalPurchases: 0,
    35	        totalMedicines: 0,
    36	        lowStockCount: 0
    37	    });
    38	
    39	    const [salesData, setSalesData] = useState<{
    40	        labels: string[];
    41	        datasets: {
    42	            label: string;
    43	            data: number[];
    44	            borderColor: string;
    45	            backgroundColor: string;
    46	        }[];
    47	    }>({
    48	        labels: [],
    49	        datasets: []
    50	    });
    51	
    52	    const [topMedicines, setTopMedicines] = useState<{
    53	        labels: string[];
    54	        datasets: {
    55	            label: string;
    56	            data: number[];
    57	            backgroundColor: string[];
    58	            borderColor: string[];
    59	            borderWidth: number;
    60	        }[];
    61	    }>({
    62	        labels: [],
    63	        datasets: []
    64	    });
    65	
    66	    useEffect(() => {
    67	        if (!demoMode) {
    68	            fetchStats();
    69	            fetchSalesData();
    70	            fetchTopMedicines();
    71	        }
    72	    }, []);
    73	
    74	    const fetchStats = async () => {
    75	        // Get total sales
    76	        const { data: salesData } = await supabase
    77	            .from('sales')
    78	            .select('total');
    79	
    80	        const totalSales = salesData
    81	            ? salesData.reduce((sum, sale) => sum + sale.total, 0)
    82	            : 0;
    83	
    84	        // Get total purchases
    85	        const { data: purchasesData } = await supabase
    86	            .from('purchases')
    87	            .select('total');
    88	
    89	        const totalPurchases = purchasesData
    90	            ? purchasesData.reduce((sum, purchase) => sum + purchase.total, 0)
    91	            : 0;
    92	
    93	        // Get total medicines
    94	        const { count: totalMedicines } = await supabase
    95	            .from('medicines')
    96	            .select('*', { count: 'exact' });
    97	
    98	        // Get low stock count
    99	        const { count: lowStockCount } = await supabase
   100	            .from('medicines')
   101	            .select('*', { count: 'exact' })
   102	            .lt('stock', 10);
   103	
   104	        setStats({
   105	            totalSales,
   106	            totalPurchases,
   107	            totalMedicines: totalMedicines || 0,
   108	            lowStockCount: lowStockCount || 0
   109	        });
   110	    };
   111	
   112	    const fetchSalesData = async () => {
   113	        // Get sales data for the last 7 days
   114	        const now = new Date();
   115	        const sevenDaysAgo = new Date(now.setDate(now.getDate() - 6));
   116	        sevenDaysAgo.setHours(0, 0, 0, 0);
   117	
   118	        const { data } = await supabase
   119	            .from('sales')
   120	            .select('date, total')
   121	            .gte('date', sevenDaysAgo.toISOString())
   122	            .order('date');
   123	
   124	        if (!data) return;
   125	
   126	        // Group by date
   127	        const salesByDate = data.reduce<Record<string, number>>((acc, sale) => {
   128	            const date = new Date(sale.date).toLocaleDateString();
   129	            if (!acc[date]) acc[date] = 0;
   130	            acc[date] += sale.total;
   131	            return acc;
   132	        }, {});
   133	
   134	        // Generate data for the last 7 days
   135	        const labels = [];
   136	        const values = [];
   137	
   138	        for (let i = 0; i < 7; i++) {
   139	            const date = new Date();
   140	            date.setDate(date.getDate() - (6 - i));
   141	            const dateStr = date.toLocaleDateString();
   142	            labels.push(dateStr);
   143	            values.push(salesByDate[dateStr] || 0);
   144	        }
   145	
   146	        setSalesData({
   147	            labels,
   148	            datasets: [
   149	                {
   150	                    label: 'Penjualan Harian',
   151	                    data: values,
   152	                    borderColor: 'rgb(53, 162, 235)',
   153	                    backgroundColor: 'rgba(53, 162, 235, 0.5)',
   154	                }
   155	            ]
   156	        });
   157	    };
   158	
   159	    const fetchTopMedicines = async () => {
   160	        // Get top 5 selling medicines
   161	        const { data } = await supabase
   162	            .rpc('get_top_selling_medicines', { limit_count: 5 });
   163	
   164	        if (!data) return;
   165	
   166	        interface TopSellingMedicine {
   167	            name: string;
   168	            total_quantity: number;
   169	        }
   170	
   171	        setTopMedicines({
   172	            labels: data.map((item: TopSellingMedicine) => item.name),
   173	            datasets: [
   174	                {
   175	                    label: 'Obat Terlaris',
   176	                    data: data.map((item: TopSellingMedicine) => item.total_quantity),
   177	                    backgroundColor: [
   178	                        'rgba(255, 99, 132, 0.6)',
   179	                        'rgba(54, 162, 235, 0.6)',
   180	                        'rgba(255, 206, 86, 0.6)',
   181	                        'rgba(75, 192, 192, 0.6)',
   182	                        'rgba(153, 102, 255, 0.6)'
   183	                    ],
   184	                    borderColor: [
   185	                        'rgba(255, 99, 132, 1)',
   186	                        'rgba(54, 162, 235, 1)',
   187	                        'rgba(255, 206, 86, 1)',
   188	                        'rgba(75, 192, 192, 1)',
   189	                        'rgba(153, 102, 255, 1)'
   190	                    ],
   191	                    borderWidth: 1,
   192	                }
   193	            ]
   194	        });
   195	    };
   196	
   197	    const toggleDemoMode = () => {
   198	        setDemoMode(!demoMode);
   199	    };
   200	
   201	    return (
   202	        <div className="min-h-screen">
   203	            <div className="flex justify-between items-center mb-6">
   204	                <h1 className="text-2xl font-bold text-gray-800">Dashboard</h1>
   205	                <button 
   206	                    onClick={toggleDemoMode}
   207	                    className={`px-4 py-2 rounded-md font-medium shadow-md border ${demoMode ? 'bg-red-500 text-white border-red-600' : 'bg-blue-500 text-white border-blue-600 hover:bg-blue-700'}`}
   208	                >
   209	                    {demoMode ? 'Disable Demo Mode' : 'Demo Mode'}
   210	                </button>
   211	            </div>
   212	
   213	            {demoMode ? (
   214	                <ModernDashboard />
   215	            ) : (
   216	                <RegularDashboard 
   217	                    stats={stats} 
   218	                    salesData={salesData} 
   219	                    topMedicines={topMedicines} 
   220	                />
   221	            )}
   222	        </div>
   223	    );
   224	};
   225	
   226	// Komponen untuk dashboard regular (asli)
   227	const RegularDashboard = ({ stats, salesData, topMedicines }) => {
   228	    return (
   229	        <div>
   230	            {/* <h1 className="text-2xl font-bold text-gray-800 mb-6">Dashboard</h1> */}
   231	
   232	            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
   233	                <div className="bg-white p-6 rounded-lg shadow">
   234	                    <div className="flex items-center">
   235	                        <div className="p-3 rounded-full bg-blue-100 mr-4">
   236	                            <FaShoppingBag className="text-blue-500 text-xl" />
   237	                        </div>
   238	                        <div>
   239	                            <h2 className="text-sm text-gray-500">Total Penjualan</h2>
   240	                            <p className="text-xl font-semibold">
   241	                                {stats.totalSales.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' })}
   242	                            </p>
   243	                        </div>
   244	                    </div>
   245	                </div>
   246	
   247	                <div className="bg-white p-6 rounded-lg shadow">
   248	                    <div className="flex items-center">
   249	                        <div className="p-3 rounded-full bg-green-100 mr-4">
   250	                            <FaShoppingCart className="text-green-500 text-xl" />
   251	                        </div>
   252	                        <div>
   253	                            <h2 className="text-sm text-gray-500">Total Pembelian</h2>
   254	                            <p className="text-xl font-semibold">
   255	                                {stats.totalPurchases.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' })}
   256	                            </p>
   257	                        </div>
   258	                    </div>
   259	                </div>
   260	
   261	                <div className="bg-white p-6 rounded-lg shadow">
   262	                    <div className="flex items-center">
   263	                        <div className="p-3 rounded-full bg-purple-100 mr-4">
   264	                            <FaBoxes className="text-purple-500 text-xl" />
   265	                        </div>
   266	                        <div>
   267	                            <h2 className="text-sm text-gray-500">Total Obat</h2>
   268	                            <p className="text-xl font-semibold">{stats.totalMedicines}</p>
   269	                        </div>
   270	                    </div>
   271	                </div>
   272	
   273	                <div className="bg-white p-6 rounded-lg shadow">
   274	                    <div className="flex items-center">
   275	                        <div className="p-3 rounded-full bg-red-100 mr-4">
   276	                            <FaExclamationTriangle className="text-red-500 text-xl" />
   277	                        </div>
   278	                        <div>
   279	                            <h2 className="text-sm text-gray-500">Stok Menipis</h2>
   280	                            <p className="text-xl font-semibold">{stats.lowStockCount}</p>
   281	                        </div>
   282	                    </div>
   283	                </div>
   284	            </div>
   285	
   286	            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
   287	                <div className="bg-white p-6 rounded-lg shadow">
   288	                    <h2 className="text-lg font-semibold mb-4">Penjualan 7 Hari Terakhir</h2>
   289	                    <div className="h-64">
   290	                        <Line
   291	                            data={salesData}
   292	                            options={{
   293	                                responsive: true,
   294	                                maintainAspectRatio: false,
   295	                                scales: {
   296	                                    y: {
   297	                                        beginAtZero: true
   298	                                    }
   299	                                }
   300	                            }}
   301	                        />
   302	                    </div>
   303	                </div>
   304	
   305	                <div className="bg-white p-6 rounded-lg shadow">
   306	                    <h2 className="text-lg font-semibold mb-4">Obat Terlaris</h2>
   307	                    <div className="h-64">
   308	                        <Pie
   309	                            data={topMedicines}
   310	                            options={{
   311	                                responsive: true,
   312	                                maintainAspectRatio: false
   313	                            }}
   314	                        />
   315	                    </div>
   316	                </div>
   317	            </div>
   318	        </div>
   319	    );
   320	};
   321	
   322	// Komponen untuk dashboard modern (mode demo)
   323	const ModernDashboard = () => {
   324	    // Data dummy untuk mode demo
   325	    const demoData = {
   326	        totalCustomer: 120,
   327	        totalSales: 234,
   328	        totalProfit: 456,
   329	        outOfStock: 56,
   330	        
   331	        expiringMedicines: [
   332	            { name: 'Doxycycline', expiryDate: '24 Dec 2021', quantity: 40 },
   333	            { name: 'Abetis', expiryDate: '24 Dec 2021', quantity: 40 },
   334	            { name: 'Disulfit 10ml', expiryDate: '24 Dec 2021', quantity: 40 },
   335	            { name: 'Cerox CV', expiryDate: '24 Dec 2021', quantity: 40 },
   336	            { name: 'Fluciox', expiryDate: '24 Dec 2021', quantity: 40 },
   337	        ],
   338	        
   339	        recentOrders: [
   340	            { medicine: 'Paricol 15mg', batchNo: '78367834', quantity: 40, status: 'Delivered', price: 23.00 },
   341	            { medicine: 'Abetis 20mg', batchNo: '88832433', quantity: 40, status: 'Pending', price: 23.00 },
   342	            { medicine: 'Cerox CV', batchNo: '76767634', quantity: 40, status: 'Cancelled', price: 23.00 },
   343	            { medicine: 'Abetis 20mg', batchNo: '45578866', quantity: 40, status: 'Delivered', price: 23.00 },
   344	            { medicine: 'Cerox CV', batchNo: '76767634', quantity: 40, status: 'Cancelled', price: 23.00 },
   345	        ],
   346	        
   347	        monthlyData: [
   348	            { month: 'Jan', value: 40 },
   349	            { month: 'Feb', value: 35 },
   350	            { month: 'Mar', value: 35 },
   351	            { month: 'Apr', value: 45 },
   352	            { month: 'May', value: 40 },
   353	            { month: 'Jun', value: 50 },
   354	            { month: 'Jul', value: 60 },
   355	            { month: 'Aug', value: 40 },
   356	            { month: 'Sep', value: 45 },
   357	            { month: 'Oct', value: 40 },
   358	            { month: 'Nov', value: 35 },
   359	            { month: 'Dec', value: 30 },
   360	        ],
   361	        
   362	        todayReport: {
   363	            totalEarning: 5098.00,
   364	            purchasePercentage: 65,
   365	            cashReceivedPercentage: 75,
   366	            bankReceivePercentage: 45,
   367	            servicePercentage: 85
   368	        }
   369	    };
   370	    
   371	    // Data untuk Monthly Progress chart
   372	    const monthlyProgressData = {
   373	        labels: demoData.monthlyData.map(item => item.month),
   374	        datasets: [
   375	            {
   376	                label: 'Penjualan Bulanan',
   377	                data: demoData.monthlyData.map(item => item.value),
   378	                backgroundColor: demoData.monthlyData.map(item => 
   379	                    item.month === 'Jul' ? '#1a73e8' : '#4ade80'
   380	                ),
   381	                borderRadius: 6,
   382	                borderSkipped: false,
   383	            }
   384	        ]
   385	    };
   386	    
   387	    // Data untuk Today's Report chart (doughnut chart)
   388	    const todayReportData = {
   389	        labels: ['Pembelian', 'Penerimaan Tunai', 'Penerimaan Bank', 'Layanan'],
   390	        datasets: [
   391	            {
   392	                data: [
   393	                    demoData.todayReport.purchasePercentage,
   394	                    demoData.todayReport.cashReceivedPercentage,
   395	                    demoData.todayReport.bankReceivePercentage,
   396	                    demoData.todayReport.servicePercentage
   397	                ],
   398	                backgroundColor: [
   399	                    '#3b82f6',
   400	                    '#f43f5e',
   401	                    '#f97316',
   402	                    '#4ade80'
   403	                ],
   404	                borderWidth: 0,
   405	                cutout: '55%'
   406	            }
   407	        ]
   408	    };
   409	
   410	    return (
   411	        <div className="bg-gray-50 p-6 rounded-xl">
   412	            {/* Cards Row */}
   413	            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
   414	                {/* Total Customer Card */}
   415	                <div className="bg-white p-4 rounded-xl shadow-sm flex items-start justify-between">
   416	                    <div>
   417	                        <p className="text-sm text-gray-500 mb-1">Total Customer</p>
   418	                        <p className="text-2xl font-bold">{demoData.totalCustomer}</p>
   419	                        <button className="text-xs text-primary mt-2">Lihat Detail</button>
   420	                    </div>
   421	                    <div className="h-10 w-10 rounded-full bg-indigo-100 flex items-center justify-center">
   422	                        <span className="text-indigo-500">👥</span>
   423	                    </div>
   424	                </div>
   425	                
   426	                {/* Total Sale Card */}
   427	                <div className="bg-white p-4 rounded-xl shadow-sm flex items-start justify-between">
   428	                    <div>
   429	                        <p className="text-sm text-gray-500 mb-1">Total Sale</p>
   430	                        <p className="text-2xl font-bold">{demoData.totalSales}</p>
   431	                        <button className="text-xs text-primary mt-2">Lihat Detail</button>
   432	                    </div>
   433	                    <div className="h-10 w-10 rounded-full bg-green-100 flex items-center justify-center">
   434	                        <span className="text-green-500">🛒</span>
   435	                    </div>
   436	                </div>
   437	                
   438	                {/* Total Profit Card */}
   439	                <div className="bg-white p-4 rounded-xl shadow-sm flex items-start justify-between">
   440	                    <div>
   441	                        <p className="text-sm text-gray-500 mb-1">Total Profit</p>
   442	                        <p className="text-2xl font-bold">${demoData.totalProfit}</p>
   443	                        <button className="text-xs text-primary mt-2">Lihat Detail</button>
   444	                    </div>
   445	                    <div className="h-10 w-10 rounded-full bg-yellow-100 flex items-center justify-center">
   446	                        <span className="text-yellow-500">💰</span>
   447	                    </div>
   448	                </div>
   449	                
   450	                {/* Out of Stock Card */}
   451	                <div className="bg-white p-4 rounded-xl shadow-sm flex items-start justify-between">
   452	                    <div>
   453	                        <p className="text-sm text-gray-500 mb-1">Out of Stock</p>
   454	                        <p className="text-2xl font-bold">{demoData.outOfStock}</p>
   455	                        <button className="text-xs text-primary mt-2">Lihat Detail</button>
   456	                    </div>
   457	                    <div className="h-10 w-10 rounded-full bg-red-100 flex items-center justify-center">
   458	                        <span className="text-red-500">⚠️</span>
   459	                    </div>
   460	                </div>
   461	            </div>
   462	            
   463	            {/* Tables and Charts */}
   464	            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
   465	                {/* Expiring List */}
   466	                <div className="bg-white p-4 rounded-xl shadow-sm">
   467	                    <div className="flex justify-between items-center mb-4">
   468	                        <h2 className="text-lg font-semibold">Expiring List</h2>
   469	                        <button className="text-xs text-primary">Lihat Semua</button>
   470	                    </div>
   471	                    
   472	                    <div className="overflow-x-auto">
   473	                        <table className="w-full">
   474	                            <thead>
   475	                                <tr className="text-left text-xs text-gray-500">
   476	                                    <th className="pb-2">Medicine name</th>
   477	                                    <th className="pb-2">Expiry Date</th>
   478	                                    <th className="pb-2">Quantity</th>
   479	                                    <th className="pb-2">Chart</th>
   480	                                    <th className="pb-2">Return</th>
   481	                                </tr>
   482	                            </thead>
   483	                            <tbody className="divide-y divide-gray-100">
   484	                                {demoData.expiringMedicines.map((medicine, index) => (
   485	                                    <tr key={index} className="text-sm">
   486	                                        <td className="py-3">{medicine.name}</td>
   487	                                        <td className="py-3">{medicine.expiryDate}</td>
   488	                                        <td className="py-3">{medicine.quantity}</td>
   489	                                        <td className="py-3">
   490	                                            <div className="h-6 w-10 text-green-500">📈</div>
   491	                                        </td>
   492	                                        <td className="py-3">
   493	                                            <button className="text-gray-400">↩️</button>
   494	                                        </td>
   495	                                    </tr>
   496	                                ))}
   497	                            </tbody>
   498	                        </table>
   499	                    </div>
   500	                </div>
   501	                
   502	                {/* Recent Orders */}
   503	                <div className="bg-white p-4 rounded-xl shadow-sm">
   504	                    <div className="flex justify-between items-center mb-4">
   505	                        <h2 className="text-lg font-semibold">Recent Order's</h2>
   506	                        <button className="text-xs text-primary">Lihat Semua</button>
   507	                    </div>
   508	                    
   509	                    <div className="overflow-x-auto">
   510	                        <table className="w-full">
   511	                            <thead>
   512	                                <tr className="text-left text-xs text-gray-500">
   513	                                    <th className="pb-2">Medicine name</th>
   514	                                    <th className="pb-2">Batch No.</th>
   515	                                    <th className="pb-2">Quantity</th>
   516	                                    <th className="pb-2">Status</th>
   517	                                    <th className="pb-2 text-right">Price</th>
   518	                                </tr>
   519	                            </thead>
   520	                            <tbody className="divide-y divide-gray-100">
   521	                                {demoData.recentOrders.map((order, index) => (
   522	                                    <tr key={index} className="text-sm">
   523	                                        <td className="py-3">{order.medicine}</td>
   524	                                        <td className="py-3">{order.batchNo}</td>
   525	                                        <td className="py-3">{order.quantity}</td>
   526	                                        <td className="py-3">
   527	                                            <span className={`px-2 py-1 rounded-full text-xs 
   528	                                                ${order.status === 'Delivered' ? 'bg-blue-100 text-blue-600' : 
   529	                                                  order.status === 'Pending' ? 'bg-yellow-100 text-yellow-600' : 
   530	                                                  'bg-red-100 text-red-600'}`}>
   531	                                                {order.status}
   532	                                            </span>
   533	                                        </td>
   534	                                        <td className="py-3 text-right">${order.price.toFixed(2)}</td>
   535	                                    </tr>
   536	                                ))}
   537	                            </tbody>
   538	                        </table>
   539	                    </div>
   540	                </div>
   541	            </div>
   542	            
   543	            {/* Charts Row */}
   544	            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
   545	                {/* Monthly Progress */}
   546	                <div className="bg-white p-4 rounded-xl shadow-sm">
   547	                    <div className="flex justify-between items-center mb-4">
   548	                        <h2 className="text-lg font-semibold">Monthly Progress</h2>
   549	                        <select className="text-sm border rounded px-2 py-1">
   550	                            <option>Monthly</option>
   551	                            <option>Weekly</option>
   552	                            <option>Daily</option>
   553	                        </select>
   554	                    </div>
   555	                    
   556	                    <div className="h-64">
   557	                        <Bar 
   558	                            data={monthlyProgressData} 
   559	                            options={{
   560	                                responsive: true,
   561	                                maintainAspectRatio: false,
   562	                                plugins: {
   563	                                    legend: {
   564	                                        display: false
   565	                                    },
   566	                                    tooltip: {
   567	                                        callbacks: {
   568	                                            title: (context) => {
   569	                                                const label = context[0].label;
   570	                                                if (label === 'Sep') {
   571	                                                    return 'September';
   572	                                                }
   573	                                                return label;
   574	                                            },
   575	                                            label: (context) => {
   576	                                                return `Sales: ${context.parsed.y}`;
   577	                                            }
   578	                                        }
   579	                                    }
   580	                                },
   581	                                scales: {
   582	                                    y: {
   583	                                        beginAtZero: true,
   584	                                        grid: {
   585	                                            display: false
   586	                                        }
   587	                                    },
   588	                                    x: {
   589	                                        grid: {
   590	                                            display: false
   591	                                        }
   592	                                    }
   593	                                }
   594	                            }}
   595	                        />
   596	                    </div>
   597	                </div>
   598	                
   599	                {/* Today's Report */}
   600	                <div className="bg-white p-4 rounded-xl shadow-sm">
   601	                    <h2 className="text-lg font-semibold mb-4">Today's Report</h2>
   602	                    
   603	                    <div className="flex items-center justify-center">
   604	                        <div className="h-64 w-64 relative flex items-center justify-center">
   605	                            <Doughnut 
   606	                                data={todayReportData}
   607	                                options={{
   608	                                    responsive: true,
   609	                                    maintainAspectRatio: false,
   610	                                    plugins: {
   611	                                        legend: {
   612	                                            display: false
   613	                                        }
   614	                                    }
   615	                                }}
   616	                            />
   617	                            <div className="absolute inset-0 flex flex-col items-center justify-center">
   618	                                <p className="text-sm text-gray-500">Total Earning</p>
   619	                                <p className="text-xl font-bold">${demoData.todayReport.totalEarning.toFixed(2)}</p>
   620	                            </div>
   621	                        </div>
   622	                        <div className="ml-4">
   623	                            <div className="flex items-center mb-2"><span className="w-3 h-3 rounded-full bg-blue-500 mr-2"></span> Total Purchase</div>
   624	                            <div className="flex items-center mb-2"><span className="w-3 h-3 rounded-full bg-red-500 mr-2"></span> Cash Received</div>
   625	                            <div className="flex items-center mb-2"><span className="w-3 h-3 rounded-full bg-orange-500 mr-2"></span> Bank Receive</div>
   626	                            <div className="flex items-center"><span className="w-3 h-3 rounded-full bg-green-500 mr-2"></span> Total Service</div>
   627	                        </div>
   628	                    </div>
   629	                </div>
   630	            </div>
   631	        </div>
   632	    );
   633	};
   634	
   635	export default Dashboard;


===============================================
= File: ./src/pages/master-data/AddItem.tsx 
===============================================

     1	import { useNavigate } from "react-router-dom";
     2	import { useEffect } from "react";
     3	import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "../../components/ui/Card";
     4	import { FormActions } from "../../components/ui/FormActions";
     5	import { Input } from "../../components/ui/Input";
     6	import { FormSection, FormField } from "../../components/ui/FormComponents";
     7	import { useAddItemForm } from "../../hooks/useAddItemForm";
     8	import UnitConversionManager from "../../components/tools/UnitConversionManager";
     9	
    10	// Style constants
    11	const inputClassName = "w-full";
    12	const selectClassName = "bg-white w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent";
    13	const addButtonClassName = "ml-2 bg-green-500 text-white p-2 rounded-md hover:bg-green-600";
    14	const radioGroupClassName = "space-x-6";
    15	const textareaClassName = "w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent";
    16	
    17	const AddItem = () => {
    18	    const navigate = useNavigate();
    19	
    20	    const {
    21	        formData, displayBasePrice, categories, types, units,
    22	        saving, handleChange, handleSelectChange: originalHandleSelectChange, handleSubmit, updateFormData,
    23	        unitConversionHook
    24	    } = useAddItemForm();
    25	
    26	    // Modified handleSelectChange to update baseUnit automatically
    27	    const handleSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    28	        const { name, value } = e.target;
    29	        originalHandleSelectChange(e);
    30	        
    31	        // Set baseUnit automatically when unit_id changes
    32	        if (name === 'unit_id' && value) {
    33	            const selectedUnit = units.find(unit => unit.id === value);
    34	            if (selectedUnit) {
    35	                unitConversionHook.setBaseUnit(selectedUnit.name);
    36	            }
    37	        }
    38	    };
    39	
    40	    // Efek untuk memperbarui basePrice pada unitConversionHook saat harga pokok berubah
    41	    useEffect(() => {
    42	        // Perbarui nilai basePrice di unitConversionHook ketika formData.base_price berubah
    43	        if (formData.base_price > 0) {
    44	            unitConversionHook.setBasePrice(formData.base_price);
    45	        }
    46	    // eslint-disable-next-line react-hooks/exhaustive-deps
    47	    }, [formData.base_price]);
    48	
    49	    return (
    50	        <div>
    51	            <Card>
    52	                <CardHeader>
    53	                    <CardTitle>Tambah Data Item Baru</CardTitle>
    54	                </CardHeader>
    55	
    56	                <form onSubmit={handleSubmit}>
    57	                    <CardContent className="space-y-6">
    58	                        <FormSection title="Data Umum">
    59	                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
    60	                                <FormField label="Kode Item">
    61	                                    <Input
    62	                                        name="code"
    63	                                        value={formData.code}
    64	                                        disabled={true}
    65	                                        className={inputClassName}
    66	                                        style={formData.code === "" ? {
    67	                                            background: 'repeating-linear-gradient(45deg, #f0f0f0, #f0f0f0 10px, #e0e0e0 10px, #e0e0e0 20px)'
    68	                                        } : {}}
    69	                                    />
    70	                                </FormField>
    71	                            </div>
    72	
    73	                            <FormField label="Nama Item">
    74	                                <Input
    75	                                    name="name"
    76	                                    value={formData.name}
    77	                                    onChange={handleChange}
    78	                                    className={inputClassName}
    79	                                    required
    80	                                />
    81	                            </FormField>
    82	
    83	                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
    84	                                <FormField label="Jenis">
    85	                                    <div className="flex">
    86	                                        {categories.length === 0 && (
    87	                                            <span className="inline-block w-4 h-4 mr-2 border-t-2 border-primary rounded-full animate-spin"></span>
    88	                                        )}
    89	                                        <select
    90	                                            name="type_id" 
    91	                                            value={formData.type_id}
    92	                                            onChange={handleSelectChange}
    93	                                            className={selectClassName}
    94	                                            required
    95	                                        >
    96	                                            <option value="">-- Pilih Jenis --</option>
    97	                                            {types.map((type) => (
    98	                                                <option key={type.id} value={type.id}>
    99	                                                    {type.name}
   100	                                                </option>
   101	                                            ))}
   102	                                        </select>
   103	                                        <button
   104	                                            type="button"
   105	                                            className={addButtonClassName}
   106	                                            onClick={() => navigate("/master-data/types/add")}
   107	                                        >
   108	                                            +
   109	                                        </button>
   110	                                    </div>
   111	                                </FormField>
   112	
   113	                                <FormField label="Kategori">
   114	                                    <div className="flex">
   115	                                        <select
   116	                                            name="category_id"
   117	                                            value={formData.category_id}
   118	                                            onChange={handleSelectChange}
   119	                                            className={selectClassName}
   120	                                            required
   121	                                        >
   122	                                            <option value="">-- Pilih Kategori --</option>
   123	                                            {categories.map((category) => (
   124	                                                <option key={category.id} value={category.id}>
   125	                                                    {category.name}
   126	                                                </option>
   127	                                            ))}
   128	                                        </select>
   129	                                        <button
   130	                                            type="button"
   131	                                            className={addButtonClassName}
   132	                                            onClick={() => navigate("/master-data/categories/add")}
   133	                                        >
   134	                                            +
   135	                                        </button>
   136	                                    </div>
   137	                                </FormField>
   138	                            </div>
   139	
   140	                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
   141	                                <FormField label="Satuan">
   142	                                    <div className="flex">
   143	                                        <select
   144	                                            name="unit_id"
   145	                                            value={formData.unit_id}
   146	                                            onChange={handleSelectChange}
   147	                                            className={selectClassName}
   148	                                            required
   149	                                        >
   150	                                            <option value="">-- Pilih Satuan --</option>
   151	                                            {units.map((unit) => (
   152	                                                <option key={unit.id} value={unit.id}>
   153	                                                    {unit.name}
   154	                                                </option>
   155	                                            ))}
   156	                                        </select>
   157	                                        <button
   158	                                            type="button"
   159	                                            className={addButtonClassName}
   160	                                            onClick={() => navigate("/master-data/units/add")}
   161	                                        >
   162	                                            +
   163	                                        </button>
   164	                                    </div>
   165	                                </FormField>
   166	
   167	                                <FormField label="Rak">
   168	                                    <Input
   169	                                        name="rack"
   170	                                        value={formData.rack}
   171	                                        onChange={handleChange}
   172	                                        className={inputClassName}
   173	                                    />
   174	                                </FormField>
   175	                            </div>
   176	
   177	                            <FormField label="Jenis Produk">
   178	                                <div className={radioGroupClassName}>
   179	                                    <label className="inline-flex items-center">
   180	                                        <input
   181	                                            type="radio"
   182	                                            name="is_medicine"
   183	                                            checked={formData.is_medicine}
   184	                                            onChange={() => updateFormData({ is_medicine: true })}
   185	                                            className="form-radio h-5 w-5 text-primary"
   186	                                        />
   187	                                        <span className="ml-2">Obat</span>
   188	                                    </label>
   189	                                    <label className="inline-flex items-center">
   190	                                        <input
   191	                                            type="radio"
   192	                                            name="is_medicine"
   193	                                            checked={!formData.is_medicine}
   194	                                            onChange={() => updateFormData({ is_medicine: false, has_expiry_date: false })}
   195	                                            className="form-radio h-5 w-5 text-primary"
   196	                                        />
   197	                                        <span className="ml-2">Non-Obat</span>
   198	                                    </label>
   199	                                </div>
   200	                            </FormField>
   201	
   202	                            <FormField label="Keterangan">
   203	                                <textarea
   204	                                    name="description"
   205	                                    value={formData.description}
   206	                                    onChange={handleChange}
   207	                                    className={textareaClassName}
   208	                                    rows={3}
   209	                                />
   210	                            </FormField>
   211	                        </FormSection>
   212	
   213	                        <FormSection title="Harga Pokok">
   214	                            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
   215	                                <FormField label="Satuan Dasar">
   216	                                    <Input
   217	                                        type="text"
   218	                                        value={unitConversionHook.baseUnit}
   219	                                        readOnly
   220	                                        className={inputClassName}
   221	                                    />
   222	                                </FormField>
   223	                                
   224	                                <FormField label="Harga Pokok">
   225	                                    <Input
   226	                                        type="text"
   227	                                        name="base_price"
   228	                                        value={displayBasePrice}
   229	                                        placeholder="Rp 0"
   230	                                        onChange={handleChange}
   231	                                        min="0"
   232	                                        className={inputClassName}
   233	                                        required
   234	                                    />
   235	                                </FormField>
   236	                            </div>
   237	                        </FormSection>
   238	
   239	                        <UnitConversionManager unitConversionHook={unitConversionHook} />
   240	
   241	                        <FormSection title="Pengaturan Tambahan">
   242	                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
   243	                                <FormField label="Status Jual">
   244	                                    <div className={radioGroupClassName}>
   245	                                        <label className="inline-flex items-center">
   246	                                            <input
   247	                                                type="radio"
   248	                                                name="is_active"
   249	                                                checked={formData.is_active}
   250	                                                onChange={() => updateFormData({ is_active: true })}
   251	                                                className="form-radio h-5 w-5 text-primary"
   252	                                            />
   253	                                            <span className="ml-2">Masih dijual</span>
   254	                                        </label>
   255	                                        <label className="inline-flex items-center">
   256	                                            <input
   257	                                                type="radio"
   258	                                                name="is_active"
   259	                                                checked={!formData.is_active}
   260	                                                onChange={() => updateFormData({ is_active: false })}
   261	                                                className="form-radio h-5 w-5 text-primary"
   262	                                            />
   263	                                            <span className="ml-2">Tidak Dijual</span>
   264	                                        </label>
   265	                                    </div>
   266	                                </FormField>
   267	
   268	                                <FormField label="Stok Minimal">
   269	                                    <Input
   270	                                        type="number"
   271	                                        name="min_stock"
   272	                                        value={formData.min_stock}
   273	                                        onChange={handleChange}
   274	                                        className={inputClassName}
   275	                                        required
   276	                                    />
   277	                                </FormField>
   278	                            </div>
   279	
   280	                            <div className={formData.is_medicine ? "" : "opacity-50 pointer-events-none"}>
   281	                                <label className="inline-flex items-center">
   282	                                    <input
   283	                                        type="checkbox"
   284	                                        name="has_expiry_date"
   285	                                        checked={formData.has_expiry_date}
   286	                                        disabled={!formData.is_medicine}
   287	                                        onChange={handleChange}
   288	                                        className="form-checkbox h-5 w-5 text-primary"
   289	                                    />
   290	                                    <span className="ml-2">Memiliki Tanggal Kadaluarsa</span>
   291	                                </label>
   292	                                <div className="mt-1 text-sm text-gray-500">
   293	                                    Jika dicentang, obat ini akan menggunakan metode FEFO
   294	                                    (First Expired First Out)
   295	                                </div>
   296	                            </div>
   297	                        </FormSection>
   298	                    </CardContent>
   299	
   300	                    <CardFooter className="flex justify-between">
   301	                        <FormActions
   302	                            onCancel={() => navigate("/master-data/items")}
   303	                            isDisabled={false}
   304	                            isSaving={saving}
   305	                        />
   306	                    </CardFooter>
   307	                </form>
   308	            </Card>
   309	        </div>
   310	    );
   311	};
   312	
   313	export default AddItem;


===============================================
= File: ./src/pages/master-data/CategoryList.tsx 
===============================================

     1	// import { useState } from "react";
     2	import { Link } from "react-router-dom";
     3	import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
     4	import { supabase } from "../../lib/supabase";
     5	import { FaPlus, FaEdit, FaTrash } from "react-icons/fa";
     6	import { Card } from "../../components/ui/Card";
     7	import { Button } from "../../components/ui/Button";
     8	import { Table, TableHead, TableBody, TableRow, TableCell, TableHeader } from "../../components/ui/Table";
     9	import { Loading } from "../../components/ui/Loading";
    10	import { useConfirmDialog } from "../../components/ui/ConfirmDialog";
    11	
    12	interface Category {
    13	    id: string;
    14	    name: string;
    15	    description: string;
    16	}
    17	
    18	const CategoryList = () => {
    19	    const { openConfirmDialog } = useConfirmDialog();
    20	    const queryClient = useQueryClient();
    21	
    22	    const fetchCategories = async () => {
    23	        const { data, error } = await supabase
    24	            .from("item_categories")
    25	            .select("*")
    26	            .order("name");
    27	
    28	        if (error) throw error;
    29	        return data || [];
    30	    };
    31	
    32	    const { data: categories = [], isLoading, isError, error } = useQuery<Category[]>({
    33	        queryKey: ['categories'],
    34	        queryFn: fetchCategories,
    35	        staleTime: 30 * 1000,
    36	        refetchOnMount: true,
    37	    });
    38	
    39	    const queryError = error instanceof Error ? error : null;
    40	
    41	    const deleteCategoryMutation = useMutation({
    42	        mutationFn: async (categoryId: string) => {
    43	            const { error } = await supabase.from("item_categories").delete().eq("id", categoryId);
    44	            if (error) throw error;
    45	        },
    46	        onSuccess: () => {
    47	            queryClient.invalidateQueries({ queryKey: ['categories'] });
    48	            console.log("Kategori berhasil dihapus, cache diinvalidasi.");
    49	        },
    50	        onError: (error) => {
    51	            console.error("Error deleting category:", error);
    52	            alert(`Gagal menghapus kategori: ${error.message}`);
    53	        },
    54	    });
    55	
    56	    return (
    57	        <Card>
    58	            <div className="flex justify-between items-center mb-6">
    59	                <h1 className="text-2xl font-bold text-gray-800">Daftar Kategori Item</h1>
    60	                <Link to="/master-data/categories/add">
    61	                    <Button variant="primary" className="flex items-center">
    62	                        <FaPlus className="mr-2" />
    63	                        Tambah Kategori Baru
    64	                    </Button>
    65	                </Link>
    66	            </div>
    67	
    68	            {isLoading ? (
    69	                <Loading />
    70	            ) : isError ? (
    71	                <div className="text-center p-6 text-red-500">Error: {queryError?.message || 'Gagal memuat data'}</div>
    72	            ) : (
    73	                <Table>
    74	                    <TableHead>
    75	                        <TableRow>
    76	                            <TableHeader>Nama Kategori</TableHeader>
    77	                            <TableHeader>Deskripsi</TableHeader>
    78	                            <TableHeader className="text-center">Aksi</TableHeader>
    79	                        </TableRow>
    80	                    </TableHead>
    81	                    <TableBody>
    82	                        {categories.length === 0 ? (
    83	                            <TableRow>
    84	                                <TableCell colSpan={3} className="text-center text-gray-500">
    85	                                    Tidak ada data kategori yang ditemukan
    86	                                </TableCell>
    87	                            </TableRow>
    88	                        ) : (
    89	                            categories.map((category) => (
    90	                                <TableRow key={category.id}>
    91	                                    <TableCell>{category.name}</TableCell>
    92	                                    <TableCell>{category.description}</TableCell>
    93	                                    <TableCell className="text-center">
    94	                                        <div className="flex justify-center space-x-2">
    95	                                            <Link to={`/master-data/categories/edit/${category.id}`}>
    96	                                                <Button variant="secondary" size="sm">
    97	                                                    <FaEdit />
    98	                                                </Button>
    99	                                            </Link>
   100	                                            <Button
   101	                                                variant="danger"
   102	                                                size="sm"
   103	                                                onClick={() => handleDelete(category)}
   104	                                                disabled={deleteCategoryMutation.isPending && deleteCategoryMutation.variables === category.id}
   105	                                            >
   106	                                                <FaTrash />
   107	                                            </Button>
   108	                                        </div>
   109	                                    </TableCell>
   110	                                </TableRow>
   111	                            ))
   112	                        )}
   113	                    </TableBody>
   114	                </Table>
   115	            )}
   116	        </Card>
   117	    );
   118	    
   119	    async function handleDelete(category: Category) {
   120	        openConfirmDialog({
   121	            title: "Konfirmasi Hapus",
   122	            message: `Apakah Anda yakin ingin menghapus kategori item "${category.name}"?`,
   123	            variant: "danger",
   124	            confirmText: "Hapus",
   125	            onConfirm: () => {
   126	                deleteCategoryMutation.mutate(category.id);
   127	            }
   128	        });
   129	    };
   130	};
   131	
   132	export default CategoryList;


===============================================
= File: ./src/pages/master-data/ItemList.tsx 
===============================================

     1	import { useEffect, useState } from "react";
     2	import { Link } from "react-router-dom";
     3	import { useQuery, useQueryClient, useMutation, keepPreviousData } from '@tanstack/react-query';
     4	import { supabase } from "../../lib/supabase";
     5	import { FaPlus, FaEdit, FaTrash, FaSearch } from "react-icons/fa";
     6	import { Card } from "../../components/ui/Card";
     7	import { Button } from "../../components/ui/Button";
     8	import { Table, TableHead, TableBody, TableRow, TableCell, TableHeader } from "../../components/ui/Table";
     9	import { Pagination } from "../../components/ui/Pagination";
    10	import { useConfirmDialog } from "../../components/ui/ConfirmDialog";
    11	
    12	// Define the expected structure for an item within this component scope for clarity
    13	interface Item {
    14	    id: string;
    15	    name: string;
    16	    code: string;
    17	    // Add other fields if needed by other parts of the component
    18	}
    19	
    20	function ItemList() {
    21	    const [search, setSearch] = useState("");
    22	    const [debouncedSearch, setDebouncedSearch] = useState("");
    23	    const [currentPage, setCurrentPage] = useState(1);
    24	    const [itemsPerPage, setItemsPerPage] = useState(10);
    25	    const { openConfirmDialog } = useConfirmDialog();
    26	    const queryClient = useQueryClient();
    27	
    28	    // Update this effect to use a more precise invalidation
    29	    useEffect(() => {
    30	        // Invalidate all item queries regardless of page, search, or itemsPerPage parameters
    31	        queryClient.invalidateQueries({
    32	            queryKey: ['items'],
    33	            refetchType: 'all'
    34	        });
    35	    }, [queryClient]);
    36	
    37	    const fetchItems = async (page: number, searchTerm: string, limit: number) => {
    38	        const from = (page - 1) * limit;
    39	        const to = from + limit - 1;
    40	
    41	        let itemsQuery = supabase
    42	            .from("items")
    43	            .select(`
    44	                id,
    45	                name,
    46	                code,
    47	                base_price,
    48	                sell_price,
    49	                stock,
    50	                category_id,
    51	                type_id,
    52	                unit_id
    53	            `);
    54	
    55	        let countQuery = supabase
    56	            .from("items")
    57	            .select('id', { count: 'exact' });
    58	
    59	        if (searchTerm) {
    60	            itemsQuery = itemsQuery.or(`name.ilike.%${searchTerm}%,code.ilike.%${searchTerm}%`);
    61	            countQuery = countQuery.or(`name.ilike.%${searchTerm}%,code.ilike.%${searchTerm}%`);
    62	        }
    63	
    64	        const [itemsResult, countResult, categoriesRes, typesRes, unitsRes] = await Promise.all([
    65	            itemsQuery.order('name').range(from, to),
    66	            countQuery,
    67	            supabase.from("item_categories").select("id, name"),
    68	            supabase.from("item_types").select("id, name"),
    69	            supabase.from("item_units").select("id, name")
    70	        ]);
    71	
    72	        if (itemsResult.error) throw itemsResult.error;
    73	        if (countResult.error) throw countResult.error;
    74	
    75	        const categories = categoriesRes.data || [];
    76	        const types = typesRes.data || [];
    77	        const units = unitsRes.data || [];
    78	
    79	        const completedData = (itemsResult.data || []).map(item => ({
    80	            id: item.id,
    81	            name: item.name,
    82	            code: item.code,
    83	            base_price: item.base_price,
    84	            sell_price: item.sell_price,
    85	            stock: item.stock,
    86	            category: { name: categories?.find(cat => cat.id === item.category_id)?.name || "" },
    87	            type: { name: types?.find(t => t.id === item.type_id)?.name || "" },
    88	            unit: { name: units?.find(u => u.id === item.unit_id)?.name || "" }
    89	        }));
    90	
    91	        return { items: completedData, totalItems: countResult.count || 0 };
    92	    };
    93	
    94	    useEffect(() => {
    95	        const timer = setTimeout(() => {
    96	            setDebouncedSearch(search);
    97	            setCurrentPage(1);
    98	        }, 500);
    99	
   100	        return () => clearTimeout(timer);
   101	    }, [search]);
   102	
   103	    const { data, isLoading, isError, error, isFetching } = useQuery({
   104	        queryKey: ['items', currentPage, debouncedSearch, itemsPerPage],
   105	        queryFn: () => fetchItems(currentPage, debouncedSearch, itemsPerPage),
   106	        placeholderData: keepPreviousData,
   107	        staleTime: 30 * 1000, // Reduced from 5 minutes to 30 seconds
   108	        refetchOnMount: true, // Ensure refetch when component mounts
   109	    });
   110	
   111	    const deleteItemMutation = useMutation({
   112	        mutationFn: async (itemId: string) => {
   113	            const { error } = await supabase.from("items").delete().eq("id", itemId);
   114	            if (error) throw error;
   115	        },
   116	        onSuccess: () => {
   117	            // Update the invalidation strategy to match the useEffect approach
   118	            queryClient.invalidateQueries({
   119	                queryKey: ['items'],
   120	                refetchType: 'all'
   121	            });
   122	            console.log("Item berhasil dihapus dan data di-refetch untuk semua ukuran halaman.");
   123	        },
   124	        onError: (error) => {
   125	            console.error("Error deleting item:", error);
   126	            alert("Gagal menghapus item. Silakan coba lagi.");
   127	        },
   128	    });
   129	
   130	    const items = data?.items || [];
   131	    const totalItems = data?.totalItems || 0;
   132	
   133	    const handlePageChange = (newPage: number) => {
   134	        setCurrentPage(newPage);
   135	    };
   136	
   137	    const handleItemsPerPageChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
   138	        setItemsPerPage(Number(e.target.value));
   139	        setCurrentPage(1);
   140	    };
   141	
   142	    const totalPages = Math.ceil(totalItems / itemsPerPage);
   143	
   144	    return (
   145	        <Card className={isFetching ? 'opacity-75 transition-opacity duration-300' : ''}>
   146	            <div className="flex justify-between items-center mb-6">
   147	                <h1 className="text-2xl font-bold text-gray-800">Daftar Item</h1>
   148	
   149	                <Link
   150	                    to="/master-data/items/add">
   151	                    <Button variant="primary" className="flex items-center">
   152	                        <FaPlus className="mr-2" />
   153	                        Tambah Item Baru
   154	                    </Button>
   155	                </Link>
   156	            </div>
   157	
   158	            <div className="mb-4 relative">
   159	                <input
   160	                    type="text"
   161	                    placeholder="Cari item..."
   162	                    className="w-full p-3 border rounded-md pl-10"
   163	                    value={search}
   164	                    onChange={(e) => setSearch(e.target.value)} />
   165	                <FaSearch className="absolute left-3 top-3.5 text-gray-400" />
   166	            </div>
   167	
   168	            {isLoading && <div className="text-center p-6">Memuat data awal...</div>}
   169	            {isError && <div className="text-center p-6 text-red-500">Error: {error instanceof Error ? error.message : 'Gagal memuat data'}</div>}
   170	
   171	            {!isLoading && (
   172	                <>
   173	                    <Table>
   174	                        <TableHead>
   175	                            <TableRow>
   176	                                <TableHeader>Nama Item</TableHeader>
   177	                                <TableHeader>Kode</TableHeader>
   178	                                <TableHeader>Kategori</TableHeader>
   179	                                <TableHeader>Jenis</TableHeader>
   180	                                <TableHeader>Satuan</TableHeader>
   181	                                <TableHeader className="text-right">Harga Pokok</TableHeader>
   182	                                <TableHeader className="text-right">Harga Jual</TableHeader>
   183	                                <TableHeader className="text-right">Stok</TableHeader>
   184	                                <TableHeader className="text-center">Aksi</TableHeader>
   185	                            </TableRow>
   186	                        </TableHead>
   187	                        <TableBody>
   188	                            {items.length === 0 ? (
   189	                                <TableRow>
   190	                                    <TableCell
   191	                                        colSpan={9}
   192	                                        className="text-center text-gray-600"
   193	                                    >
   194	                                        {debouncedSearch ? `Tidak ada item dengan nama "${debouncedSearch}"` : "Tidak ada data item yang ditemukan"}
   195	                                    </TableCell>
   196	                                </TableRow>
   197	                            ) : (
   198	                                items.map((item) => (
   199	                                    <TableRow key={item.id}>
   200	                                        <TableCell>{item.name}</TableCell>
   201	                                        <TableCell>{item.code}</TableCell>
   202	                                        <TableCell>{item.category.name}</TableCell>
   203	                                        <TableCell>{item.type.name}</TableCell>
   204	                                        <TableCell>{item.unit.name}</TableCell>
   205	                                        <TableCell className="text-right">
   206	                                            {item.base_price.toLocaleString("id-ID", {
   207	                                                style: "currency",
   208	                                                currency: "IDR",
   209	                                            })}
   210	                                        </TableCell>
   211	                                        <TableCell className="text-right">
   212	                                            {item.sell_price.toLocaleString("id-ID", {
   213	                                                style: "currency",
   214	                                                currency: "IDR",
   215	                                            })}
   216	                                        </TableCell>
   217	                                        <TableCell className="text-right">{item.stock}</TableCell>
   218	                                        <TableCell className="text-center">
   219	                                            <div className="flex justify-center space-x-2">
   220	                                                <Link
   221	                                                    to={`/master-data/items/edit/${item.id}`}
   222	                                                >
   223	                                                    <Button variant="secondary" size="sm">
   224	                                                        <FaEdit />
   225	                                                    </Button>
   226	                                                </Link>
   227	                                                <Button
   228	                                                    variant="danger"
   229	                                                    size="sm"
   230	                                                    onClick={() => handleDelete(item)}
   231	                                                    disabled={deleteItemMutation.isPending && deleteItemMutation.variables === item.id}
   232	                                                >
   233	                                                    {deleteItemMutation.isPending && deleteItemMutation.variables === item.id ? (
   234	                                                        <span className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin inline-block"></span>
   235	                                                    ) : (
   236	                                                        <FaTrash />
   237	                                                    )}
   238	                                                </Button>
   239	                                            </div>
   240	                                        </TableCell>
   241	                                    </TableRow>
   242	                                ))
   243	                            )}
   244	                        </TableBody>
   245	                    </Table>
   246	                    <Pagination
   247	                        currentPage={currentPage}
   248	                        totalPages={totalPages}
   249	                        totalItems={totalItems}
   250	                        itemsPerPage={itemsPerPage}
   251	                        itemsCount={items.length}
   252	                        onPageChange={handlePageChange}
   253	                        onItemsPerPageChange={handleItemsPerPageChange}
   254	                    />
   255	                </>
   256	            )}
   257	        </Card>
   258	    );
   259	
   260	    async function handleDelete(item: Item) {
   261	        openConfirmDialog({
   262	            title: "Konfirmasi Hapus",
   263	            message: `Apakah Anda yakin ingin menghapus item "${item.name}"?`,
   264	            variant: "danger",
   265	            confirmText: "Hapus",
   266	            onConfirm: () => {
   267	                // Use item.id for the mutation
   268	                deleteItemMutation.mutate(item.id);
   269	            }
   270	        });
   271	    }
   272	}
   273	
   274	export default ItemList;


===============================================
= File: ./src/pages/master-data/SupplierList.tsx 
===============================================

     1	// src/pages/master-data/SupplierList.tsx
     2	import { useState } from 'react';
     3	import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
     4	import { supabase } from '../../lib/supabase';
     5	import { Loading } from '../../components/ui/Loading';
     6	import { Card, CardHeader, CardTitle } from '../../components/ui/Card';
     7	import DetailEditModal from '../../components/ui/DetailEditModal';
     8	import ImageCard from '../../components/ui/ImageCard';
     9	import AddItemCard from '../../components/ui/AddItemCard';
    10	
    11	interface Supplier {
    12	    id: string;
    13	    name: string;
    14	    address: string | null;
    15	    phone?: string | null;
    16	    email?: string | null;
    17	    contact_person?: string | null;
    18	    image_url?: string | null;
    19	}
    20	
    21	interface FieldConfig {
    22	    key: string;
    23	    label: string;
    24	    type?: 'text' | 'email' | 'tel' | 'textarea';
    25	    editable?: boolean;
    26	}
    27	
    28	const SupplierList = () => {
    29	    const [selectedSupplier, setSelectedSupplier] = useState<Supplier | null>(null);
    30	    const [isModalOpen, setIsModalOpen] = useState(false);
    31	    const queryClient = useQueryClient();
    32	
    33	    const fetchSuppliers = async () => {
    34	        const { data, error } = await supabase
    35	            .from('suppliers')
    36	            .select('id, name, address, phone, email, contact_person, image_url')
    37	            .order('name');
    38	
    39	        if (error) throw error;
    40	        return data || [];
    41	    };
    42	
    43	    const { data: suppliers, isLoading, isError, error } = useQuery<Supplier[]>({
    44	        queryKey: ['suppliers'],
    45	        queryFn: fetchSuppliers,
    46	        staleTime: 30 * 1000,
    47	        refetchOnMount: true,
    48	    });
    49	
    50	    const queryError = error instanceof Error ? error : null;
    51	
    52	    const updateSupplier = async (updatedData: Partial<Supplier>) => {
    53	        if (!selectedSupplier) return;
    54	
    55	        const { error } = await supabase
    56	            .from('suppliers')
    57	            .update(updatedData)
    58	            .eq('id', selectedSupplier.id);
    59	
    60	        if (error) throw error;
    61	    };
    62	
    63	    const updateSupplierMutation = useMutation({
    64	        mutationFn: updateSupplier,
    65	        onSuccess: () => {
    66	            queryClient.invalidateQueries({ queryKey: ['suppliers'] });
    67	        },
    68	        onError: (error) => {
    69	            console.error("Error updating supplier:", error);
    70	            alert(`Gagal memperbarui supplier: ${error.message}`);
    71	        },
    72	    });
    73	
    74	    const openSupplierDetail = (supplier: Supplier) => {
    75	        setSelectedSupplier(supplier);
    76	        setIsModalOpen(true);
    77	    };
    78	
    79	    const closeModal = () => {
    80	        setIsModalOpen(false);
    81	        setSelectedSupplier(null);
    82	    };
    83	
    84	    const supplierFields: FieldConfig[] = [
    85	        { key: 'name', label: 'Nama Supplier', type: 'text', editable: true },
    86	        { key: 'address', label: 'Alamat', type: 'textarea', editable: true },
    87	        { key: 'phone', label: 'Telepon', type: 'tel', editable: true },
    88	        { key: 'email', label: 'Email', type: 'email', editable: true },
    89	        { key: 'contact_person', label: 'Kontak Person', type: 'text', editable: true }
    90	    ];
    91	
    92	    return (
    93	        <Card className="bg-transparent shadow-none border-none">
    94	            <CardHeader className="mb-6 px-0">
    95	                <CardTitle>Daftar Supplier</CardTitle>
    96	            </CardHeader>
    97	
    98	            {isLoading && <Loading message="Memuat supplier..." />}
    99	            {isError && <div className="text-center text-red-500">Error: {queryError?.message || 'Gagal memuat data'}</div>}
   100	
   101	            {!isLoading && !isError && (
   102	                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-24">
   103	                    {(suppliers || []).map((supplier) => (
   104	                        <ImageCard
   105	                            key={supplier.id}
   106	                            id={supplier.id}
   107	                            title={supplier.name}
   108	                            subtitle={supplier.address || 'Alamat tidak tersedia'}
   109	                            imageUrl={supplier.image_url ?? undefined}
   110	                            fallbackImage={`https://picsum.photos/seed/${supplier.id}/400/300`}
   111	                            onClick={() => openSupplierDetail(supplier)}
   112	                        />
   113	                    ))}
   114	                    <AddItemCard label="Tambah Supplier Baru" to="/master-data/suppliers/add" />
   115	                </div>
   116	            )}
   117	            {!isLoading && suppliers && suppliers.length === 0 && !isError && (
   118	                <div className="text-center text-gray-500 mt-8">
   119	                    Belum ada data supplier.
   120	                </div>
   121	            )}
   122	
   123	            {isModalOpen && selectedSupplier && (
   124	                <DetailEditModal
   125	                    title={`Detail Supplier: ${selectedSupplier.name}`}
   126	                    data={selectedSupplier}
   127	                    fields={supplierFields}
   128	                    isOpen={isModalOpen}
   129	                    onClose={closeModal}
   130	                    onSave={async (updatedData) => {
   131	                        await updateSupplierMutation.mutateAsync(updatedData);
   132	                    }}
   133	                    imageUrl={selectedSupplier.image_url || undefined}
   134	                    imagePlaceholder={`https://picsum.photos/seed/${selectedSupplier.id}/400/300`}
   135	                />
   136	            )}
   137	        </Card>
   138	    );
   139	};
   140	
   141	export default SupplierList;


===============================================
= File: ./src/pages/master-data/TypeList.tsx 
===============================================

     1	import { Link } from "react-router-dom";
     2	import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
     3	import { supabase } from "../../lib/supabase";
     4	import { FaPlus, FaEdit, FaTrash } from "react-icons/fa";
     5	import { Card } from "../../components/ui/Card";
     6	import { Button } from "../../components/ui/Button";
     7	import { Table, TableHead, TableBody, TableRow, TableCell, TableHeader } from "../../components/ui/Table";
     8	import { Loading } from "../../components/ui/Loading";
     9	import { useConfirmDialog } from "../../components/ui/ConfirmDialog";
    10	
    11	interface ItemType {
    12	    id: string;
    13	    name: string;
    14	    description: string;
    15	}
    16	
    17	const TypeList = () => {
    18	    const { openConfirmDialog } = useConfirmDialog();
    19	    const queryClient = useQueryClient();
    20	
    21	    const fetchTypes = async () => {
    22	        try {
    23	            const { data, error } = await supabase
    24	                .from("item_types")
    25	                .select("id, name, description")
    26	                .order("name");
    27	            if (error) throw error;
    28	            return data || [];
    29	        } catch (error) {
    30	            console.error("Error fetching item types:", error);
    31	            throw error;
    32	        }
    33	    };
    34	
    35	    const { data: types = [], isLoading, isError, error } = useQuery<ItemType[]>({
    36	        queryKey: ['types'],
    37	        queryFn: fetchTypes,
    38	        staleTime: 30 * 1000,
    39	        refetchOnMount: true,
    40	    });
    41	
    42	    const queryError = error instanceof Error ? error : null;
    43	
    44	    const deleteTypeMutation = useMutation({
    45	        mutationFn: async (typeId: string) => {
    46	            const { error } = await supabase.from("item_types").delete().eq("id", typeId);
    47	            if (error) throw error;
    48	        },
    49	        onSuccess: () => {
    50	            queryClient.invalidateQueries({ queryKey: ['types'] });
    51	            console.log("Jenis item berhasil dihapus, cache diinvalidasi.");
    52	        },
    53	        onError: (error) => {
    54	            console.error("Error deleting item type:", error);
    55	            alert(`Gagal menghapus jenis item: ${error.message}`);
    56	        },
    57	    });
    58	
    59	    const handleDelete = async (type: ItemType) => {
    60	        openConfirmDialog({
    61	            title: "Konfirmasi Hapus",
    62	            message: `Apakah Anda yakin ingin menghapus jenis item "${type.name}"? Data yang terhubung mungkin akan terpengaruh.`,
    63	            variant: 'danger',
    64	            confirmText: "Hapus",
    65	            onConfirm: () => {
    66	                deleteTypeMutation.mutate(type.id);
    67	            }
    68	        });
    69	    };
    70	
    71	    return (
    72	        <Card>
    73	            <div className="flex justify-between items-center mb-6">
    74	                <h1 className="text-2xl font-bold text-gray-800">Daftar Jenis Item</h1>
    75	                <Link to="/master-data/types/add">
    76	                    <Button variant="primary">
    77	                        <FaPlus className="mr-2" />
    78	                        Tambah Jenis Item Baru
    79	                    </Button>
    80	                </Link>
    81	            </div>
    82	            
    83	            {isLoading ? (
    84	                <Loading />
    85	            ) : isError ? (
    86	                <div className="text-center p-6 text-red-500">Error: {queryError?.message || 'Gagal memuat data'}</div>
    87	            ) : (
    88	                <Table>
    89	                    <TableHead>
    90	                        <TableRow>
    91	                            <TableHeader>Nama Jenis</TableHeader>
    92	                            <TableHeader>Deskripsi</TableHeader>
    93	                            <TableHeader className="text-center">Aksi</TableHeader>
    94	                        </TableRow>
    95	                    </TableHead>
    96	                    <TableBody>
    97	                        {types.length === 0 ? (
    98	                            <TableRow>
    99	                                <TableCell colSpan={3} className="text-center text-gray-500">
   100	                                    Tidak ada data jenis item yang ditemukan
   101	                                </TableCell>
   102	                            </TableRow>
   103	                        ) : (
   104	                            types.map((type) => (
   105	                                <TableRow key={type.id}>
   106	                                    <TableCell>{type.name}</TableCell>
   107	                                    <TableCell>{type.description}</TableCell>
   108	                                    <TableCell className="text-center">
   109	                                        <div className="flex justify-center space-x-2">
   110	                                            <Link to={`/master-data/types/edit/${type.id}`}>
   111	                                                <Button variant="secondary" size="sm">
   112	                                                    <FaEdit />
   113	                                                </Button>
   114	                                            </Link>
   115	                                            <Button 
   116	                                                variant="danger"
   117	                                                size="sm"
   118	                                                onClick={() => handleDelete(type)}
   119	                                                disabled={deleteTypeMutation.isPending && deleteTypeMutation.variables === type.id}
   120	                                            >
   121	                                                <FaTrash />
   122	                                            </Button>
   123	                                        </div>
   124	                                    </TableCell>
   125	                                </TableRow>
   126	                            ))
   127	                        )}
   128	                    </TableBody>
   129	                </Table>
   130	            )}
   131	        </Card>
   132	    );
   133	};
   134	
   135	export default TypeList;


===============================================
= File: ./src/pages/master-data/UnitList.tsx 
===============================================

     1	import { Link } from "react-router-dom";
     2	import { useQuery, useMutation, useQueryClient, keepPreviousData } from '@tanstack/react-query';
     3	import { supabase } from "../../lib/supabase";
     4	import { FaPlus, FaEdit, FaTrash } from "react-icons/fa";
     5	import { Card } from "../../components/ui/Card";
     6	import { Button } from "../../components/ui/Button";
     7	import { Table, TableHead, TableBody, TableRow, TableCell, TableHeader } from "../../components/ui/Table";
     8	import { Loading } from "../../components/ui/Loading";
     9	import { useConfirmDialog } from "../../components/ui/ConfirmDialog";
    10	import { Pagination } from "../../components/ui/Pagination";
    11	import { useState } from "react";
    12	
    13	interface Unit {
    14	    id: string;
    15	    name: string;
    16	    description: string;
    17	}
    18	
    19	const UnitList = () => {
    20	    const [currentPage, setCurrentPage] = useState(1);
    21	    const [itemsPerPage, setItemsPerPage] = useState(10);
    22	    const { openConfirmDialog } = useConfirmDialog();
    23	    const queryClient = useQueryClient();
    24	
    25	    const fetchUnits = async (page: number, limit: number) => {
    26	        const from = (page - 1) * limit;
    27	        const to = from + limit - 1;
    28	
    29	        const { data, error, count } = await supabase
    30	            .from("item_units")
    31	            .select("id, name, description", { count: 'exact' })
    32	            .order("name")
    33	            .range(from, to);
    34	
    35	        if (error) throw error;
    36	        return { units: data || [], totalItems: count || 0 };
    37	    };
    38	
    39	    const { data, isLoading, isFetching, isError, error } = useQuery({
    40	        queryKey: ['units', currentPage, itemsPerPage],
    41	        queryFn: () => fetchUnits(currentPage, itemsPerPage),
    42	        placeholderData: keepPreviousData,
    43	        staleTime: 30 * 1000,
    44	        refetchOnMount: true,
    45	    });
    46	
    47	    const units = data?.units || [];
    48	    const totalItems = data?.totalItems || 0;
    49	    const queryError = error instanceof Error ? error : null;
    50	    const totalPages = Math.ceil(totalItems / itemsPerPage);
    51	
    52	    const deleteUnitMutation = useMutation({
    53	        mutationFn: async (unitId: string) => {
    54	            const { error } = await supabase.from("item_units").delete().eq("id", unitId);
    55	            if (error) throw error;
    56	        },
    57	        onSuccess: () => {
    58	            queryClient.invalidateQueries({ queryKey: ['units'] });
    59	        },
    60	        onError: (error) => {
    61	            console.error("Error deleting unit:", error);
    62	            alert(`Gagal menghapus satuan item: ${error.message}`);
    63	        },
    64	    });
    65	
    66	    const handleDelete = (unit: Unit) => {
    67	        openConfirmDialog({
    68	            title: "Konfirmasi Hapus",
    69	            message: `Apakah Anda yakin ingin menghapus satuan item "${unit.name}"? Data yang terhubung mungkin akan terpengaruh.`,
    70	            variant: 'danger',
    71	            confirmText: "Hapus",
    72	            onConfirm: () => {
    73	                deleteUnitMutation.mutate(unit.id);
    74	            }
    75	        });
    76	    };
    77	
    78	    const handlePageChange = (newPage: number) => {
    79	        setCurrentPage(newPage);
    80	    };
    81	
    82	    const handleItemsPerPageChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    83	        setItemsPerPage(Number(e.target.value));
    84	        setCurrentPage(1);
    85	    };
    86	
    87	    return (
    88	        <Card className={isFetching ? 'opacity-75 transition-opacity duration-300' : ''}>
    89	            <div className="flex justify-between items-center mb-6">
    90	                <h1 className="text-2xl font-bold text-gray-800">Daftar Satuan Item</h1>
    91	                <Link to="/master-data/units/add">
    92	                    <Button variant="primary" className="flex items-center">
    93	                        <FaPlus className="mr-2" />
    94	                        Tambah Satuan Baru
    95	                    </Button>
    96	                </Link>
    97	            </div>
    98	
    99	            {isLoading && !data ? (
   100	                <Loading message="Memuat satuan..." />
   101	            ) : isError ? (
   102	                <div className="text-center p-6 text-red-500">Error: {queryError?.message || 'Gagal memuat data'}</div>
   103	            ) : (
   104	                <Table>
   105	                    <TableHead>
   106	                        <TableRow>
   107	                            <TableHeader>Nama Satuan</TableHeader>
   108	                            <TableHeader>Deskripsi</TableHeader>
   109	                            <TableHeader className="text-center">Aksi</TableHeader>
   110	                        </TableRow>
   111	                    </TableHead>
   112	                    <TableBody>
   113	                        {units.length === 0 ? (
   114	                            <TableRow>
   115	                                <TableCell colSpan={3} className="text-center text-gray-500">
   116	                                    Tidak ada data satuan yang ditemukan
   117	                                </TableCell>
   118	                            </TableRow>
   119	                        ) : (
   120	                            units.map((unit) => (
   121	                                <TableRow key={unit.id}>
   122	                                    <TableCell>{unit.name}</TableCell>
   123	                                    <TableCell>{unit.description || '-'}</TableCell>
   124	                                    <TableCell className="text-center">
   125	                                        <div className="flex justify-center space-x-2">
   126	                                            <Link to={`/master-data/units/edit/${unit.id}`}>
   127	                                                <Button variant="secondary" size="sm">
   128	                                                    <FaEdit />
   129	                                                </Button>
   130	                                            </Link>
   131	                                            <Button 
   132	                                                variant="danger"
   133	                                                size="sm"
   134	                                                onClick={() => handleDelete(unit)}
   135	                                                disabled={deleteUnitMutation.isPending && deleteUnitMutation.variables === unit.id}
   136	                                            >
   137	                                                <FaTrash />
   138	                                            </Button>
   139	                                        </div>
   140	                                    </TableCell>
   141	                                </TableRow>
   142	                            ))
   143	                        )}
   144	                    </TableBody>
   145	                </Table>
   146	            )}
   147	            <Pagination
   148	                currentPage={currentPage}
   149	                totalPages={totalPages}
   150	                totalItems={totalItems}
   151	                itemsPerPage={itemsPerPage}
   152	                itemsCount={units.length}
   153	                onPageChange={handlePageChange}
   154	                onItemsPerPageChange={handleItemsPerPageChange}
   155	            />
   156	        </Card>
   157	    );
   158	};
   159	
   160	export default UnitList;


===============================================
= File: ./src/pages/purchases/CreatePurchase.tsx 
===============================================

     1	import React from 'react';
     2	import { useNavigate } from 'react-router-dom';
     3	import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '../../components/ui/Card';
     4	import { FormActions } from '../../components/ui/FormActions';
     5	import { FormSection } from '../../components/ui/FormComponents';
     6	import { usePurchaseForm } from '../../hooks/usePurchaseForm';
     7	import { useItemSelection } from '../../hooks/useItemSelection';
     8	import PurchaseInformationForm from '../../components/purchases/PurchaseInfoForm';
     9	import ItemSearchBar from '../../components/purchases/ItemSearchBar';
    10	import PurchaseItemsTable from '../../components/purchases/PurchaseItemsTable';
    11	
    12	const CreatePurchase: React.FC = () => {
    13	    const navigate = useNavigate();
    14	    const {
    15	        formData,
    16	        suppliers,
    17	        purchaseItems,
    18	        total,
    19	        loading,
    20	        handleChange,
    21	        addItem,
    22	        updateItem,
    23	        handleUnitChange,
    24	        updateItemVat,
    25	        updateItemExpiry,
    26	        updateItemBatchNo,
    27	        removeItem,
    28	        handleSubmit
    29	    } = usePurchaseForm();
    30	
    31	    const {
    32	        searchItem,
    33	        setSearchItem,
    34	        showItemDropdown,
    35	        setShowItemDropdown,
    36	        selectedItem,
    37	        setSelectedItem,
    38	        filteredItems,
    39	        getItemByID
    40	    } = useItemSelection();
    41	
    42	    const onHandleSubmit = (e: React.FormEvent) => {
    43	        handleSubmit(e);
    44	    };
    45	
    46	    const onHandleUnitChange = (id: string, unitName: string) => {
    47	        handleUnitChange(id, unitName, getItemByID);
    48	    };
    49	
    50	    return (
    51	        <Card>
    52	            <CardHeader>
    53	                <CardTitle>Tambah Pembelian Baru</CardTitle>
    54	            </CardHeader>
    55	            
    56	            <form onSubmit={onHandleSubmit}>
    57	                <CardContent className="space-y-6">
    58	                    <PurchaseInformationForm 
    59	                        formData={formData}
    60	                        suppliers={suppliers}
    61	                        handleChange={handleChange}
    62	                    />
    63	                    
    64	                    <FormSection title="Daftar Item">
    65	                        <ItemSearchBar 
    66	                            searchItem={searchItem}
    67	                            setSearchItem={setSearchItem}
    68	                            showItemDropdown={showItemDropdown}
    69	                            setShowItemDropdown={setShowItemDropdown}
    70	                            filteredItems={filteredItems}
    71	                            selectedItem={selectedItem}
    72	                            setSelectedItem={setSelectedItem}
    73	                            onAddItem={addItem}
    74	                        />
    75	                        
    76	                        <PurchaseItemsTable 
    77	                            purchaseItems={purchaseItems}
    78	                            total={total}
    79	                            isVatIncluded={formData.is_vat_included}
    80	                            onUpdateItem={updateItem}
    81	                            onRemoveItem={removeItem}
    82	                            onUpdateItemVat={updateItemVat}
    83	                            onUpdateItemExpiry={updateItemExpiry}
    84	                            onUpdateItemBatchNo={updateItemBatchNo}
    85	                            onUnitChange={onHandleUnitChange}
    86	                            getItemByID={getItemByID}
    87	                        />
    88	                    </FormSection>
    89	                </CardContent>
    90	                
    91	                <CardFooter className="flex justify-between">
    92	                    <FormActions
    93	                        onCancel={() => navigate('/purchases')}
    94	                        isSaving={loading}
    95	                        isDisabled={purchaseItems.length === 0}
    96	                    />
    97	                </CardFooter>
    98	            </form>
    99	        </Card>
   100	    );
   101	};
   102	
   103	export default CreatePurchase;


===============================================
= File: ./src/pages/purchases/PrintPurchase.tsx 
===============================================

     1	// src/pages/purchases/PrintPurchase.tsx
     2	import { useEffect, useState } from "react";
     3	
     4	interface PurchaseData {
     5	    id: string;
     6	    invoice_number: string;
     7	    date: string;
     8	    due_date: string | null;
     9	    so_number: string | null;
    10	    total: number;
    11	    payment_status: string;
    12	    payment_method: string;
    13	    vat_percentage: number;
    14	    is_vat_included: boolean;
    15	    vat_amount: number;
    16	    notes: string | null;
    17	    supplier: {
    18	        name: string;
    19	        address: string | null;
    20	        contact_person: string | null;
    21	    };
    22	    customer_name?: string;
    23	    customer_address?: string;
    24	    checked_by?: string;
    25	}
    26	
    27	interface PurchaseItem {
    28	    id: string;
    29	    item_id: string;
    30	    item: {
    31	        name: string;
    32	        code: string;
    33	    };
    34	    quantity: number;
    35	    price: number;
    36	    discount: number;
    37	    subtotal: number;
    38	    vat_percentage: number;
    39	    unit: string;
    40	    batch_no: string | null;
    41	    expiry_date: string | null;
    42	}
    43	
    44	interface Subtotals {
    45	    baseTotal: number;
    46	    discountTotal: number;
    47	    afterDiscountTotal: number;
    48	    vatTotal: number;
    49	    grandTotal: number;
    50	}
    51	
    52	const PrintPurchase = () => {
    53	    const [purchase, setPurchase] = useState<PurchaseData | null>(null);
    54	    const [items, setItems] = useState<PurchaseItem[]>([]);
    55	    const [subtotals, setSubtotals] = useState<Subtotals | null>(null);
    56	    const [loading, setLoading] = useState(true);
    57	
    58	    // Fungsi format currency dengan 2 digit desimal
    59	    const formatCurrency = (value: number | bigint, prefix = '') => {
    60	        const formatter = new Intl.NumberFormat('id-ID', {
    61	            minimumFractionDigits: 0,
    62	            maximumFractionDigits: 0
    63	        });
    64	        return `${prefix}${formatter.format(value)}`;
    65	    };
    66	
    67	    useEffect(() => {
    68	        // Ambil data dari sessionStorage yang disimpan oleh ViewPurchase
    69	        const storedData = sessionStorage.getItem('purchaseData');
    70	        if (storedData) {
    71	            const data = JSON.parse(storedData);
    72	            setPurchase(data.purchase);
    73	            setItems(data.items);
    74	            setSubtotals(data.subtotals);
    75	        }
    76	        setLoading(false);
    77	
    78	        // Auto print saat halaman selesai dimuat
    79	        const timer = setTimeout(() => {
    80	            window.print();
    81	        }, 1000);
    82	
    83	        return () => clearTimeout(timer);
    84	    }, []);
    85	
    86	    if (loading) {
    87	        return <div className="text-center p-6">Memuat data...</div>;
    88	    }
    89	
    90	    if (!purchase) {
    91	        return (
    92	            <div className="text-center p-6 text-red-500">
    93	                Data faktur tidak ditemukan. Silakan kembali ke halaman sebelumnya.
    94	            </div>
    95	        );
    96	    }
    97	
    98	    return (
    99	        <div className="faktur-a4 bg-white">
   100	            <div className="mb-8">
   101	                <h1 className="text-2xl font-bold text-center mb-2">FAKTUR PEMBELIAN</h1>
   102	                <div className="border-b-2 border-gray-400 mb-4"></div>
   103	
   104	                <div className="flex justify-between gap-4">
   105	                    <div className="w-1/2">
   106	                        {/* Supplier Info */}
   107	                        <div className="text-left mb-4">
   108	                            <h2 className="font-bold text-lg text-gray-800">{purchase.supplier?.name || 'Supplier'}</h2>
   109	                            <div className="text-sm text-gray-600">
   110	                                <p>{purchase.supplier?.address || ''}</p>
   111	                            </div>
   112	                        </div>
   113	                        
   114	                        {/* Customer Info */}
   115	                        <div className="text-left">
   116	                            <h2 className="text-sm text-gray-600">Customer:</h2>
   117	                            <div className="text-sm">
   118	                                <p className="font-bold">{purchase.customer_name || 'Data belum tersedia'}</p>
   119	                                <p className="text-gray-600">{purchase.customer_address || 'Alamat belum tersedia'}</p>
   120	                            </div>
   121	                        </div>
   122	                    </div>
   123	                    
   124	                    <div className="w-1/2">
   125	                        {/* Faktur Info */}
   126	                        <div className="bg-gray-50 p-3 rounded text-sm">
   127	                            <div className="grid grid-cols-[1fr,auto,1fr] mb-1">
   128	                                <span className="text-left font-bold">No. Faktur</span>
   129	                                <span className="px-2">:</span>
   130	                                <span>{purchase.invoice_number}</span>
   131	                            </div>
   132	                            <div className="grid grid-cols-[1fr,auto,1fr] mb-1">
   133	                                <span className="text-left">Tanggal</span>
   134	                                <span className="px-2">:</span>
   135	                                <span>{new Date(purchase.date).toLocaleDateString('id-ID')}</span>
   136	                            </div>
   137	                            <div className="grid grid-cols-[1fr,auto,1fr] mb-1">
   138	                                <span className="text-left">Jatuh Tempo</span>
   139	                                <span className="px-2">:</span>
   140	                                <span>{purchase.due_date ? new Date(purchase.due_date).toLocaleDateString('id-ID') : '-'}</span>
   141	                            </div>
   142	                            {purchase.so_number && (
   143	                                <div className="grid grid-cols-[1fr,auto,1fr] mb-1">
   144	                                    <span className="text-left">No. SO</span>
   145	                                    <span className="px-2">:</span>
   146	                                    <span>{purchase.so_number}</span>
   147	                                </div>
   148	                            )}
   149	                        </div>
   150	                    </div>
   151	                </div>
   152	            </div>
   153	
   154	            <div className="mb-8">
   155	                <table className="w-full border-collapse">
   156	                    <thead>
   157	                        <tr className="bg-gray-100 text-xs">
   158	                            <th className="border p-1 pt-2 pb-2 text-left">No.</th>
   159	                            <th className="border p-1 pt-2 pb-2 text-left">Kode</th>
   160	                            <th className="border p-1 pt-2 pb-2 text-left">Nama Item</th>
   161	                            <th className="border p-1 pt-2 pb-2 text-center">Batch</th>
   162	                            <th className="border p-1 pt-2 pb-2 text-center">Exp</th>
   163	                            <th className="border p-1 pt-2 pb-2 text-center">Qty</th>
   164	                            <th className="border p-1 pt-2 pb-2 text-center">Satuan</th>
   165	                            <th className="border p-1 pt-2 pb-2 text-right">Harga</th>
   166	                            <th className="border p-1 pt-2 pb-2 text-right">Disc</th>
   167	                            {!purchase.is_vat_included && (
   168	                                <th className="border p-1 pt-2 pb-2 text-right">PPN</th>
   169	                            )}
   170	                            <th className="border p-1 pt-2 pb-2 text-right">Subtotal</th>
   171	                        </tr>
   172	                    </thead>
   173	                    <tbody>
   174	                        {items.length === 0 ? (
   175	                            <tr>
   176	                                <td colSpan={purchase.is_vat_included ? 10 : 11} className="border p-2 pt-3 pb-3 text-center text-gray-500 text-xs">
   177	                                    Tidak ada item
   178	                                </td>
   179	                            </tr>
   180	                        ) : (
   181	                            items.map((item, index) => (
   182	                                <tr key={item.id} className="hover:bg-gray-50 text-xs">
   183	                                    <td className="border p-1 pt-2 pb-2 text-center">{index + 1}</td>
   184	                                    <td className="border p-1 pt-2 pb-2">{item.item?.code || '-'}</td>
   185	                                    <td className="border p-1 pt-2 pb-2">{item.item?.name || 'Item tidak ditemukan'}</td>
   186	                                    <td className="border p-1 pt-2 pb-2 text-center">{item.batch_no || '-'}</td>
   187	                                    <td className="border p-1 pt-2 pb-2 text-center">
   188	                                        {item.expiry_date ? new Date(item.expiry_date).toLocaleDateString('id-ID', { year: 'numeric', month: '2-digit', day: '2-digit' }) : '-'}
   189	                                    </td>
   190	                                    <td className="border p-1 pt-2 pb-2 text-center">{item.quantity}</td>
   191	                                    <td className="border p-1 pt-2 pb-2 text-center">{item.unit}</td>
   192	                                    <td className="border p-1 pt-2 pb-2 text-right">{formatCurrency(item.price)}</td>
   193	                                    <td className="border p-1 pt-2 pb-2 text-right">{item.discount > 0 ? `${item.discount}%` : '-'}</td>
   194	                                    {!purchase.is_vat_included && (
   195	                                        <td className="border p-1 pt-2 pb-2 text-right">{item.vat_percentage > 0 ? `${item.vat_percentage}%` : '-'}</td>
   196	                                    )}
   197	                                    <td className="border p-1 pt-2 pb-2 text-right">{formatCurrency(item.subtotal)}</td>
   198	                                </tr>
   199	                            ))
   200	                        )}
   201	                    </tbody>
   202	                </table>
   203	            </div>
   204	
   205	            <div className="flex justify-between mt-8">
   206	                <div className="max-w-md">
   207	                    <div className="grid grid-cols-[1fr,auto,1fr] mb-1 text-sm">
   208	                        <span className="text-left">Diperiksa oleh</span>
   209	                        <span className="px-2">:</span>
   210	                        <span>{purchase.supplier?.contact_person || purchase.checked_by || '-'}</span>
   211	                    </div>
   212	                    
   213	                    <div className="grid grid-cols-[1fr,auto,1fr] mb-1 text-sm">
   214	                        <span className="text-left">Status Pembayaran</span>
   215	                        <span className="px-2">:</span>
   216	                        <span className={`${purchase.payment_status === 'paid' ? 'text-green-600' :
   217	                            purchase.payment_status === 'partial' ? 'text-orange-600' : 'text-red-600'
   218	                        }`}>
   219	                            {purchase.payment_status === 'paid' ? 'Lunas' :
   220	                                purchase.payment_status === 'partial' ? 'Sebagian' : 'Belum Dibayar'}
   221	                        </span>
   222	                    </div>
   223	                    
   224	                    <div className="grid grid-cols-[1fr,auto,1fr] mb-1 text-sm">
   225	                        <span className="text-left">Metode Pembayaran</span>
   226	                        <span className="px-2">:</span>
   227	                        <span>{purchase.payment_method === 'cash' ? 'Tunai' : purchase.payment_method === 'transfer' ? 'Transfer' : purchase.payment_method === 'credit' ? 'Kredit' : purchase.payment_method}</span>
   228	                    </div>
   229	                    
   230	                    <div className="grid grid-cols-[1fr,auto,1fr] mb-1 text-sm">
   231	                        <span className="text-left">Catatan</span>
   232	                        <span className="px-2">:</span>
   233	                        <span>{purchase.notes || '-'}</span>
   234	                    </div>
   235	                    {purchase.is_vat_included && (
   236	                        <div className="grid grid-cols-[1fr,auto,1fr] mt-2">
   237	                            <span className="text-left"></span>
   238	                            <span className="px-2"></span>
   239	                            <span className="text-sm">* PPN sudah termasuk dalam harga</span>
   240	                        </div>
   241	                    )}
   242	                </div>
   243	                
   244	                {subtotals && (
   245	                    <div className="border p-4 min-w-[250px] text-sm">
   246	                        <div className="grid grid-cols-[1fr,auto,1fr] mb-1">
   247	                            <span className="text-left">Subtotal</span>
   248	                            <span className="px-2">:</span>
   249	                            <span className="font-mono text-right">{formatCurrency(subtotals.baseTotal)}</span>
   250	                        </div>
   251	
   252	                        <div className="grid grid-cols-[1fr,auto,1fr] mb-1">
   253	                            <span className="text-left">Diskon</span>
   254	                            <span className="px-2">:</span>
   255	                            <span className="font-mono text-right">{formatCurrency(subtotals.discountTotal, '-')}</span>
   256	                        </div>
   257	
   258	                        <div className="grid grid-cols-[1fr,auto,1fr] mb-1">
   259	                            <span className="text-left">Setelah Diskon</span>
   260	                            <span className="px-2">:</span>
   261	                            <span className="font-mono text-right">{formatCurrency(subtotals.afterDiscountTotal)}</span>
   262	                        </div>
   263	
   264	                        {!purchase.is_vat_included && (
   265	                            <div className="grid grid-cols-[1fr,auto,1fr] mb-1">
   266	                                <span className="text-left">PPN</span>
   267	                                <span className="px-2">:</span>
   268	                                <span className="font-mono text-right">{formatCurrency(subtotals.vatTotal, '+')}</span>
   269	                            </div>
   270	                        )}
   271	
   272	                        <div className="border-t pt-2 grid grid-cols-[1fr,auto,1fr] font-bold">
   273	                            <span className="text-left">TOTAL</span>
   274	                            <span className="px-2">:</span>
   275	                            <span className="font-mono text-right">{formatCurrency(subtotals.grandTotal)}</span>
   276	                        </div>
   277	                    </div>
   278	                )}
   279	            </div>
   280	        </div>
   281	    );
   282	};
   283	
   284	export default PrintPurchase;


===============================================
= File: ./src/pages/purchases/PurchaseList.tsx 
===============================================

     1	import { useEffect, useState } from "react";
     2	import { Link } from "react-router-dom";
     3	import { useQuery, useMutation, useQueryClient, keepPreviousData } from '@tanstack/react-query';
     4	import { supabase } from "../../lib/supabase";
     5	import { FaPlus, FaEdit, FaTrash, FaSearch, FaEye, FaFileUpload } from "react-icons/fa";
     6	import { Card } from "../../components/ui/Card";
     7	import { Button } from "../../components/ui/Button";
     8	import { Table, TableHead, TableBody, TableRow, TableCell, TableHeader } from "../../components/ui/Table";
     9	import { Pagination } from "../../components/ui/Pagination";
    10	import { Loading } from "../../components/ui/Loading";
    11	import { Badge } from "../../components/ui/Badge";
    12	import { useConfirmDialog } from "../../components/ui/ConfirmDialog";
    13	
    14	interface Purchase {
    15	    id: string;
    16	    invoice_number: string;
    17	    date: string;
    18	    total: number;
    19	    payment_status: string;
    20	    payment_method: string;
    21	    supplier: {
    22	        name: string;
    23	    };
    24	}
    25	
    26	const PurchaseList = () => {
    27	    const [search, setSearch] = useState("");
    28	    const [debouncedSearch, setDebouncedSearch] = useState("");
    29	    const [currentPage, setCurrentPage] = useState(1);
    30	    const [itemsPerPage, setItemsPerPage] = useState(10);
    31	    const queryClient = useQueryClient();
    32	    const { openConfirmDialog } = useConfirmDialog();
    33	
    34	    useEffect(() => {
    35	        const timer = setTimeout(() => {
    36	            setDebouncedSearch(search);
    37	            setCurrentPage(1);
    38	        }, 500);
    39	
    40	        return () => clearTimeout(timer);
    41	    }, [search]);
    42	
    43	    const fetchPurchases = async (page: number, searchTerm: string, limit: number) => {
    44	        try {
    45	            let query = supabase
    46	                .from("purchases")
    47	                .select(`
    48	                    id,
    49	                    invoice_number,
    50	                    date,
    51	                    total,
    52	                    payment_status,
    53	                    payment_method,
    54	                    supplier_id,
    55	                    supplier:suppliers(name)
    56	                `);
    57	
    58	            if (searchTerm) {
    59	                query = query.or(`invoice_number.ilike.%${searchTerm}%,suppliers.name.ilike.%${searchTerm}%`);
    60	            }
    61	
    62	            const countQuery = supabase
    63	                .from("purchases")
    64	                .select('id', { count: 'exact' });
    65	
    66	            if (searchTerm) {
    67	                countQuery.or(`invoice_number.ilike.%${searchTerm}%,suppliers.name.ilike.%${searchTerm}%`);
    68	            }
    69	
    70	            const { count, error: countError } = await countQuery;
    71	            if (countError) throw countError;
    72	
    73	            const from = (page - 1) * limit;
    74	            const to = from + limit - 1;
    75	
    76	            const { data, error } = await query
    77	                .order('date', { ascending: false })
    78	                .range(from, to);
    79	
    80	            if (error) throw error;
    81	
    82	            const transformedData = data?.map(item => ({
    83	                ...item,
    84	                supplier: Array.isArray(item.supplier) ? item.supplier[0] : item.supplier
    85	            })) || [];
    86	            return { purchases: transformedData, totalItems: count || 0 };
    87	        } catch (error) {
    88	            console.error("Error fetching purchases:", error);
    89	            throw error;
    90	        }
    91	    };
    92	
    93	    const { data, isLoading, isFetching } = useQuery({
    94	        queryKey: ['purchases', currentPage, debouncedSearch, itemsPerPage],
    95	        queryFn: () => fetchPurchases(currentPage, debouncedSearch, itemsPerPage),
    96	        placeholderData: keepPreviousData,
    97	        staleTime: 30 * 1000,
    98	        refetchOnMount: true,
    99	    });
   100	
   101	    const purchases = data?.purchases || [];
   102	    const totalItems = data?.totalItems || 0;
   103	
   104	    const deletePurchaseMutation = useMutation({
   105	        mutationFn: async (id: string) => {
   106	            const { data: purchaseItems, error: itemsError } = await supabase
   107	                .from("purchase_items")
   108	                .select("item_id, quantity, unit")
   109	                .eq("purchase_id", id);
   110	
   111	            if (itemsError) throw itemsError;
   112	
   113	            for (const item of purchaseItems || []) {
   114	                const { data: itemData } = await supabase
   115	                    .from('items')
   116	                    .select('stock, base_unit, unit_conversions')
   117	                    .eq('id', item.item_id)
   118	                    .single();
   119	
   120	                if (itemData) {
   121	                    let quantityInBaseUnit = item.quantity;
   122	
   123	                    if (item.unit !== itemData.base_unit) {
   124	                        const unitConversion = itemData.unit_conversions.find(
   125	                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
   126	                            (uc: { unit_name: any; }) => uc.unit_name === item.unit
   127	                        );
   128	
   129	                        if (unitConversion) {
   130	                            quantityInBaseUnit = item.quantity / unitConversion.conversion_rate;
   131	                        }
   132	                    }
   133	
   134	                    const newStock = Math.max(0, (itemData.stock || 0) - quantityInBaseUnit);
   135	                    await supabase
   136	                        .from('items').update({ stock: newStock }).eq('id', item.item_id);
   137	                }
   138	            }
   139	
   140	            const { error } = await supabase
   141	                .from("purchases")
   142	                .delete()
   143	                .eq("id", id);
   144	
   145	            if (error) throw error;
   146	        },
   147	        onSuccess: () => {
   148	            queryClient.invalidateQueries({ queryKey: ['purchases'] });
   149	        },
   150	        onError: (error) => {
   151	            console.error("Error deleting purchase:", error);
   152	            alert(`Gagal menghapus pembelian: ${error.message}`);
   153	        },
   154	    });
   155	
   156	    const handlePageChange = (newPage: number) => {
   157	        setCurrentPage(newPage);
   158	    };
   159	
   160	    const handleItemsPerPageChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
   161	        setItemsPerPage(Number(e.target.value));
   162	        setCurrentPage(1);
   163	    };
   164	
   165	    const handleDelete = (purchase: Purchase) => {
   166	        openConfirmDialog({
   167	            title: "Konfirmasi Hapus",
   168	            message: `Apakah Anda yakin ingin menghapus pembelian dengan nomor faktur "${purchase.invoice_number}"? Tindakan ini juga akan mengembalikan stok item yang terkait.`,
   169	            variant: 'danger',
   170	            confirmText: 'Hapus',
   171	            onConfirm: () => {
   172	                deletePurchaseMutation.mutate(purchase.id);
   173	            }
   174	        });
   175	    };
   176	
   177	    const getStatusBadgeVariant = (status: string) => {
   178	        switch (status) {
   179	            case 'paid':
   180	                return 'success';
   181	            case 'partial':
   182	                return 'warning';
   183	            case 'unpaid':
   184	                return 'danger';
   185	            default:
   186	                return 'secondary';
   187	        }
   188	    };
   189	
   190	    const getStatusLabel = (status: string) => {
   191	        switch (status) {
   192	            case 'paid':
   193	                return 'Lunas';
   194	            case 'partial':
   195	                return 'Sebagian';
   196	            case 'unpaid':
   197	                return 'Belum Bayar';
   198	            default:
   199	                return status;
   200	        }
   201	    };
   202	
   203	    const getPaymentMethodLabel = (method: string) => {
   204	        switch (method) {
   205	            case 'cash':
   206	                return 'Tunai';
   207	            case 'transfer':
   208	                return 'Transfer';
   209	            case 'credit':
   210	                return 'Kredit';
   211	            default:
   212	                return method;
   213	        }
   214	    };
   215	
   216	    const totalPages = Math.ceil(totalItems / itemsPerPage);
   217	
   218	    return (
   219	        <Card className={isFetching ? 'opacity-75 transition-opacity duration-300' : ''}>
   220	            <div className="flex justify-between items-center mb-6">
   221	                <h1 className="text-2xl font-bold text-gray-800">Daftar Pembelian</h1>
   222	
   223	                <div className="flex space-x-2">
   224	                    <Link to="/purchases/upload-invoice">
   225	                        <Button variant="secondary">
   226	                            <FaFileUpload className="mr-2" />
   227	                            Upload Faktur
   228	                        </Button>
   229	                    </Link>
   230	                    
   231	                    <Link to="/purchases/create">
   232	                        <Button variant="primary">
   233	                            <FaPlus className="mr-2" />
   234	                            Tambah Pembelian Baru
   235	                        </Button>
   236	                    </Link>
   237	                </div>
   238	            </div>
   239	
   240	            <div className="mb-4 relative">
   241	                <input
   242	                    type="text"
   243	                    placeholder="Cari nomor faktur atau supplier..."
   244	                    className="w-full p-3 border rounded-md pl-10"
   245	                    value={search}
   246	                    onChange={(e) => setSearch(e.target.value)}
   247	                />
   248	                <FaSearch className="absolute left-3 top-3.5 text-gray-400" />
   249	            </div>
   250	
   251	            {isLoading ? (
   252	                <Loading message="Memuat data pembelian..." />
   253	            ) : (
   254	                <> 
   255	                    <Table>
   256	                        <TableHead>
   257	                            <TableRow>
   258	                                <TableHeader>No. Faktur</TableHeader>
   259	                                <TableHeader>Tanggal</TableHeader>
   260	                                <TableHeader>Supplier</TableHeader>
   261	                                <TableHeader className="text-right">Total</TableHeader>
   262	                                <TableHeader className="text-center">Status Pembayaran</TableHeader>
   263	                                <TableHeader className="text-center">Metode Pembayaran</TableHeader>
   264	                                <TableHeader className="text-center">Aksi</TableHeader>
   265	                            </TableRow>
   266	                        </TableHead>
   267	                        <TableBody>
   268	                            {purchases.length === 0 ? (
   269	                                <TableRow>
   270	                                    <TableCell
   271	                                        colSpan={7}
   272	                                        className="text-center text-gray-600"
   273	                                    >
   274	                                        {debouncedSearch ? `Tidak ada pembelian dengan kata kunci "${debouncedSearch}"` : "Tidak ada data pembelian yang ditemukan"}
   275	                                    </TableCell>
   276	                                </TableRow>
   277	                            ) : (
   278	                                purchases.map((purchase) => (
   279	                                    <TableRow key={purchase.id}>
   280	                                        <TableCell>{purchase.invoice_number}</TableCell>
   281	                                        <TableCell>
   282	                                            {new Date(purchase.date).toLocaleDateString('id-ID', {
   283	                                                day: '2-digit',
   284	                                                month: 'short',
   285	                                                year: 'numeric'
   286	                                            })}
   287	                                        </TableCell>
   288	                                        <TableCell>{purchase.supplier?.name || 'Tidak ada supplier'}</TableCell>
   289	                                        <TableCell className="text-right">
   290	                                            {purchase.total.toLocaleString('id-ID', {
   291	                                                style: 'currency',
   292	                                                currency: 'IDR'
   293	                                            })}
   294	                                        </TableCell>
   295	                                        <TableCell className="text-center">
   296	                                            <Badge variant={getStatusBadgeVariant(purchase.payment_status)}>
   297	                                                {getStatusLabel(purchase.payment_status)}
   298	                                            </Badge>
   299	                                        </TableCell>
   300	                                        <TableCell className="text-center">
   301	                                            {getPaymentMethodLabel(purchase.payment_method)}
   302	                                        </TableCell>
   303	                                        <TableCell className="text-center">
   304	                                            <div className="flex justify-center space-x-2">
   305	                                                <Link to={`/purchases/view/${purchase.id}`}>
   306	                                                    <Button variant="primary" size="sm">
   307	                                                        <FaEye />
   308	                                                    </Button>
   309	                                                </Link>
   310	                                                <Link to={`/purchases/edit/${purchase.id}`}>
   311	                                                    <Button variant="secondary" size="sm">
   312	                                                        <FaEdit />
   313	                                                    </Button>
   314	                                                </Link>
   315	                                                <Button
   316	                                                    variant="danger"
   317	                                                    size="sm"
   318	                                                    onClick={() => handleDelete(purchase)}
   319	                                                    disabled={deletePurchaseMutation.isPending && deletePurchaseMutation.variables === purchase.id}
   320	                                                >
   321	                                                    {deletePurchaseMutation.isPending && deletePurchaseMutation.variables === purchase.id ?
   322	                                                        <span className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin inline-block"></span> : <FaTrash /> }
   323	                                                </Button>
   324	                                            </div>
   325	                                        </TableCell>
   326	                                    </TableRow>
   327	                                ))
   328	                            )}
   329	                        </TableBody>
   330	                    </Table>
   331	
   332	                    <Pagination
   333	                        currentPage={currentPage}
   334	                        totalPages={totalPages}
   335	                        totalItems={totalItems}
   336	                        itemsPerPage={itemsPerPage}
   337	                        itemsCount={purchases.length}
   338	                        onPageChange={handlePageChange}
   339	                        onItemsPerPageChange={handleItemsPerPageChange}
   340	                    />
   341	                </>
   342	            )}
   343	        </Card>
   344	    );
   345	};
   346	
   347	export default PurchaseList;


===============================================
= File: ./src/pages/purchases/UploadInvoice.tsx 
===============================================

     1	/* eslint-disable @typescript-eslint/no-explicit-any */
     2	// src/pages/purchases/UploadInvoice.tsx
     3	import { useState } from 'react';
     4	import { useNavigate } from 'react-router-dom';
     5	import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '../../components/ui/Card';
     6	import { Button } from '../../components/ui/Button';
     7	import { FaUpload, FaArrowLeft, FaCheck } from 'react-icons/fa';
     8	import { uploadAndExtractInvoice } from '../../services/invoiceService';
     9	
    10	const UploadInvoice = () => {
    11	    const navigate = useNavigate();
    12	    const [file, setFile] = useState<File | null>(null);
    13	    const [error, setError] = useState<string | null>(null);
    14	    const [loading, setLoading] = useState(false);
    15	    const [responseData, setResponseData] = useState<any>(null);
    16	    const [uploadStep, setUploadStep] = useState<'upload' | 'confirm'>('upload');
    17	
    18	    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    19	        const selectedFile = e.target.files?.[0];
    20	        setError(null);
    21	        
    22	        if (!selectedFile) {
    23	            return;
    24	        }
    25	        
    26	        // Validasi tipe file
    27	        const validTypes = ['image/png', 'image/jpeg', 'image/jpg'];
    28	        if (!validTypes.includes(selectedFile.type)) {
    29	            setError('Tipe file tidak valid. Harap unggah file PNG atau JPG.');
    30	            setFile(null);
    31	            return;
    32	        }
    33	        
    34	        // Validasi ukuran file (5MB = 5 * 1024 * 1024 bytes)
    35	        const maxSize = 5 * 1024 * 1024;
    36	        if (selectedFile.size > maxSize) {
    37	            setError('Ukuran file terlalu besar. Maksimum 5MB.');
    38	            setFile(null);
    39	            return;
    40	        }
    41	        
    42	        setFile(selectedFile);
    43	    };
    44	
    45	    const handleUpload = async () => {
    46	        if (!file) {
    47	            setError('Silakan pilih file gambar faktur terlebih dahulu.');
    48	            return;
    49	        }
    50	        
    51	        try {
    52	            setLoading(true);
    53	            const data = await uploadAndExtractInvoice(file);
    54	            setResponseData(data);
    55	            setUploadStep('confirm');
    56	        } catch (err: any) {
    57	            setError(`Gagal mengunggah dan mengekstrak faktur: ${err.message || 'Terjadi kesalahan'}`);
    58	        } finally {
    59	            setLoading(false);
    60	        }
    61	    };
    62	    
    63	    const handleConfirm = async () => {
    64	        if (!responseData) return;
    65	        
    66	        try {
    67	            setLoading(true);
    68	            // const result = await saveInvoiceToDatabase(responseData);
    69	            alert('Faktur berhasil disimpan!');
    70	            navigate('/purchases');
    71	        } catch (err: any) {
    72	            setError(err.message || 'Gagal menyimpan data faktur');
    73	        } finally {
    74	            setLoading(false);
    75	        }
    76	    };
    77	    
    78	    const handleCancel = () => {
    79	        if (uploadStep === 'confirm') {
    80	            setUploadStep('upload');
    81	            setResponseData(null);
    82	        } else {
    83	            navigate('/purchases');
    84	        }
    85	    };
    86	
    87	    return (
    88	        <Card>
    89	            <CardHeader>
    90	                <CardTitle>
    91	                    {uploadStep === 'upload' ? 'Unggah Faktur Pembelian' : 'Konfirmasi Data Faktur'}
    92	                </CardTitle>
    93	            </CardHeader>
    94	            
    95	            <CardContent>
    96	                {error && (
    97	                    <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
    98	                        {error}
    99	                    </div>
   100	                )}
   101	                
   102	                {uploadStep === 'upload' ? (
   103	                    <div className="space-y-6">
   104	                        <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
   105	                            <div className="mb-4">
   106	                                <FaUpload className="mx-auto h-12 w-12 text-gray-400" />
   107	                                <p className="mt-2 text-sm text-gray-600">
   108	                                    Klik atau seret untuk mengunggah gambar faktur
   109	                                </p>
   110	                                <p className="text-xs text-gray-500">
   111	                                    PNG, JPG (Maks. 5MB)
   112	                                </p>
   113	                            </div>
   114	                            
   115	                            <input
   116	                                type="file"
   117	                                accept="image/png,image/jpeg,image/jpg"
   118	                                onChange={handleFileChange}
   119	                                className="w-full"
   120	                            />
   121	                            
   122	                            {file && (
   123	                                <div className="mt-4 text-left p-3 bg-gray-50 rounded-md">
   124	                                    <p className="text-sm font-medium text-gray-700">File dipilih:</p>
   125	                                    <p className="text-sm text-gray-600">{file.name}</p>
   126	                                    <p className="text-xs text-gray-500">
   127	                                        {(file.size / (1024 * 1024)).toFixed(2)} MB
   128	                                    </p>
   129	                                </div>
   130	                            )}
   131	                        </div>
   132	                        
   133	                        <div className="flex justify-end space-x-2">
   134	                            <Button 
   135	                                type="button" 
   136	                                variant="outline" 
   137	                                onClick={handleCancel}
   138	                            >
   139	                                <span className="flex items-center">
   140	                                    <FaArrowLeft className="mr-2" />
   141	                                    <span>Kembali</span>
   142	                                </span>
   143	                            </Button>
   144	                            
   145	                            <Button 
   146	                                type="button" 
   147	                                onClick={handleUpload} 
   148	                                disabled={!file || loading}
   149	                                isLoading={loading}
   150	                            >
   151	                                <FaUpload className="mr-2" /> Unggah & Ekstrak
   152	                            </Button>
   153	                        </div>
   154	                    </div>
   155	                ) : (
   156	                    <div className="space-y-6">
   157	                        {responseData && (
   158	                            <div>
   159	                                <h3 className="text-lg font-medium mb-4">Data yang Diekstraksi:</h3>
   160	                                
   161	                                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
   162	                                    <div className="border rounded-md p-4">
   163	                                        <h4 className="font-medium text-gray-700 mb-2">Informasi Perusahaan</h4>
   164	                                        <div className="space-y-1 text-sm">
   165	                                            <p><span className="font-medium">Nama:</span> {responseData.company_details?.name || '-'}</p>
   166	                                            <p><span className="font-medium">Alamat:</span> {responseData.company_details?.address || '-'}</p>
   167	                                            <p><span className="font-medium">No. Lisensi PBF:</span> {responseData.company_details?.license_pbf || '-'}</p>
   168	                                            <p><span className="font-medium">No. Lisensi DAK:</span> {responseData.company_details?.license_dak || '-'}</p>
   169	                                            <p><span className="font-medium">No. Sertifikat CDOB:</span> {responseData.company_details?.certificate_cdob || '-'}</p>
   170	                                        </div>
   171	                                    </div>
   172	                                    
   173	                                    <div className="border rounded-md p-4">
   174	                                        <h4 className="font-medium text-gray-700 mb-2">Informasi Faktur</h4>
   175	                                        <div className="space-y-1 text-sm">
   176	                                            <p><span className="font-medium">No. Faktur:</span> {responseData.invoice_information?.invoice_number || '-'}</p>
   177	                                            <p><span className="font-medium">Tanggal:</span> {responseData.invoice_information?.invoice_date || '-'}</p>
   178	                                            <p><span className="font-medium">No. SO:</span> {responseData.invoice_information?.so_number || '-'}</p>
   179	                                            <p><span className="font-medium">Jatuh Tempo:</span> {responseData.invoice_information?.due_date || '-'}</p>
   180	                                        </div>
   181	                                    </div>
   182	                                </div>
   183	                                
   184	                                <div className="border rounded-md p-4 mb-6">
   185	                                    <h4 className="font-medium text-gray-700 mb-2">Informasi Pelanggan</h4>
   186	                                    <div className="space-y-1 text-sm">
   187	                                        <p><span className="font-medium">Nama:</span> {responseData.customer_information?.customer_name || '-'}</p>
   188	                                        <p><span className="font-medium">Alamat:</span> {responseData.customer_information?.customer_address || '-'}</p>
   189	                                        {responseData.customer_information?.customer_id && (
   190	                                            <p><span className="font-medium">ID:</span> {responseData.customer_information.customer_id}</p>
   191	                                        )}
   192	                                    </div>
   193	                                </div>
   194	                                
   195	                                <div className="mb-6">
   196	                                    <h4 className="font-medium text-gray-700 mb-2">Daftar Produk</h4>
   197	                                    <div className="overflow-x-auto">
   198	                                        <table className="min-w-full bg-white border">
   199	                                            <thead className="bg-gray-100">
   200	                                                <tr>
   201	                                                    <th className="py-2 px-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">SKU</th>
   202	                                                    <th className="py-2 px-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nama Produk</th>
   203	                                                    <th className="py-2 px-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Qty</th>
   204	                                                    <th className="py-2 px-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Satuan</th>
   205	                                                    <th className="py-2 px-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">No. Batch</th>
   206	                                                    <th className="py-2 px-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Exp</th>
   207	                                                    <th className="py-2 px-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Harga</th>
   208	                                                    <th className="py-2 px-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
   209	                                                </tr>
   210	                                            </thead>
   211	                                            <tbody className="divide-y divide-gray-200">
   212	                                                {responseData.product_list?.map((product: any, index: number) => (
   213	                                                    <tr key={index} className="text-sm">
   214	                                                        <td className="py-2 px-3">{product.sku || '-'}</td>
   215	                                                        <td className="py-2 px-3">{product.product_name || '-'}</td>
   216	                                                        <td className="py-2 px-3 text-center">{product.quantity || '-'}</td>
   217	                                                        <td className="py-2 px-3 text-center">{product.unit || '-'}</td>
   218	                                                        <td className="py-2 px-3 text-center">{product.batch_number || '-'}</td>
   219	                                                        <td className="py-2 px-3 text-center">{product.expiry_date || '-'}</td>
   220	                                                        <td className="py-2 px-3 text-right">
   221	                                                            {typeof product.unit_price === 'number' 
   222	                                                                ? product.unit_price.toLocaleString('id-ID') 
   223	                                                                : '-'}
   224	                                                        </td>
   225	                                                        <td className="py-2 px-3 text-right">
   226	                                                            {typeof product.total_price === 'number' 
   227	                                                                ? product.total_price.toLocaleString('id-ID') 
   228	                                                                : '-'}
   229	                                                        </td>
   230	                                                    </tr>
   231	                                                ))}
   232	                                            </tbody>
   233	                                        </table>
   234	                                    </div>
   235	                                </div>
   236	                                
   237	                                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
   238	                                    <div className="border rounded-md p-4">
   239	                                        <h4 className="font-medium text-gray-700 mb-2">Informasi Tambahan</h4>
   240	                                        <div className="space-y-1 text-sm">
   241	                                            <p><span className="font-medium">Diperiksa oleh:</span> {responseData.additional_information?.checked_by || '-'}</p>
   242	                                        </div>
   243	                                    </div>
   244	                                    
   245	                                    <div className="border rounded-md p-4">
   246	                                        <h4 className="font-medium text-gray-700 mb-2">Ringkasan Pembayaran</h4>
   247	                                        <div className="space-y-1 text-sm">
   248	                                            <p><span className="font-medium">Total Harga:</span> {responseData.payment_summary?.total_price?.toLocaleString('id-ID') || '-'}</p>
   249	                                            <p><span className="font-medium">PPN:</span> {responseData.payment_summary?.vat?.toLocaleString('id-ID') || '-'}</p>
   250	                                            <p className="font-medium">Total Faktur: 
   251	                                                <span className="text-blue-600 ml-2">
   252	                                                    {responseData.payment_summary?.invoice_total?.toLocaleString('id-ID') || '-'}
   253	                                                </span>
   254	                                            </p>
   255	                                        </div>
   256	                                    </div>
   257	                                </div>
   258	                            </div>
   259	                        )}
   260	                    </div>
   261	                )}
   262	            </CardContent>
   263	            
   264	            {uploadStep === 'confirm' && (
   265	                <CardFooter className="flex justify-end space-x-2">
   266	                    <Button 
   267	                        type="button" 
   268	                        variant="outline" 
   269	                        onClick={handleCancel}
   270	                    >
   271	                        <span className="flex items-center">
   272	                            <FaArrowLeft className="mr-2" />
   273	                            <span>Kembali</span>
   274	                        </span>
   275	                    </Button>
   276	                    
   277	                    <Button 
   278	                        type="button" 
   279	                        onClick={handleConfirm} 
   280	                        disabled={loading}
   281	                        isLoading={loading}
   282	                    >
   283	                        <FaCheck className="mr-2" />
   284	                        Konfirmasi & Simpan
   285	                    </Button>
   286	                </CardFooter>
   287	            )}
   288	        </Card>
   289	    );
   290	};
   291	
   292	export default UploadInvoice;


===============================================
= File: ./src/pages/purchases/ViewPurchase.tsx 
===============================================

     1	// src/pages/purchases/ViewPurchase.tsx
     2	import { useEffect, useState, useRef } from "react";
     3	import { useParams, useNavigate } from "react-router-dom";
     4	import { supabase } from "../../lib/supabase";
     5	import { Card } from "../../components/ui/Card";
     6	import { Button } from "../../components/ui/Button";
     7	import { Loading } from "../../components/ui/Loading";
     8	import { FaArrowLeft, FaSearchPlus, FaSearchMinus, FaPrint } from "react-icons/fa";
     9	
    10	interface PurchaseData {
    11	    id: string;
    12	    invoice_number: string;
    13	    date: string;
    14	    due_date: string | null;
    15	    so_number: string | null;
    16	    total: number;
    17	    payment_status: string;
    18	    payment_method: string;
    19	    vat_percentage: number;
    20	    is_vat_included: boolean;
    21	    vat_amount: number;
    22	    notes: string | null;
    23	    supplier: {
    24	        name: string;
    25	        address: string | null;
    26	        contact_person: string | null;
    27	    };
    28	    customer_name?: string;
    29	    customer_address?: string;
    30	    checked_by?: string;
    31	}
    32	
    33	interface PurchaseItem {
    34	    id: string;
    35	    item_id: string;
    36	    item: {
    37	        name: string;
    38	        code: string;
    39	    };
    40	    quantity: number;
    41	    price: number;
    42	    discount: number;
    43	    subtotal: number;
    44	    vat_percentage: number;
    45	    unit: string;
    46	    batch_no: string | null;
    47	    expiry_date: string | null;
    48	}
    49	
    50	const ViewPurchase = () => {
    51	    const { id } = useParams<{ id: string }>();
    52	    const navigate = useNavigate();
    53	    const printRef = useRef<HTMLDivElement>(null);
    54	
    55	    const [purchase, setPurchase] = useState<PurchaseData | null>(null);
    56	    const [items, setItems] = useState<PurchaseItem[]>([]);
    57	    const [loading, setLoading] = useState(true);
    58	    const [scale, setScale] = useState(1); // Add state for scaling the preview
    59	
    60	    useEffect(() => {
    61	        if (id) {
    62	            fetchPurchaseData(id);
    63	        }
    64	    }, [id]);
    65	
    66	    const fetchPurchaseData = async (purchaseId: string) => {
    67	        try {
    68	            setLoading(true);
    69	
    70	            // Fetch purchase data with supplier information
    71	            const { data: purchaseData, error: purchaseError } = await supabase
    72	                .from("purchases")
    73	                .select(`
    74	          *,
    75	          supplier:suppliers(
    76	            name,
    77	            address,
    78	            contact_person
    79	          )
    80	        `)
    81	                .eq("id", purchaseId)
    82	                .single();
    83	
    84	            if (purchaseError) throw purchaseError;
    85	
    86	            // Fetch purchase items with item information
    87	            const { data: itemsData, error: itemsError } = await supabase
    88	                .from("purchase_items")
    89	                .select(`
    90	          *,
    91	          item:items(
    92	            name,
    93	            code
    94	          )
    95	        `)
    96	                .eq("purchase_id", purchaseId)
    97	                .order("id");
    98	
    99	            if (itemsError) throw itemsError;
   100	
   101	            setPurchase(purchaseData);
   102	            setItems(itemsData || []);
   103	        } catch (error) {
   104	            console.error("Error fetching purchase data:", error);
   105	        } finally {
   106	            setLoading(false);
   107	        }
   108	    };
   109	
   110	    // Calculate subtotals
   111	    const calculateSubtotals = () => {
   112	        // Base prices total (before discounts and VAT)
   113	        const baseTotal = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
   114	
   115	        // Total discounts
   116	        const discountTotal = items.reduce((sum, item) => {
   117	            const itemTotal = item.price * item.quantity;
   118	            const discountAmount = (itemTotal * item.discount) / 100;
   119	            return sum + discountAmount;
   120	        }, 0);
   121	
   122	        // Total after discounts
   123	        const afterDiscountTotal = baseTotal - discountTotal;
   124	
   125	        // Total VAT
   126	        const vatTotal = purchase?.is_vat_included
   127	            ? 0 // If VAT included, it's already in the item prices
   128	            : items.reduce((sum, item) => {
   129	                const itemTotal = item.price * item.quantity;
   130	                const afterDiscount = itemTotal - (itemTotal * item.discount / 100);
   131	                const vatAmount = afterDiscount * (item.vat_percentage / 100);
   132	                return sum + vatAmount;
   133	            }, 0);
   134	
   135	        // Grand total
   136	        const grandTotal = purchase?.is_vat_included
   137	            ? afterDiscountTotal // If VAT included, no need to add VAT
   138	            : afterDiscountTotal + vatTotal;
   139	
   140	        return {
   141	            baseTotal,
   142	            discountTotal,
   143	            afterDiscountTotal,
   144	            vatTotal,
   145	            grandTotal
   146	        };
   147	    };
   148	
   149	    const openPrintableVersion = () => {
   150	        // Simpan data faktur di sessionStorage untuk digunakan oleh halaman cetak
   151	        sessionStorage.setItem('purchaseData', JSON.stringify({
   152	            purchase: purchase,
   153	            items: items,
   154	            subtotals: calculateSubtotals()
   155	        }));
   156	        
   157	        // Buka tab baru dengan halaman cetak
   158	        const printWindow = window.open('/purchases/print-view', '_blank');
   159	        if (printWindow)
   160	            printWindow.focus();
   161	    };
   162	
   163	    const increaseScale = () => {
   164	        setScale(prev => Math.min(prev + 0.1, 1.5));
   165	    };
   166	
   167	    const decreaseScale = () => {
   168	        setScale(prev => Math.max(prev - 0.1, 0.5));
   169	    };
   170	
   171	    const formatCurrency = (value: number | bigint, prefix = '') => {
   172	        const formatter = new Intl.NumberFormat('id-ID', {
   173	            minimumFractionDigits: 0,
   174	            maximumFractionDigits: 0
   175	        });
   176	        return `${prefix}${formatter.format(value)}`;
   177	    };
   178	
   179	    if (loading) {
   180	        return <Loading message="Memuat data pembelian..." />;
   181	    }
   182	
   183	    if (!purchase) {
   184	        return (
   185	            <div className="text-center p-6">
   186	                <p className="text-red-500 mb-4">Data pembelian tidak ditemukan</p>
   187	                <Button onClick={() => navigate("/purchases")}>
   188	                    <FaArrowLeft className="mr-2" /> Kembali ke Daftar Pembelian
   189	                </Button>
   190	            </div>
   191	        );
   192	    }
   193	
   194	    const {
   195	        baseTotal,
   196	        discountTotal,
   197	        afterDiscountTotal,
   198	        vatTotal,
   199	        grandTotal
   200	    } = calculateSubtotals();
   201	
   202	    return (
   203	        <Card>
   204	            <div className="flex justify-between items-center mb-4 print:hidden">
   205	                <Button 
   206	                    type="button"
   207	                    variant="outline" 
   208	                    onClick={() => navigate("/purchases")}
   209	                >
   210	                    <div className="flex items-center">
   211	                        <FaArrowLeft className="mr-2" /> <span>Kembali</span>
   212	                    </div>
   213	                </Button>
   214	                <div className="flex items-center gap-2">
   215	                    <Button type="button" variant="outline" onClick={decreaseScale} title="Perkecil">
   216	                        <FaSearchMinus />
   217	                    </Button>
   218	                    <span className="mx-1 text-sm">{Math.round(scale * 100)}%</span>
   219	                    <Button type="button" variant="outline" onClick={increaseScale} title="Perbesar">
   220	                        <FaSearchPlus />
   221	                    </Button>
   222	                    <Button onClick={openPrintableVersion} variant="primary">
   223	                        <FaPrint className="mr-2" /> Print View
   224	                    </Button>
   225	                </div>
   226	            </div>
   227	
   228	            <div className="overflow-auto" style={{ maxHeight: "85vh" }}>
   229	                <div
   230	                    ref={printRef}
   231	                    className="bg-white p-6 shadow print:shadow-none transition-transform duration-200"
   232	                    style={{ 
   233	                        width: "215mm", 
   234	                        minHeight: "330mm", 
   235	                        margin: "0 auto",
   236	                        transform: `scale(${scale})`,
   237	                        transformOrigin: "top center"
   238	                    }}
   239	                >
   240	                    <div className="mb-8">
   241	                        <h1 className="text-2xl font-bold text-center mb-2">FAKTUR PEMBELIAN</h1>
   242	                        <div className="border-b-2 border-gray-400 mb-4"></div>
   243	
   244	                        <div className="flex justify-between gap-4">
   245	                            <div className="w-1/2">
   246	                                {/* Supplier Info */}
   247	                                <div className="text-left mb-4">
   248	                                    <h2 className="font-bold text-lg text-gray-800">{purchase.supplier?.name || 'Supplier'}</h2>
   249	                                    <div className="text-sm text-gray-600">
   250	                                        <p>{purchase.supplier?.address || ''}</p>
   251	                                    </div>
   252	                                </div>
   253	                                
   254	                                {/* Customer Info */}
   255	                                <div className="text-left">
   256	                                    <h2 className="text-sm text-gray-600">Customer:</h2>
   257	                                    <div className="text-sm ">
   258	                                        <p className="font-bold">{purchase.customer_name || 'Data belum tersedia'}</p>
   259	                                        <p className="text-gray-600">{purchase.customer_address || 'Alamat belum tersedia'}</p>
   260	                                    </div>
   261	                                </div>
   262	                            </div>
   263	                            
   264	                            <div className="w-1/2">
   265	                                {/* Faktur Info */}
   266	                                <div className="bg-gray-50 p-3 rounded text-sm">
   267	                                    <div className="grid grid-cols-[1fr,auto,1fr] mb-1">
   268	                                        <span className="text-left font-bold">No. Faktur</span>
   269	                                        <span className="px-2">:</span>
   270	                                        <span>{purchase.invoice_number}</span>
   271	                                    </div>
   272	                                    <div className="grid grid-cols-[1fr,auto,1fr] mb-1">
   273	                                        <span className="text-left">Tanggal</span>
   274	                                        <span className="px-2">:</span>
   275	                                        <span>{new Date(purchase.date).toLocaleDateString('id-ID')}</span>
   276	                                    </div>
   277	                                    <div className="grid grid-cols-[1fr,auto,1fr] mb-1">
   278	                                        <span className="text-left">Jatuh Tempo</span>
   279	                                        <span className="px-2">:</span>
   280	                                        <span>{purchase.due_date ? new Date(purchase.due_date).toLocaleDateString('id-ID') : '-'}</span>
   281	                                    </div>
   282	                                    {purchase.so_number && (
   283	                                        <div className="grid grid-cols-[1fr,auto,1fr] mb-1">
   284	                                            <span className="text-left">No. SO</span>
   285	                                            <span className="px-2">:</span>
   286	                                            <span>{purchase.so_number}</span>
   287	                                        </div>
   288	                                    )}
   289	                                </div>
   290	                            </div>
   291	                        </div>
   292	                    </div>
   293	
   294	                    <div className="mb-8">
   295	                        <table className="w-full border-collapse">
   296	                            <thead>
   297	                                <tr className="bg-gray-100 text-xs">
   298	                                    <th className="border p-1 text-left">No.</th>
   299	                                    <th className="border p-1 text-left">Kode</th>
   300	                                    <th className="border p-1 text-left">Nama Item</th>
   301	                                    <th className="border p-1 text-center">Batch</th>
   302	                                    <th className="border p-1 text-center">Exp</th>
   303	                                    <th className="border p-1 text-center">Qty</th>
   304	                                    <th className="border p-1 text-center">Satuan</th>
   305	                                    <th className="border p-1 text-right">Harga</th>
   306	                                    <th className="border p-1 text-right">Disc</th>
   307	                                    {!purchase.is_vat_included && (
   308	                                        <th className="border p-1 text-right">PPN</th>
   309	                                    )}
   310	                                    <th className="border p-1 text-right">Subtotal</th>
   311	                                </tr>
   312	                            </thead>
   313	                            <tbody>
   314	                                {items.length === 0 ? (
   315	                                    <tr>
   316	                                        <td colSpan={purchase.is_vat_included ? 10 : 11} className="border p-2 text-center text-gray-500 text-xs">
   317	                                            Tidak ada item
   318	                                        </td>
   319	                                    </tr>
   320	                                ) : (
   321	                                    items.map((item, index) => (
   322	                                        <tr key={item.id} className="hover:bg-gray-50 text-xs">
   323	                                            <td className="border p-1 text-center">{index + 1}</td>
   324	                                            <td className="border p-1">{item.item?.code || '-'}</td>
   325	                                            <td className="border p-1">{item.item?.name || 'Item tidak ditemukan'}</td>
   326	                                            <td className="border p-1 text-center">{item.batch_no || '-'}</td>
   327	                                            <td className="border p-1 text-center">
   328	                                                {item.expiry_date ? new Date(item.expiry_date).toLocaleDateString('id-ID', { year: 'numeric', month: '2-digit', day: '2-digit' }) : '-'}
   329	                                            </td>
   330	                                            <td className="border p-1 text-center">{item.quantity}</td>
   331	                                            <td className="border p-1 text-center">{item.unit}</td>
   332	                                            <td className="border p-1 text-right">{formatCurrency(item.price)}</td>
   333	                                            <td className="border p-1 text-right">{item.discount > 0 ? `${item.discount}%` : '-'}</td>
   334	                                            {!purchase.is_vat_included && (
   335	                                                <td className="border p-1 text-right">{item.vat_percentage > 0 ? `${item.vat_percentage}%` : '-'}</td>
   336	                                            )}
   337	                                            <td className="border p-1 text-right">{formatCurrency(item.subtotal)}</td>
   338	                                        </tr>
   339	                                    ))
   340	                                )}
   341	                            </tbody>
   342	                        </table>
   343	                    </div>
   344	
   345	                    <div className="flex justify-between mt-8">
   346	                        <div className="max-w-md">
   347	                            <div className="grid grid-cols-[1fr,auto,1fr] mb-1 text-sm">
   348	                                <span className="text-left">Diperiksa oleh</span>
   349	                                <span className="px-2">:</span>
   350	                                <span>{purchase.supplier?.contact_person || purchase.checked_by || '-'}</span>
   351	                            </div>
   352	                            
   353	                            <div className="grid grid-cols-[1fr,auto,1fr] mb-1 text-sm">
   354	                                <span className="text-left">Status Pembayaran</span>
   355	                                <span className="px-2">:</span>
   356	                                <span className={`${purchase.payment_status === 'paid' ? 'text-green-600' :
   357	                                    purchase.payment_status === 'partial' ? 'text-orange-600' : 'text-red-600'
   358	                                }`}>
   359	                                    {purchase.payment_status === 'paid' ? 'Lunas' :
   360	                                        purchase.payment_status === 'partial' ? 'Sebagian' : 'Belum Dibayar'}
   361	                                </span>
   362	                            </div>
   363	                            
   364	                            <div className="grid grid-cols-[1fr,auto,1fr] mb-1 text-sm">
   365	                                <span className="text-left">Metode Pembayaran</span>
   366	                                <span className="px-2">:</span>
   367	                                <span>{purchase.payment_method === 'cash' ? 'Tunai' : purchase.payment_method === 'transfer' ? 'Transfer' : purchase.payment_method === 'credit' ? 'Kredit' : purchase.payment_method}</span>
   368	                            </div>
   369	                            
   370	                            <div className="grid grid-cols-[1fr,auto,1fr] mb-1 text-sm">
   371	                                <span className="text-left">Catatan</span>
   372	                                <span className="px-2">:</span>
   373	                                <span>{purchase.notes || '-'}</span>
   374	                            </div>
   375	                            {purchase.is_vat_included && (
   376	                                <div className="grid grid-cols-[1fr,auto,1fr] mt-2">
   377	                                    <span className="text-left"></span>
   378	                                    <span className="px-2"></span>
   379	                                    <span className="text-sm">* PPN sudah termasuk dalam harga</span>
   380	                                </div>
   381	                            )}
   382	                        </div>
   383	                        
   384	                        <div className="border p-4 min-w-[250px] text-sm">
   385	                            <div className="grid grid-cols-[1fr,auto,1fr] mb-1">
   386	                                <span className="text-left">Subtotal</span>
   387	                                <span className="px-2">:</span>
   388	                                <span className="font-mono text-right">{formatCurrency(baseTotal)}</span>
   389	                            </div>
   390	
   391	                            <div className="grid grid-cols-[1fr,auto,1fr] mb-1">
   392	                                <span className="text-left">Diskon</span>
   393	                                <span className="px-2">:</span>
   394	                                <span className="font-mono text-right">{formatCurrency(discountTotal, '-')}</span>
   395	                            </div>
   396	
   397	                            <div className="grid grid-cols-[1fr,auto,1fr] mb-1">
   398	                                <span className="text-left">Setelah Diskon</span>
   399	                                <span className="px-2">:</span>
   400	                                <span className="font-mono text-right">{formatCurrency(afterDiscountTotal)}</span>
   401	                            </div>
   402	
   403	                            {!purchase.is_vat_included && (
   404	                                <div className="grid grid-cols-[1fr,auto,1fr] mb-1">
   405	                                    <span className="text-left">PPN</span>
   406	                                    <span className="px-2">:</span>
   407	                                    <span className="font-mono text-right">{formatCurrency(vatTotal, '+')}</span>
   408	                                </div>
   409	                            )}
   410	
   411	                            <div className="border-t pt-2 grid grid-cols-[1fr,auto,1fr] font-bold">
   412	                                <span className="text-left">TOTAL</span>
   413	                                <span className="px-2">:</span>
   414	                                <span className="font-mono text-right">{formatCurrency(grandTotal)}</span>
   415	                            </div>
   416	                        </div>
   417	                    </div>
   418	                </div>
   419	            </div>
   420	        </Card>
   421	    );
   422	};
   423	
   424	export default ViewPurchase;


===============================================
= File: ./src/pages/sales/CreateSale.tsx 
===============================================

     1	import { useState, useEffect } from 'react';
     2	import { useNavigate } from 'react-router-dom';
     3	import { supabase } from '../../lib/supabase';
     4	import { useForm, useFieldArray, Controller } from 'react-hook-form';
     5	import { FaPlus, FaTrash, FaSearch } from 'react-icons/fa';
     6	
     7	interface Item {
     8	    id: string;
     9	    name: string;
    10	    sell_price: number;
    11	    stock: number;
    12	}
    13	
    14	interface Patient {
    15	    id: string;
    16	    name: string;
    17	}
    18	
    19	interface Doctor {
    20	    id: string;
    21	    name: string;
    22	}
    23	
    24	interface SaleFormData {
    25	    patient_id: string;
    26	    doctor_id: string;
    27	    payment_method: string;
    28	    items: {
    29	        item_id: string;
    30	        quantity: number;
    31	        price: number;
    32	        subtotal: number;
    33	    }[];
    34	}
    35	
    36	const CreateSale = () => {
    37	    const navigate = useNavigate();
    38	    const [items, setItems] = useState<Item[]>([]);
    39	    const [patients, setPatients] = useState<Patient[]>([]);
    40	    const [doctors, setDoctors] = useState<Doctor[]>([]);
    41	    const [loading, setLoading] = useState(false);
    42	    const [searchItem, setSearchItem] = useState('');
    43	    const [selectedItem, setSelectedItem] = useState<Item | null>(null);
    44	    const [showItemDropdown, setShowItemDropdown] = useState(false);
    45	
    46	    const { control, handleSubmit, setValue, watch, register, formState: { errors } } = useForm<SaleFormData>({
    47	        defaultValues: {
    48	            patient_id: '',
    49	            doctor_id: '',
    50	            payment_method: 'cash',
    51	            items: []
    52	        }
    53	    });
    54	
    55	    const { fields, append, remove } = useFieldArray({
    56	        control,
    57	        name: "items"
    58	    });
    59	
    60	    const items = watch('items');
    61	    const total = items.reduce((sum, item) => sum + (item.subtotal || 0), 0);
    62	
    63	    useEffect(() => {
    64	        fetchItems();
    65	        fetchPatients();
    66	        fetchDoctors();
    67	    }, []);
    68	
    69	    const fetchItems = async () => {
    70	        const { data } = await supabase
    71	            .from('items')
    72	            .select('id, name, sell_price, stock')
    73	            .gt('stock', 0)
    74	            .order('name');
    75	
    76	        if (data) setItems(data);
    77	    };
    78	
    79	    const fetchPatients = async () => {
    80	        const { data } = await supabase
    81	            .from('patients')
    82	            .select('id, name')
    83	            .order('name');
    84	
    85	        if (data) setPatients(data);
    86	    };
    87	
    88	    const fetchDoctors = async () => {
    89	        const { data } = await supabase
    90	            .from('doctors')
    91	            .select('id, name')
    92	            .order('name');
    93	
    94	        if (data) setDoctors(data);
    95	    };
    96	
    97	    const addItem = () => {
    98	        if (!selectedItem) return;
    99	
   100	        append({
   101	            item_id: selectedItem.id,
   102	            quantity: 1,
   103	            price: selectedItem.sell_price,
   104	            subtotal: selectedItem.sell_price
   105	        });
   106	
   107	        setSelectedItem(null);
   108	        setSearchItem('');
   109	    };
   110	
   111	    const updateSubtotal = (index: number, quantity: number, price: number) => {
   112	        setValue(`items.${index}.subtotal`, quantity * price);
   113	    };
   114	
   115	    const filteredItems = items.filter(item =>
   116	        item.name.toLowerCase().includes(searchItem.toLowerCase())
   117	    );
   118	
   119	    const onSubmit = async (data: SaleFormData) => {
   120	        try {
   121	            setLoading(true);
   122	
   123	            // Insert sale record
   124	            const { data: saleData, error: saleError } = await supabase
   125	                .from('sales')
   126	                .insert({
   127	                    patient_id: data.patient_id || null,
   128	                    doctor_id: data.doctor_id || null,
   129	                    date: new Date(),
   130	                    total: total,
   131	                    payment_method: data.payment_method
   132	                })
   133	                .select('id')
   134	                .single();
   135	
   136	            if (saleError) throw saleError;
   137	
   138	            // Insert sale items
   139	            const saleItems = data.items.map(item => ({
   140	                sale_id: saleData.id,
   141	                item_id: item.item_id,
   142	                quantity: item.quantity,
   143	                price: item.price,
   144	                subtotal: item.subtotal
   145	            }));
   146	
   147	            const { error: itemsError } = await supabase
   148	                .from('sale_items')
   149	                .insert(saleItems);
   150	
   151	            if (itemsError) throw itemsError;
   152	
   153	            // Update medicine stocks
   154	            for (const item of data.items) {
   155	                await supabase
   156	                    .from('items')
   157	                    .update({
   158	                        stock: supabase.rpc('decrement', { x: item.quantity })
   159	                    })
   160	                    .eq('id', item.item_id);
   161	            }
   162	
   163	            navigate('/sales');
   164	        } catch (error) {
   165	            console.error('Error creating sale:', error);
   166	        } finally {
   167	            setLoading(false);
   168	        }
   169	    };
   170	
   171	    return (
   172	        <div className="bg-white p-6 rounded-lg shadow">
   173	            <h1 className="text-2xl font-bold text-gray-800 mb-6">Buat Penjualan Baru</h1>
   174	
   175	            <form onSubmit={handleSubmit(onSubmit)}>
   176	                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
   177	                    <div>
   178	                        <label className="block mb-2 text-gray-700">Pasien (Opsional)</label>
   179	                        <select
   180	                            {...register('patient_id')}
   181	                            className="w-full p-3 border rounded-md"
   182	                        >
   183	                            <option value="">-- Pilih Pasien --</option>
   184	                            {patients.map(patient => (
   185	                                <option key={patient.id} value={patient.id}>{patient.name}</option>
   186	                            ))}
   187	                        </select>
   188	                    </div>
   189	
   190	                    <div>
   191	                        <label className="block mb-2 text-gray-700">Dokter (Opsional)</label>
   192	                        <select
   193	                            {...register('doctor_id')}
   194	                            className="w-full p-3 border rounded-md"
   195	                        >
   196	                            <option value="">-- Pilih Dokter --</option>
   197	                            {doctors.map(doctor => (
   198	                                <option key={doctor.id} value={doctor.id}>{doctor.name}</option>
   199	                            ))}
   200	                        </select>
   201	                    </div>
   202	
   203	                    <div>
   204	                        <label className="block mb-2 text-gray-700">Metode Pembayaran</label>
   205	                        <select
   206	                            {...register('payment_method')}
   207	                            className="w-full p-3 border rounded-md"
   208	                        >
   209	                            <option value="cash">Tunai</option>
   210	                            <option value="debit">Kartu Debit</option>
   211	                            <option value="credit">Kartu Kredit</option>
   212	                            <option value="insurance">Asuransi</option>
   213	                        </select>
   214	                    </div>
   215	                </div>
   216	
   217	                <div className="mb-6">
   218	                    <h2 className="text-xl font-semibold mb-4">Daftar Item</h2>
   219	
   220	                    <div className="mb-4">
   221	                        <div className="relative">
   222	                            <input
   223	                                type="text"
   224	                                placeholder="Cari item..."
   225	                                className="w-full p-3 border rounded-md"
   226	                                value={searchItem}
   227	                                onChange={(e) => {
   228	                                    setSearchItem(e.target.value);
   229	                                    setShowItemDropdown(true);
   230	                                }}
   231	                                onFocus={() => setShowItemDropdown(true)}
   232	                            />
   233	
   234	                            {showItemDropdown && searchItem && (
   235	                                <div className="absolute z-10 w-full mt-1 bg-white border rounded-md shadow-lg max-h-60 overflow-y-auto">
   236	                                    {filteredItems.length === 0 ? (
   237	                                        <div className="p-3 text-gray-500">Tidak ada item yang ditemukan</div>
   238	                                    ) : (
   239	                                        filteredItems.map(item => (
   240	                                            <div
   241	                                                key={item.id}
   242	                                                className="p-3 hover:bg-gray-100 cursor-pointer"
   243	                                                onClick={() => {
   244	                                                    setSelectedItem(item);
   245	                                                    setSearchItem(item.name);
   246	                                                    setShowItemDropdown(false);
   247	                                                }}
   248	                                            >
   249	                                                <div>{item.name}</div>
   250	                                                <div className="text-sm text-gray-500">
   251	                                                    Stok: {item.stock} | Harga: {item.sell_price.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' })}
   252	                                                </div>
   253	                                            </div>
   254	                                        ))
   255	                                    )}
   256	                                </div>
   257	                            )}
   258	                        </div>
   259	
   260	                        <div className="mt-2 flex">
   261	                            <button
   262	                                type="button"
   263	                                className="px-4 py-2 bg-primary text-white rounded-md flex items-center disabled:opacity-50"
   264	                                onClick={addItem}
   265	                                disabled={!selectedItem}
   266	                            >
   267	                                <FaPlus className="mr-2" />
   268	                                Tambah Item
   269	                            </button>
   270	                        </div>
   271	                    </div>
   272	
   273	                    <div className="overflow-x-auto">
   274	                        <table className="min-w-full bg-white border">
   275	                            <thead className="bg-gray-100">
   276	                                <tr>
   277	                                    <th className="py-3 px-4 text-left">Nama Item</th>
   278	                                    <th className="py-3 px-4 text-right">Harga</th>
   279	                                    <th className="py-3 px-4 text-center">Kuantitas</th>
   280	                                    <th className="py-3 px-4 text-right">Subtotal</th>
   281	                                    <th className="py-3 px-4 text-center">Aksi</th>
   282	                                </tr>
   283	                            </thead>
   284	                            <tbody className="divide-y divide-gray-200">
   285	                                {fields.length === 0 ? (
   286	                                    <tr>
   287	                                        <td colSpan={5} className="py-4 px-4 text-center text-gray-500">
   288	                                            Belum ada item
   289	                                        </td>
   290	                                    </tr>
   291	                                ) : (
   292	                                    fields.map((field, index) => {
   293	                                        const item = items.find(m => m.id === items[index]?.item_id);
   294	
   295	                                        return (
   296	                                            <tr key={field.id}>
   297	                                                <td className="py-3 px-4">{item?.name}</td>
   298	                                                <td className="py-3 px-4 text-right">
   299	                                                    <Controller
   300	                                                        control={control}
   301	                                                        name={`items.${index}.price`}
   302	                                                        render={({ field }) => (
   303	                                                            <input
   304	                                                                type="number"
   305	                                                                className="w-32 p-2 border rounded-md text-right"
   306	                                                                {...field}
   307	                                                                onChange={(e) => {
   308	                                                                    const price = parseFloat(e.target.value);
   309	                                                                    field.onChange(price);
   310	                                                                    updateSubtotal(index, items[index]?.quantity || 0, price);
   311	                                                                }}
   312	                                                            />
   313	                                                        )}
   314	                                                    />
   315	                                                </td>
   316	                                                <td className="py-3 px-4 text-center">
   317	                                                    <Controller
   318	                                                        control={control}
   319	                                                        name={`items.${index}.quantity`}
   320	                                                        render={({ field }) => (
   321	                                                            <input
   322	                                                                type="number"
   323	                                                                className="w-20 p-2 border rounded-md text-center"
   324	                                                                min="1"
   325	                                                                max={item?.stock || 1}
   326	                                                                {...field}
   327	                                                                onChange={(e) => {
   328	                                                                    const quantity = parseInt(e.target.value);
   329	                                                                    field.onChange(quantity);
   330	                                                                    updateSubtotal(index, quantity, items[index]?.price || 0);
   331	                                                                }}
   332	                                                            />
   333	                                                        )}
   334	                                                    />
   335	                                                </td>
   336	                                                <td className="py-3 px-4 text-right">
   337	                                                    {items[index]?.subtotal?.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' })}
   338	                                                </td>
   339	                                                <td className="py-3 px-4 text-center">
   340	                                                    <button
   341	                                                        type="button"
   342	                                                        className="p-1.5 bg-red-500 text-white rounded-md hover:bg-red-600"
   343	                                                        onClick={() => remove(index)}
   344	                                                    >
   345	                                                        <FaTrash />
   346	                                                    </button>
   347	                                                </td>
   348	                                            </tr>
   349	                                        );
   350	                                    })
   351	                                )}
   352	                            </tbody>
   353	                            <tfoot className="bg-gray-50 font-semibold">
   354	                                <tr>
   355	                                    <td colSpan={3} className="py-3 px-4 text-right">Total:</td>
   356	                                    <td className="py-3 px-4 text-right">
   357	                                        {total.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' })}
   358	                                    </td>
   359	                                    <td></td>
   360	                                </tr>
   361	                            </tfoot>
   362	                        </table>
   363	                    </div>
   364	                </div>
   365	
   366	                <div className="flex justify-end">
   367	                    <button
   368	                        type="button"
   369	                        className="px-4 py-2 border rounded-md mr-2"
   370	                        onClick={() => navigate('/sales')}
   371	                    >
   372	                        Batal
   373	                    </button>
   374	                    <button
   375	                        type="submit"
   376	                        className="px-4 py-2 bg-primary text-white rounded-md"
   377	                        disabled={loading || fields.length === 0}
   378	                    >
   379	                        {loading ? 'Menyimpan...' : 'Simpan Penjualan'}
   380	                    </button>
   381	                </div>
   382	            </form>
   383	        </div>
   384	    );
   385	};
   386	
   387	export default CreateSale;


===============================================
= File: ./src/pages/settings/Profile.tsx 
===============================================

     1	/* eslint-disable @typescript-eslint/no-explicit-any */
     2	import { useState, useEffect } from 'react'; // Import useEffect
     3	import { Card, CardHeader, CardTitle, CardContent } from '../../components/ui/Card';
     4	import { supabase } from '../../lib/supabase';
     5	import { FaEdit, FaCheck, FaTimes } from 'react-icons/fa';
     6	import { Button } from '../../components/ui/Button';
     7	import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
     8	
     9	interface CompanyProfile {
    10	    id: string;
    11	    name: string;
    12	    address: string;
    13	    phone: string | null;
    14	    email: string | null;
    15	    website: string | null;
    16	    tax_id: string | null;
    17	    pharmacist_name: string | null;
    18	    pharmacist_license: string | null;
    19	}
    20	
    21	const Profile = () => {
    22	    const [editMode, setEditMode] = useState<Record<string, boolean>>({});
    23	    const [editValues, setEditValues] = useState<Record<string, string | null>>({}); // Allow null values
    24	    const queryClient = useQueryClient();
    25	
    26	    const fetchProfile = async () => {
    27	        const { data, error } = await supabase
    28	            .from('company_profiles')
    29	            .select('*')
    30	            .single();
    31	
    32	        if (error && error.code !== 'PGRST116') {
    33	            throw new Error(error.message);
    34	        }
    35	        return data;
    36	    };
    37	
    38	    const { data: profile, isLoading, isError, error } = useQuery<CompanyProfile | null>({
    39	        queryKey: ['companyProfile'],
    40	        queryFn: fetchProfile,
    41	        staleTime: 30 * 1000,
    42	        refetchOnMount: true,
    43	        refetchOnWindowFocus: false
    44	    });
    45	
    46	    // Set initial values when profile data is fetched
    47	    useEffect(() => {
    48	        if (profile) {
    49	            const initialValues: Record<string, string | null> = {};
    50	            Object.keys(profile).forEach((key) => {
    51	                initialValues[key] = (profile as any)[key] ?? '';
    52	            });
    53	            setEditValues(initialValues);
    54	        }
    55	    }, [profile]);
    56	
    57	    const updateProfileMutation = useMutation({
    58	        mutationFn: async ({ field, value }: { field: string, value: string | null }) => {
    59	            // Add null check for profile before accessing id
    60	            if (!profile?.id) throw new Error("Profil ID tidak ditemukan untuk diperbarui.");
    61	
    62	            const { error } = await supabase
    63	                .from('company_profiles')
    64	                .update({ [field]: value === '' ? null : value })
    65	                .eq('id', profile.id);
    66	
    67	            if (error) throw new Error(error.message);
    68	        },
    69	        onSuccess: (_, variables) => {
    70	            queryClient.invalidateQueries({ queryKey: ['companyProfile'] });
    71	            setEditMode(prev => ({ ...prev, [variables.field]: false }));
    72	        },
    73	        onError: (error) => {
    74	            console.error('Error updating profile:', error);
    75	            alert(`Gagal memperbarui profil: ${error.message}`);
    76	        }
    77	    });
    78	
    79	    const toggleEdit = (field: string) => {
    80	        setEditMode(prev => ({ ...prev, [field]: !prev[field] }));
    81	        if (editMode[field] && profile) {
    82	            setEditValues(prev => ({ ...prev, [field]: (profile as any)[field] ?? '' }));
    83	        }
    84	    };
    85	
    86	    const handleSave = (field: string) => {
    87	        updateProfileMutation.mutate({ field, value: editValues[field] });
    88	    };
    89	
    90	    const handleCancel = (field: string) => {
    91	        if (profile) {
    92	            setEditValues(prev => ({ ...prev, [field]: (profile as any)[field] ?? '' }));
    93	        }
    94	        setEditMode(prev => ({ ...prev, [field]: false }));
    95	    };
    96	
    97	    const handleChange = (field: string, value: string) => {
    98	        setEditValues((prev: Record<string, string | null>) => ({ // Explicitly type prev
    99	            ...prev,
   100	            [field]: value,
   101	        }));
   102	    };
   103	
   104	    const ProfileField = ({ label, field }: { label: string; field: string; }) => {
   105	        return (
   106	            <div className="mb-4">
   107	                <div className="flex justify-between items-center mb-1">
   108	                    <label className="text-sm font-medium text-gray-600">{label}</label>
   109	                    {editMode[field] ? (
   110	                        <div className="flex space-x-1">
   111	                            <Button variant="text" size="sm" onClick={() => handleCancel(field)} className="p-1 text-gray-500 hover:text-red-500"><FaTimes /></Button>
   112	                            <Button variant="text" size="sm" onClick={() => handleSave(field)} className="p-1 text-gray-500 hover:text-green-500" disabled={updateProfileMutation.isPending}>
   113	                                {updateProfileMutation.isPending && updateProfileMutation.variables?.field === field ? <span className="w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></span> : <FaCheck />}
   114	                            </Button>
   115	                        </div>
   116	                    ) : (
   117	                        <Button variant="text" size="sm" onClick={() => toggleEdit(field)} className="p-1 text-gray-500 hover:text-primary">
   118	                            <FaEdit />
   119	                        </Button>
   120	                    )}
   121	                </div>
   122	                {editMode[field] ? (
   123	                    <input
   124	                        type="text"
   125	                        value={editValues[field] || ''}
   126	                        onChange={(e) => handleChange(field, e.target.value)}
   127	                        className="w-full p-2 border rounded-md"
   128	                    />
   129	                ) : (
   130	                    <div className="p-2 bg-gray-50 rounded-md min-h-[40px]">
   131	                        {(profile && (profile as any)[field]) || <span className="text-gray-400 italic">Tidak ada data</span>}
   132	                    </div>
   133	                )}
   134	            </div>
   135	        );
   136	    };
   137	
   138	    if (isLoading) {
   139	        return <div className="text-center p-6">Memuat profil perusahaan...</div>;
   140	    }
   141	
   142	    if (isError) {
   143	        return <div className="text-center p-6 text-red-500">Error: {(error as Error).message}</div>;
   144	    }
   145	
   146	    return (
   147	        <Card>
   148	            <CardHeader>
   149	                <CardTitle>Profil Perusahaan</CardTitle>
   150	                <p className="text-sm text-gray-500 mt-1">Kelola informasi detail mengenai apotek atau klinik Anda.</p>
   151	            </CardHeader>
   152	            <CardContent>
   153	                {!profile ? (
   154	                    <div className="text-center">
   155	                        <p className="mb-4">Belum ada data profil. Tambahkan profil perusahaan Anda.</p>
   156	                        <Button onClick={createProfile}>Tambah Profil</Button>
   157	                    </div>
   158	                ) : (
   159	                    <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-0">
   160	                        <div>
   161	                            <ProfileField label="Nama Perusahaan" field="name" />
   162	                            <ProfileField label="Alamat" field="address" />
   163	                            <ProfileField label="Nomor Telepon" field="phone" />
   164	                            <ProfileField label="Email" field="email" />
   165	                        </div>
   166	                        <div>
   167	                            <ProfileField label="Website" field="website" />
   168	                            <ProfileField label="NPWP" field="tax_id" />
   169	                            <ProfileField label="Nama Apoteker Penanggung Jawab" field="pharmacist_name" />
   170	                            <ProfileField label="No. STRA / SIPA Apoteker" field="pharmacist_license" />
   171	                        </div>
   172	                    </div>
   173	                )}
   174	            </CardContent>
   175	        </Card>
   176	    );
   177	
   178	    async function createProfile() {
   179	        try {
   180	            const { data, error } = await supabase
   181	                .from('company_profiles')
   182	                .insert({
   183	                    name: 'Nama Apotek/Klinik Anda',
   184	                    address: 'Alamat Lengkap Apotek/Klinik Anda',
   185	                })
   186	                .select()
   187	                .single();
   188	
   189	            if (error) {
   190	                console.error('Error creating profile:', error);
   191	                alert(`Gagal membuat profil: ${error.message}`);
   192	                return;
   193	            }
   194	
   195	            if (data) {
   196	                queryClient.invalidateQueries({ queryKey: ['companyProfile'] });
   197	                const initialValues: Record<string, string> = {};
   198	                Object.keys(data).forEach((key) => {
   199	                    initialValues[key] = (data as any)[key] ?? '';
   200	                });
   201	                setEditValues(initialValues);
   202	                alert('Profil berhasil dibuat. Silakan lengkapi data.');
   203	            }
   204	        } catch (error) {
   205	            console.error('Error:', error);
   206	            alert(`Terjadi kesalahan saat membuat profil: ${error instanceof Error ? error.message : 'Kesalahan tidak diketahui'}`);
   207	        }
   208	    }
   209	};
   210	
   211	export default Profile;


===============================================
= File: ./src/services/invoiceService.ts 
===============================================

     1	// src/services/invoiceService.ts
     2	import axios, { AxiosError } from 'axios';
     3	import { supabase } from '../lib/supabase'; // Pastikan path ini benar relatif terhadap src/services/
     4	
     5	// URL ke backend ekstraksi faktur (Sebaiknya gunakan environment variable)
     6	const API_URL = import.meta.env.VITE_INVOICE_EXTRACTOR_API_URL || 'http://localhost:3000/api/extract-invoice';
     7	
     8	// --- Definisikan Interface untuk Struktur Data Hasil Ekstraksi ---
     9	
    10	interface CompanyDetails {
    11	    name?: string;
    12	    address?: string;
    13	    license_pbf?: string;
    14	    license_dak?: string;
    15	    certificate_cdob?: string;
    16	}
    17	
    18	interface InvoiceInformation {
    19	    invoice_number?: string;
    20	    invoice_date?: string; // Pertimbangkan tipe Date jika backend mengembalikan format ISO
    21	    so_number?: string;
    22	    due_date?: string; // Pertimbangkan tipe Date
    23	}
    24	
    25	interface CustomerInformation {
    26	    customer_name?: string;
    27	    customer_address?: string;
    28	    customer_id?: string; // Jika ada
    29	}
    30	
    31	interface ProductListItem {
    32	    sku?: string;
    33	    product_name?: string;
    34	    quantity?: number;
    35	    unit?: string;
    36	    batch_number?: string;
    37	    expiry_date?: string; // String format MM-YYYY atau Date
    38	    unit_price?: number;
    39	    discount?: number; // Diskon sudah dalam angka, diproses oleh parseDiscountValue di server
    40	    total_price?: number;
    41	}
    42	
    43	interface PaymentSummary {
    44	    total_price?: number; // Nilai numerik sudah diproses oleh parseNumericValue di server
    45	    vat?: number; // PPN sudah dalam bentuk numerik
    46	    invoice_total?: number; // Total sudah dalam bentuk numerik
    47	}
    48	
    49	interface AdditionalInformation {
    50	    checked_by?: string;
    51	}
    52	
    53	// Interface utama untuk data hasil ekstraksi
    54	interface ExtractedInvoiceData {
    55	    company_details?: CompanyDetails;
    56	    invoice_information?: InvoiceInformation;
    57	    customer_information?: CustomerInformation;
    58	    product_list?: ProductListItem[];
    59	    payment_summary?: PaymentSummary;
    60	    additional_information?: AdditionalInformation;
    61	    // Tambahkan properti lain jika ada dari Gemini
    62	    rawText?: string; // Untuk fallback jika parsing JSON gagal
    63	}
    64	
    65	// Interface untuk struktur data MENTAH yang dikembalikan oleh API backend (Gemini)
    66	interface RawInvoiceData {
    67	    company?: {
    68	        name?: string;
    69	        address?: string;
    70	        pbf_license_no?: number | string;
    71	        dak_license_no?: number | string;
    72	        cdob_certificate_no?: number | string;
    73	    };
    74	    invoice?: {
    75	        number?: string;
    76	        date?: string;
    77	        so_number?: string;
    78	        due_date?: string;
    79	    };
    80	    customer?: {
    81	        name?: string;
    82	        address?: string;
    83	    };
    84	    products?: Array<{ // Tipe ini akan digunakan oleh parameter 'p' dalam map
    85	        sku?: string;
    86	        product_name?: string;
    87	        count?: number; // Perhatikan nama 'count' dari Gemini
    88	        unit?: string;
    89	        batch_no?: string; // Perhatikan nama 'batch_no' dari Gemini
    90	        expiry_date?: string; // Format MM-YYYY
    91	        price_per_unit?: string; // Format string "RpX.XXX"
    92	        discount?: string; // Format string "-X%"
    93	        total_price?: string; // Format string "RpX.XXX"
    94	    }>;
    95	    payment_summary?: {
    96	        total_price?: string;
    97	        vat?: string;
    98	        total_invoice?: string;
    99	    };
   100	    additional_information?: {
   101	        checked_by?: string;
   102	    };
   103	    rawText?: string; // Fallback dari backend
   104	}
   105	
   106	// --- Fungsi-fungsi Service ---
   107	
   108	/**
   109	 * Mengunggah gambar faktur dan mengekstrak datanya menggunakan API backend.
   110	 * @param {File} file - File gambar faktur.
   111	 * @returns {Promise<ExtractedInvoiceData>} Data hasil ekstraksi.
   112	 * @throws {Error} Jika terjadi kesalahan saat mengunggah atau mengekstrak.
   113	 */
   114	export async function uploadAndExtractInvoice(file: File): Promise<ExtractedInvoiceData> {
   115	    const formData = new FormData();
   116	    formData.append('image', file);
   117	
   118	    try {
   119	        // Tentukan tipe data yang diharapkan dari response Axios (Gunakan RawInvoiceData)
   120	        const response = await axios.post<RawInvoiceData>(API_URL, formData, {
   121	            headers: {
   122	                'Content-Type': 'multipart/form-data'
   123	            }
   124	        });
   125	
   126	        // Validasi dasar respons (opsional tapi bagus)
   127	        const responseData = response.data;
   128	        if (!responseData || typeof responseData !== 'object') {
   129	            throw new Error('Format respons tidak valid dari API ekstraksi.');
   130	        }
   131	
   132	        // Transformasi data dari format Gemini ke format yang diharapkan frontend
   133	        const transformedData: ExtractedInvoiceData = {
   134	            company_details: {
   135	                name: responseData.company?.name, // Akses dari RawInvoiceData
   136	                address: responseData.company?.address,
   137	                license_pbf: responseData.company?.pbf_license_no?.toString(),
   138	                license_dak: responseData.company?.dak_license_no?.toString(),
   139	                certificate_cdob: responseData.company?.cdob_certificate_no?.toString()
   140	            },
   141	            invoice_information: {
   142	                invoice_number: responseData.invoice?.number, // Akses dari RawInvoiceData
   143	                invoice_date: responseData.invoice?.date,
   144	                so_number: responseData.invoice?.so_number,
   145	                due_date: responseData.invoice?.due_date
   146	            },
   147	            customer_information: {
   148	                customer_name: responseData.customer?.name, // Akses dari RawInvoiceData
   149	                customer_address: responseData.customer?.address
   150	            },
   151	            product_list: responseData.products?.map(p => { // Akses dari RawInvoiceData
   152	                // Parsing harga dan total dari string "RpX.XXX" ke number
   153	                const parseNumeric = (value?: string): number => {
   154	                    if (!value) return 0;
   155	                    return parseFloat(value.replace(/[^\d,]/g, '').replace(',', '.')) || 0;
   156	                };
   157	                // Parsing diskon dari string "-X%" ke number X
   158	                const parseDiscount = (value?: string): number => {
   159	                    if (!value) return 0;
   160	                    return parseFloat(value.replace(/[^0-9.]/g, '')) || 0; // Hapus '-' dan '%'
   161	                };
   162	                return {
   163	                    sku: p.sku,
   164	                    product_name: p.product_name,
   165	                    quantity: p.count, // Gunakan 'count' dari Gemini
   166	                    unit: p.unit,
   167	                    batch_number: p.batch_no, // Gunakan 'batch_no' dari Gemini
   168	                    expiry_date: p.expiry_date, // Tetap string "MM-YYYY"
   169	                    unit_price: parseNumeric(p.price_per_unit),
   170	                    discount: parseDiscount(p.discount),
   171	                    total_price: parseNumeric(p.total_price)
   172	                };
   173	            }),
   174	            payment_summary: {
   175	                total_price: parseFloat(responseData.payment_summary?.total_price ? responseData.payment_summary.total_price.replace(/[^\d,]/g, '').replace(',', '.') : '0') || 0, // Parsing dari string
   176	                vat: parseFloat(responseData.payment_summary?.vat ? responseData.payment_summary.vat.replace(/[^\d,]/g, '').replace(',', '.') : '0') || 0, // Parsing dari string
   177	                invoice_total: parseFloat(responseData.payment_summary?.total_invoice ? responseData.payment_summary.total_invoice.replace(/[^\d,]/g, '').replace(',', '.') : '0') || 0 // Parsing dari string
   178	            },
   179	            additional_information: {
   180	                checked_by: responseData.additional_information?.checked_by
   181	            }
   182	        };
   183	
   184	        return transformedData;
   185	
   186	    } catch (error) {
   187	        console.error('Error mengekstrak faktur:', error);
   188	        let errorMessage = 'Gagal mengekstrak data faktur. Silakan coba lagi.';
   189	        if (axios.isAxiosError(error)) {
   190	            const axiosError = error as AxiosError<{ error?: string; details?: string }>;
   191	            if (axiosError.response?.data?.error) {
   192	                errorMessage = axiosError.response.data.error;
   193	                if (axiosError.response.data.details) {
   194	                    errorMessage += `: ${axiosError.response.data.details}`;
   195	                }
   196	            } else if (axiosError.message) {
   197	                errorMessage = axiosError.message;
   198	            }
   199	        } else if (error instanceof Error) {
   200	            errorMessage = error.message;
   201	        }
   202	        throw new Error(errorMessage);
   203	    }
   204	}
   205	
   206	/**
   207	 * Menyimpan data faktur hasil ekstraksi ke Supabase.
   208	 * @param {ExtractedInvoiceData} extractedData - Data hasil ekstraksi dari Gemini.
   209	 * @returns {Promise<{ id: string; success: boolean }>} Hasil operasi penyimpanan.
   210	 * @throws {Error} Jika terjadi kesalahan saat menyimpan ke database.
   211	 */
   212	export async function saveInvoiceToDatabase(extractedData: ExtractedInvoiceData): Promise<{ id: string; success: boolean }> { // Tetap gunakan ExtractedInvoiceData di sini
   213	    try { // Data yang diterima fungsi ini SUDAH ditransformasi
   214	        // Validasi data penting sebelum insert
   215	        if (!extractedData.invoice_information?.invoice_number) {
   216	            throw new Error('Nomor faktur tidak ditemukan dalam data ekstraksi.');
   217	        }
   218	        if (!extractedData.invoice_information?.invoice_date) {
   219	            throw new Error('Tanggal faktur tidak ditemukan dalam data ekstraksi.');
   220	        }
   221	        if (!extractedData.company_details?.name) {
   222	            throw new Error('Nama supplier tidak ditemukan dalam data ekstraksi.');
   223	        }
   224	        if (!extractedData.customer_information?.customer_name) {
   225	            throw new Error('Nama pelanggan tidak ditemukan dalam data ekstraksi.');
   226	        }
   227	
   228	
   229	        // 1. Simpan header faktur ke e_invoices
   230	        const { data: invoiceData, error: invoiceError } = await supabase
   231	            .from('e_invoices')
   232	            .insert({
   233	                invoice_number: extractedData.invoice_information.invoice_number,
   234	                invoice_date: extractedData.invoice_information.invoice_date, // Pastikan format tanggal sesuai DB
   235	                so_number: extractedData.invoice_information.so_number,
   236	                due_date: extractedData.invoice_information.due_date, // Pastikan format tanggal sesuai DB
   237	                supplier_name: extractedData.company_details.name,
   238	                supplier_address: extractedData.company_details.address,
   239	                pbf_license_number: extractedData.company_details.license_pbf,
   240	                dak_license_number: extractedData.company_details.license_dak,
   241	                cdob_certificate_number: extractedData.company_details.certificate_cdob,
   242	                customer_name: extractedData.customer_information.customer_name,
   243	                customer_address: extractedData.customer_information.customer_address,
   244	                total_price: extractedData.payment_summary?.total_price ?? 0,
   245	                ppn: extractedData.payment_summary?.vat ?? 0,
   246	                total_invoice: extractedData.payment_summary?.invoice_total ?? 0,
   247	                checked_by: extractedData.additional_information?.checked_by,
   248	                json_data: extractedData // Simpan raw data untuk audit/debug
   249	            })
   250	            .select('id')
   251	            .single();
   252	
   253	        if (invoiceError) {
   254	            console.error("Supabase invoice insert error:", invoiceError);
   255	            throw new Error(`Gagal menyimpan header faktur: ${invoiceError.message}`);
   256	        }
   257	        if (!invoiceData) {
   258	            throw new Error('Gagal mendapatkan ID header faktur setelah insert.');
   259	        }
   260	
   261	        // 2. Simpan item faktur ke e_invoice_items
   262	        const invoiceItems = (extractedData.product_list ?? []).map((product: ProductListItem) => ({
   263	            invoice_id: invoiceData.id,
   264	            sku: product.sku,
   265	            product_name: product.product_name ?? 'Produk Tidak Dikenal',
   266	            quantity: product.quantity ?? 0,
   267	            unit: product.unit,
   268	            batch_number: product.batch_number,
   269	            expiry_date: product.expiry_date, // Biarkan string, trigger DB akan konversi jika formatnya MM-YYYY
   270	            unit_price: product.unit_price ?? 0,
   271	            discount: product.discount ?? 0,
   272	            total_price: product.total_price ?? 0
   273	        }));
   274	
   275	        // Hanya insert jika ada item
   276	        if (invoiceItems.length > 0) {
   277	            const { error: itemsError } = await supabase
   278	                .from('e_invoice_items')
   279	                .insert(invoiceItems);
   280	
   281	            if (itemsError) {
   282	                console.error("Supabase items insert error:", itemsError);
   283	                // Pertimbangkan: Haruskah kita rollback insert header jika item gagal?
   284	                // Untuk saat ini, kita lempar error saja.
   285	                throw new Error(`Gagal menyimpan item faktur: ${itemsError.message}`);
   286	            }
   287	        } else {
   288	            console.warn(`Invoice ${invoiceData.id} disimpan tanpa item produk.`);
   289	        }
   290	
   291	
   292	        return { id: invoiceData.id, success: true };
   293	
   294	    } catch (error: unknown) { // Tangkap error sebagai unknown
   295	        console.error('Error menyimpan data faktur ke database:', error);
   296	        // Pastikan kita melempar instance Error
   297	        if (error instanceof Error) {
   298	            throw new Error(`Gagal menyimpan faktur ke database: ${error.message}`);
   299	        } else {
   300	            throw new Error('Gagal menyimpan faktur ke database: Terjadi kesalahan tidak dikenal.');
   301	        }
   302	    }
   303	}
   304	
   305	/**
   306	 * Proses lengkap: upload, ekstrak.
   307	 * (Fungsi simpan dipanggil terpisah setelah konfirmasi pengguna)
   308	 * @param {File} file - File gambar faktur.
   309	 * @returns {Promise<ExtractedInvoiceData>} Data hasil ekstraksi.
   310	 * @throws {Error} Jika terjadi kesalahan saat memproses.
   311	 */
   312	export async function processInvoice(file: File): Promise<ExtractedInvoiceData> {
   313	    try {
   314	        // Langkah 1: Upload dan ekstrak
   315	        const extractedData = await uploadAndExtractInvoice(file);
   316	        return extractedData; // Kembalikan data untuk konfirmasi
   317	    } catch (error: unknown) {
   318	        console.error('Error processing invoice:', error);
   319	        if (error instanceof Error) {
   320	            throw new Error(
   321	                error.message || 'Terjadi kesalahan saat memproses faktur'
   322	            );
   323	        } else {
   324	            throw new Error('Terjadi kesalahan tidak dikenal saat memproses faktur');
   325	        }
   326	    }
   327	}


===============================================
= File: ./src/store/authStore.ts 
===============================================

     1	/* eslint-disable @typescript-eslint/no-explicit-any */
     2	import { create } from 'zustand';
     3	import { Session } from '@supabase/supabase-js';
     4	import { supabase } from '../lib/supabase';
     5	
     6	interface AuthState {
     7	    session: Session | null;
     8	    user: any | null;
     9	    loading: boolean;
    10	    error: string | null;
    11	    login: (email: string, password: string) => Promise<void>;
    12	    logout: () => Promise<void>;
    13	    initialize: () => Promise<void>;
    14	}
    15	
    16	export const useAuthStore = create<AuthState>((set) => ({
    17	    session: null,
    18	    user: null,
    19	    loading: true,
    20	    error: null,
    21	
    22	    initialize: async () => {
    23	        try {
    24	            const { data } = await supabase.auth.getSession();
    25	
    26	            if (data.session) {
    27	                const { data: userData } = await supabase
    28	                    .from('users')
    29	                    .select('*')
    30	                    .eq('id', data.session.user.id)
    31	                    .single();
    32	
    33	                set({
    34	                    session: data.session,
    35	                    user: userData,
    36	                    loading: false
    37	                });
    38	            } else {
    39	                set({ loading: false });
    40	            }
    41	        } catch (error) {
    42	            console.error('Error initializing auth:', error);
    43	            set({ loading: false });
    44	        }
    45	    },
    46	
    47	    login: async (email, password) => {
    48	        try {
    49	            set({ loading: true, error: null });
    50	
    51	            const { data, error } = await supabase.auth.signInWithPassword({
    52	                email,
    53	                password
    54	            });
    55	
    56	            if (error) throw error;
    57	
    58	            const { data: userData } = await supabase
    59	                .from('users')
    60	                .select('*')
    61	                .eq('id', data.user?.id)
    62	                .single();
    63	
    64	            set({
    65	                session: data.session,
    66	                user: userData,
    67	                loading: false
    68	            });
    69	        } catch (error: any) {
    70	            console.error('Login error:', error);
    71	            set({ error: error.message, loading: false });
    72	        }
    73	    },
    74	
    75	    logout: async () => {
    76	        try {
    77	            set({ loading: true });
    78	            await supabase.auth.signOut();
    79	            set({ session: null, user: null, loading: false });
    80	        } catch (error: any) {
    81	            console.error('Logout error:', error);
    82	            set({ error: error.message, loading: false });
    83	        }
    84	    }
    85	}));


===============================================
= File: ./src/vite-env.d.ts 
===============================================

     1	/// <reference types="vite/client" />


===============================================
= File: ./supabase_data/database_export 
===============================================

     1	{
     2	  "export_date": "2025-04-03T14:47:32Z",
     3	  "tables": {
     4	    "doctors": [],
     5	    "item_categories": [
     6	      {
     7	        "id": "0d1d6848-96b5-448e-a136-3aba8a9bbbca",
     8	        "name": "Antibiotik",
     9	        "description": "Obat untuk membunuh atau menghambat pertumbuhan bakteri",
    10	        "created_at": "2025-03-26T14:57:20.368076+00:00",
    11	        "updated_at": "2025-03-26T14:57:20.368076+00:00"
    12	      },
    13	      {
    14	        "id": "a21f33c1-42aa-4171-a826-59a7e00c315d",
    15	        "name": "Antipiretik",
    16	        "description": "Obat untuk menurunkan demam",
    17	        "created_at": "2025-03-26T14:57:20.368076+00:00",
    18	        "updated_at": "2025-03-26T14:57:20.368076+00:00"
    19	      },
    20	      {
    21	        "id": "502e0a0c-9a29-4003-b309-979b659b30db",
    22	        "name": "Analgesik",
    23	        "description": "Obat pereda nyeri",
    24	        "created_at": "2025-03-26T14:57:20.368076+00:00",
    25	        "updated_at": "2025-03-26T14:57:20.368076+00:00"
    26	      },
    27	      {
    28	        "id": "26e20a27-a34e-424e-9a85-babc2abdc955",
    29	        "name": "Antidiabetes",
    30	        "description": "Obat untuk mengontrol gula darah",
    31	        "created_at": "2025-03-26T14:57:20.368076+00:00",
    32	        "updated_at": "2025-03-26T14:57:20.368076+00:00"
    33	      },
    34	      {
    35	        "id": "c0264ffd-cdd0-4c8f-b5c3-36d040005f5a",
    36	        "name": "Antihipertensi",
    37	        "description": "Obat untuk menurunkan tekanan darah",
    38	        "created_at": "2025-03-26T14:57:20.368076+00:00",
    39	        "updated_at": "2025-03-26T14:57:20.368076+00:00"
    40	      }
    41	    ],
    42	    "item_types": [
    43	      {
    44	        "id": "ccc6e9a8-9f61-43bc-b1a8-a64ad1c8aebd",
    45	        "name": "Obat Bebas",
    46	        "description": "Obat yang dapat dibeli tanpa resep dokter, ditandai dengan lingkaran hijau dengan garis tepi hitam",
    47	        "created_at": "2025-03-30T08:29:38.937463+00:00",
    48	        "updated_at": "2025-03-30T08:29:38.937463+00:00"
    49	      },
    50	      {
    51	        "id": "210574b1-5f18-40dc-a041-3cf33b8f3307",
    52	        "name": "Obat Bebas Terbatas",
    53	        "description": "Obat yang dapat dibeli tanpa resep dokter, namun memiliki peringatan khusus",
    54	        "created_at": "2025-03-30T08:29:38.937463+00:00",
    55	        "updated_at": "2025-03-30T08:29:38.937463+00:00"
    56	      },
    57	      {
    58	        "id": "6ecd610a-4a35-448c-8eda-662f1c10fa51",
    59	        "name": "Obat Keras",
    60	        "description": "Obat yang hanya dapat dibeli dengan resep dokter, ditandai dengan lingkaran merah dengan garis tepi hitam dan huruf K di tengah",
    61	        "created_at": "2025-03-30T08:29:38.937463+00:00",
    62	        "updated_at": "2025-03-30T08:29:38.937463+00:00"
    63	      },
    64	      {
    65	        "id": "1c2068a7-a66c-4a91-820e-354588330ada",
    66	        "name": "Obat Golongan Narkotika",
    67	        "description": "Obat yang termasuk dalam golongan narkotika dan diatur ketat",
    68	        "created_at": "2025-03-30T08:29:38.937463+00:00",
    69	        "updated_at": "2025-03-30T08:29:38.937463+00:00"
    70	      },
    71	      {
    72	        "id": "1725d012-3f32-4c70-8856-aeeb6b74ea82",
    73	        "name": "Obat Fitofarmaka",
    74	        "description": "Obat yang berasal dari bahan alam yang telah dibuktikan keamanan dan khasiatnya melalui uji klinis",
    75	        "created_at": "2025-03-30T08:29:38.937463+00:00",
    76	        "updated_at": "2025-03-30T08:29:38.937463+00:00"
    77	      },
    78	      {
    79	        "id": "e09561d2-cc62-4a94-a132-4e17d6a02fa2",
    80	        "name": "Obat Herbal Terstandar",
    81	        "description": "Obat tradisional yang telah dibuktikan keamanan dan khasiatnya melalui uji pra-klinis",
    82	        "created_at": "2025-03-30T08:29:38.937463+00:00",
    83	        "updated_at": "2025-03-30T08:29:38.937463+00:00"
    84	      }
    85	    ],
    86	    "item_units": [
    87	      {
    88	        "id": "28dbe949-54a2-4198-baba-ed162a041cbe",
    89	        "name": "Botol",
    90	        "created_at": "2025-03-26T14:57:20.368076+00:00",
    91	        "updated_at": "2025-03-26T14:57:20.368076+00:00",
    92	        "description": null
    93	      },
    94	      {
    95	        "id": "6727b61b-8063-422d-a89a-16b378d5d76d",
    96	        "name": "Tube",
    97	        "created_at": "2025-03-26T14:57:20.368076+00:00",
    98	        "updated_at": "2025-03-26T14:57:20.368076+00:00",
    99	        "description": null
   100	      },
   101	      {
   102	        "id": "d7ec80ef-00b0-4b57-8086-d6ad803a68cc",
   103	        "name": "Strip",
   104	        "created_at": "2025-03-26T14:57:20.368076+00:00",
   105	        "updated_at": "2025-03-26T14:57:20.368076+00:00",
   106	        "description": null
   107	      },
   108	      {
   109	        "id": "05990da0-faa0-4f5e-92e9-bc1f2ef4defc",
   110	        "name": "Kapsul",
   111	        "created_at": "2025-03-26T14:57:20.368076+00:00",
   112	        "updated_at": "2025-03-30T08:31:02.468123+00:00",
   113	        "description": "Sediaan padat dengan cangkang keras atau lunak"
   114	      },
   115	      {
   116	        "id": "b822686b-f7ec-46d1-8b40-fb69d8bea2f7",
   117	        "name": "Sirup",
   118	        "created_at": "2025-03-30T08:29:38.937463+00:00",
   119	        "updated_at": "2025-03-30T08:31:02.468123+00:00",
   120	        "description": "Sediaan cair dengan kandungan gula atau pemanis"
   121	      },
   122	      {
   123	        "id": "f19ecad4-fec8-4ba9-b987-8f7bfe7f13b8",
   124	        "name": "Suspensi",
   125	        "created_at": "2025-03-30T08:29:38.937463+00:00",
   126	        "updated_at": "2025-03-30T08:31:02.468123+00:00",
   127	        "description": "Sediaan cair dengan partikel padat yang tersuspensi"
   128	      },
   129	      {
   130	        "id": "aebc351d-0608-4643-ac0a-517bfd73aa7a",
   131	        "name": "Emulsi",
   132	        "created_at": "2025-03-30T08:29:38.937463+00:00",
   133	        "updated_at": "2025-03-30T08:31:02.468123+00:00",
   134	        "description": "Sediaan cair yang terdiri dari dua cairan yang tidak saling bercampur"
   135	      },
   136	      {
   137	        "id": "9d764020-ae97-43c4-ae7e-ae66cb91ff17",
   138	        "name": "Serbuk",
   139	        "created_at": "2025-03-30T08:29:38.937463+00:00",
   140	        "updated_at": "2025-03-30T08:31:02.468123+00:00",
   141	        "description": "Sediaan kering dalam bentuk bubuk"
   142	      },
   143	      {
   144	        "id": "23fd2eb0-16bb-47bb-832e-e201f4c77a57",
   145	        "name": "Salep",
   146	        "created_at": "2025-03-30T08:29:38.937463+00:00",
   147	        "updated_at": "2025-03-30T08:31:02.468123+00:00",
   148	        "description": "Sediaan semi-padat untuk penggunaan luar"
   149	      },
   150	      {
   151	        "id": "bf752bfc-7a5f-4c0f-8f59-65b8c74e7f92",
   152	        "name": "Krim",
   153	        "created_at": "2025-03-30T08:29:38.937463+00:00",
   154	        "updated_at": "2025-03-30T08:31:02.468123+00:00",
   155	        "description": "Sediaan semi-padat untuk penggunaan luar"
   156	      },
   157	      {
   158	        "id": "827d5b4f-a057-443f-bf40-8f50bc336857",
   159	        "name": "Gel",
   160	        "created_at": "2025-03-30T08:29:38.937463+00:00",
   161	        "updated_at": "2025-03-30T08:31:02.468123+00:00",
   162	        "description": "Sediaan semi-padat transparan atau translusen"
   163	      },
   164	      {
   165	        "id": "abc71b3d-55c9-49e8-8730-bb5071d5c835",
   166	        "name": "Suppositoria",
   167	        "created_at": "2025-03-30T08:29:38.937463+00:00",
   168	        "updated_at": "2025-03-30T08:31:02.468123+00:00",
   169	        "description": "Sediaan padat untuk penggunaan rektal"
   170	      },
   171	      {
   172	        "id": "c10825a4-90db-48d5-92f7-e8252e5a28b0",
   173	        "name": "Tetes",
   174	        "created_at": "2025-03-30T08:29:38.937463+00:00",
   175	        "updated_at": "2025-03-30T08:31:02.468123+00:00",
   176	        "description": "Sediaan cair dosis kecil"
   177	      },
   178	      {
   179	        "id": "1713eeb1-8ca9-4302-be6a-1e9ccde39cf1",
   180	        "name": "Ampul",
   181	        "created_at": "2025-03-26T14:57:20.368076+00:00",
   182	        "updated_at": "2025-03-30T08:31:02.468123+00:00",
   183	        "description": "Sediaan steril dalam wadah kaca tertutup"
   184	      },
   185	      {
   186	        "id": "762913e6-f1e0-4765-a685-122015dc8eaa",
   187	        "name": "Vial",
   188	        "created_at": "2025-03-30T08:29:38.937463+00:00",
   189	        "updated_at": "2025-03-30T08:31:02.468123+00:00",
   190	        "description": "Wadah kaca dengan tutup karet untuk sediaan injeksi"
   191	      },
   192	      {
   193	        "id": "7a50f346-7587-4ad7-9494-3b871e8be246",
   194	        "name": "Inhaler",
   195	        "created_at": "2025-03-30T08:29:38.937463+00:00",
   196	        "updated_at": "2025-03-30T08:31:02.468123+00:00",
   197	        "description": "Alat untuk menghirup obat dalam bentuk aerosol"
   198	      },
   199	      {
   200	        "id": "71a78582-1700-4fd8-bc21-6045ca671c56",
   201	        "name": "Patch",
   202	        "created_at": "2025-03-30T08:29:38.937463+00:00",
   203	        "updated_at": "2025-03-30T08:31:02.468123+00:00",
   204	        "description": "Sediaan yang ditempelkan ke kulit"
   205	      },
   206	      {
   207	        "id": "cc8e891c-34ac-4afb-944c-258ad244a96f",
   208	        "name": "Tablet",
   209	        "created_at": "2025-03-26T14:57:20.368076+00:00",
   210	        "updated_at": "2025-03-30T08:33:30.804321+00:00",
   211	        "description": "Sediaan padat berbentuk bulat, oval, atau persegi"
   212	      },
   213	      {
   214	        "id": "243e80e0-917b-4549-b78c-3c1d27e4ccc4",
   215	        "name": "Kaplet",
   216	        "created_at": "2025-03-30T08:29:38.937463+00:00",
   217	        "updated_at": "2025-03-30T08:34:44.259782+00:00",
   218	        "description": "Tablet yang dibungkus dengan lapisan gula dan berwarna yang berguna dalam menjaga kelembapan serta kontaminasi ketika di lambung."
   219	      }
   220	    ],
   221	    "items": [
   222	      {
   223	        "id": "68ed5202-4ef0-4a3b-ae2f-e3f17dd76671",
   224	        "name": "ioiiooioi",
   225	        "sell_price": 0,
   226	        "stock": 0,
   227	        "min_stock": 10,
   228	        "description": null,
   229	        "created_at": "2025-03-31T12:28:37.963061+00:00",
   230	        "updated_at": "2025-04-03T10:05:26.904162+00:00",
   231	        "is_active": true,
   232	        "code": "TSAB01",
   233	        "rack": null,
   234	        "has_expiry_date": true,
   235	        "is_medicine": true,
   236	        "category_id": "0d1d6848-96b5-448e-a136-3aba8a9bbbca",
   237	        "type_id": "210574b1-5f18-40dc-a041-3cf33b8f3307",
   238	        "unit_id": "d7ec80ef-00b0-4b57-8086-d6ad803a68cc",
   239	        "base_unit": "Strip",
   240	        "base_price": 50000,
   241	        "unit_conversions": [
   242	          {
   243	            "id": "6b514e67-ddfc-4b20-9a0b-00eefa1ac081",
   244	            "unit_name": "Tablet",
   245	            "base_price": 5000,
   246	            "created_at": "2025-03-31T12:28:38.07+00:00",
   247	            "conversion_rate": 10
   248	          }
   249	        ]
   250	      },
   251	      {
   252	        "id": "52bb1af5-bac4-4dd3-9034-a992f8cee758",
   253	        "name": "ACTIFED PLUS COUGH SUPRESSANT GSK SIRUP 60 ML",
   254	        "sell_price": 0,
   255	        "stock": 0,
   256	        "min_stock": 10,
   257	        "description": null,
   258	        "created_at": "2025-04-02T15:56:51.722547+00:00",
   259	        "updated_at": "2025-04-03T10:05:27.272098+00:00",
   260	        "is_active": true,
   261	        "code": "BBAN01",
   262	        "rack": null,
   263	        "has_expiry_date": true,
   264	        "is_medicine": true,
   265	        "category_id": "502e0a0c-9a29-4003-b309-979b659b30db",
   266	        "type_id": "ccc6e9a8-9f61-43bc-b1a8-a64ad1c8aebd",
   267	        "unit_id": "28dbe949-54a2-4198-baba-ed162a041cbe",
   268	        "base_unit": "Botol",
   269	        "base_price": 35000,
   270	        "unit_conversions": "[]"
   271	      }
   272	    ],
   273	    "patients": [],
   274	    "purchase_items": [],
   275	    "purchases": [],
   276	    "sale_items": [],
   277	    "sales": [],
   278	    "suppliers": [
   279	      {
   280	        "id": "e822fee9-035b-4d93-8bf0-d4fb51c18002",
   281	        "name": "PT. Teknologi Medika Pratama",
   282	        "address": "Komplek Pergudangan Kubik Logistics, Gudang E1 E2 E7, JI. Tugu Raya, RT.10/RW.10, Kel Tugu, Kec. Cimanggis, Kota Depok, Jawa Barat Indonesia",
   283	        "phone": null,
   284	        "email": null,
   285	        "contact_person": "apt. Nur Ramadhani, S. Farm.",
   286	        "created_at": "2025-03-31T15:29:52.123716+00:00",
   287	        "updated_at": "2025-03-31T15:29:52.123716+00:00"
   288	      }
   289	    ],
   290	    "unit_conversions": [
   291	      {
   292	        "id": "6b514e67-ddfc-4b20-9a0b-00eefa1ac081",
   293	        "item_id": "68ed5202-4ef0-4a3b-ae2f-e3f17dd76671",
   294	        "unit_name": "Tablet",
   295	        "conversion_rate": 10,
   296	        "base_price": 5000,
   297	        "created_at": "2025-03-31T12:28:38.07+00:00"
   298	      }
   299	    ],
   300	    "users": [],
   301	    "e_invoices": [
   302	      {
   303	        "id": "7d35b87b-3b29-4ca5-8c26-89638a359204",
   304	        "invoice_number": "TMP-INV-2024/07/31/918471",
   305	        "invoice_date": "2024-07-31",
   306	        "so_number": "TMP-SO-2024/07/31/933040",
   307	        "due_date": "2024-08-30",
   308	        "supplier_name": "PT. Teknologi Medika Pratama",
   309	        "supplier_address": "Komplek Pergudangan Kubik Logistics, Gudang E1 E2 E7, Jl. Tugu Raya, RT.10/RW.10, Kel Tugu, Kec. Cimanggis, Kota Depok, Jawa Barat Indonesia",
   310	        "pbf_license_number": "12710004225910012",
   311	        "dak_license_number": "12710004225910014",
   312	        "cdob_certificate_number": "127100042259100120003",
   313	        "customer_name": "Apotek Mekar Sehat Sukaraya Karangbahagia",
   314	        "customer_address": "PURI NIRWANA RESIDENCE BLOK EJ-01, Desa/Kel. Sukaraya, Kec. Karangbahagia, Kab. Bekasi, 17530 Indonesia",
   315	        "total_price": 157200,
   316	        "ppn": 17292,
   317	        "total_invoice": 174492,
   318	        "checked_by": "apt. Nur Ramadhani, S.Farm.",
   319	        "json_data": {
   320	          "product_list": [
   321	            {
   322	              "sku": "ID100165-2",
   323	              "unit": "Botol",
   324	              "discount": 0,
   325	              "quantity": 3,
   326	              "unit_price": 52400,
   327	              "expiry_date": "11-2026",
   328	              "total_price": 157200,
   329	              "batch_number": "202611-5J7H",
   330	              "product_name": "ACTIFED PLUS COUGH SUPRESSANT GSK SIRUP 60 ML"
   331	            }
   332	          ],
   333	          "company_details": {
   334	            "name": "PT. Teknologi Medika Pratama",
   335	            "address": "Komplek Pergudangan Kubik Logistics, Gudang E1 E2 E7, Jl. Tugu Raya, RT.10/RW.10, Kel Tugu, Kec. Cimanggis, Kota Depok, Jawa Barat Indonesia",
   336	            "dak_license_number": "12710004225910014",
   337	            "pbf_license_number": "12710004225910012",
   338	            "cdob_certificate_number": "127100042259100120003"
   339	          },
   340	          "invoice_details": {
   341	            "due_date": "30-08-2024",
   342	            "so_number": "TMP-SO-2024/07/31/933040",
   343	            "invoice_date": "31-07-2024",
   344	            "invoice_number": "TMP-INV-2024/07/31/918471"
   345	          },
   346	          "payment_summary": {
   347	            "ppn": 17292,
   348	            "total_price": 157200,
   349	            "total_invoice": 174492
   350	          },
   351	          "customer_details": {
   352	            "name": "Apotek Mekar Sehat Sukaraya Karangbahagia",
   353	            "address": "PURI NIRWANA RESIDENCE BLOK EJ-01, Desa/Kel. Sukaraya, Kec. Karangbahagia, Kab. Bekasi, 17530 Indonesia"
   354	          },
   355	          "additional_information": {
   356	            "checked_by": "apt. Nur Ramadhani, S.Farm."
   357	          }
   358	        },
   359	        "is_processed": false,
   360	        "processing_notes": null,
   361	        "related_purchase_id": null,
   362	        "created_at": "2025-04-03T10:01:34.783937+00:00",
   363	        "updated_at": "2025-04-03T11:14:44.886571+00:00"
   364	      }
   365	    ],
   366	    "e_invoice_items": [
   367	      {
   368	        "id": "6e529df4-a517-440e-87c9-e0a2f03a3b8c",
   369	        "invoice_id": "7d35b87b-3b29-4ca5-8c26-89638a359204",
   370	        "sku": "ID100165-2",
   371	        "product_name": "ACTIFED PLUS COUGH SUPRESSANT GSK SIRUP 60 ML",
   372	        "quantity": 3,
   373	        "unit": "Botol",
   374	        "batch_number": "202611-5J7H",
   375	        "expiry_date": "11-2026",
   376	        "unit_price": 52400,
   377	        "discount": 0,
   378	        "total_price": 157200,
   379	        "created_at": "2025-04-03T10:01:34.783937+00:00",
   380	        "updated_at": "2025-04-03T11:14:20.556195+00:00",
   381	        "unit_id": "28dbe949-54a2-4198-baba-ed162a041cbe",
   382	        "item_id": "52bb1af5-bac4-4dd3-9034-a992f8cee758"
   383	      }
   384	    ]
   385	  }
   386	}


===============================================
= File: ./supabase_data/database_funcions 
===============================================

     1	Name: convert_expiry_date
     2	Arg: month_year text
     3	Return: date
     4	Language: plpgsql
     5	
     6	DECLARE
     7	  month_num int;
     8	  year_num int;
     9	  last_day date;
    10	BEGIN
    11	  -- Parse bulan dan tahun dari string format "MM-YYYY"
    12	  month_num := split_part(month_year, '-', 1)::int;
    13	  year_num := split_part(month_year, '-', 2)::int;
    14	  
    15	  -- Dapatkan tanggal hari terakhir dari bulan tersebut
    16	  -- Caranya: ambil tanggal 1 bulan berikutnya, lalu kurangi 1 hari
    17	  IF month_num = 12 THEN
    18	    last_day := make_date(year_num + 1, 1, 1) - interval '1 day';
    19	  ELSE
    20	    last_day := make_date(year_num, month_num + 1, 1) - interval '1 day';
    21	  END IF;
    22	  
    23	  RETURN last_day;
    24	END;
    25	
    26	==============================================================
    27	Name: decrement
    28	Arg: x int
    29	Return: int
    30	Language: plpgsql
    31	
    32	BEGIN
    33	    RETURN - x;
    34	END;
    35	
    36	==============================================================
    37	Name: get_top_selling_medicines
    38	Arg: limit_count int
    39	Return: TABLE(name character varying, total_quantity bigint)
    40	Language: plpgsql
    41	
    42	BEGIN
    43	    RETURN QUERY
    44	    SELECT m.name, SUM(si.quantity) as total_quantity
    45	    FROM medicines m
    46	    JOIN sale_items si ON m.id = si.medicine_id
    47	    GROUP BY m.name
    48	    ORDER BY total_quantity DESC
    49	    LIMIT limit_count;
    50	END;
    51	
    52	==============================================================
    53	Name: process_e_invoice_item
    54	Arg: -
    55	Return: trigger
    56	Language: plpgsql
    57	
    58	BEGIN
    59	  -- Jika expiry_date dalam format MM-YYYY, konversi ke tanggal hari terakhir bulan
    60	  IF NEW.expiry_date ~ '^\d{2}-\d{4}$' THEN
    61	    -- Langsung ubah kolom expiry_date ke format tanggal PostgreSQL
    62	    NEW.expiry_date := convert_expiry_date(NEW.expiry_date);
    63	  END IF;
    64	  
    65	  RETURN NEW;
    66	END;
    67	
    68	==============================================================
    69	Name: process_e_invoice_to_purchase
    70	Arg: e_invoice_id uuid
    71	Return: uuid
    72	Language: plpgsql
    73	
    74	DECLARE
    75	  new_purchase_id uuid;
    76	  invoice_record record;
    77	BEGIN
    78	  -- Ambil data invoice
    79	  SELECT * INTO invoice_record FROM e_invoices WHERE id = e_invoice_id;
    80	  
    81	  -- Buat purchase record baru
    82	  INSERT INTO purchases (
    83	    supplier_id,
    84	    invoice_number,
    85	    date,
    86	    due_date,
    87	    total,
    88	    payment_status,
    89	    vat_percentage,
    90	    vat_amount,
    91	    notes
    92	  ) VALUES (
    93	    (SELECT id FROM suppliers WHERE name = invoice_record.supplier_name LIMIT 1),
    94	    invoice_record.invoice_number,
    95	    invoice_record.invoice_date,
    96	    invoice_record.due_date,
    97	    invoice_record.total_price,
    98	    'unpaid',
    99	    CASE WHEN invoice_record.total_price > 0 
   100	         THEN (invoice_record.ppn / invoice_record.total_price) * 100 
   101	         ELSE 11.0 END,
   102	    invoice_record.ppn,
   103	    'Diimpor dari faktur elektronik. Diperiksa oleh: ' || invoice_record.checked_by
   104	  ) RETURNING id INTO new_purchase_id;
   105	  
   106	  -- Salin item-item faktur ke purchase_items dengan konversi tanggal
   107	  INSERT INTO purchase_items (
   108	    purchase_id,
   109	    item_id,
   110	    quantity,
   111	    price,
   112	    subtotal,
   113	    batch_no,
   114	    expiry_date,
   115	    unit
   116	  )
   117	  SELECT 
   118	    new_purchase_id,
   119	    item_id,
   120	    quantity,
   121	    unit_price,
   122	    total_price,
   123	    batch_number,
   124	    -- Konversi format tanggal kedaluwarsa
   125	    CASE WHEN expiry_date ~ '^\d{2}-\d{4}$' 
   126	         THEN convert_expiry_date(expiry_date)
   127	         ELSE NULL END,
   128	    unit
   129	  FROM e_invoice_items
   130	  WHERE invoice_id = e_invoice_id;
   131	  
   132	  -- Update status e_invoice menjadi processed
   133	  UPDATE e_invoices 
   134	  SET is_processed = true, 
   135	      related_purchase_id = new_purchase_id,
   136	      updated_at = NOW()
   137	  WHERE id = e_invoice_id;
   138	  
   139	  RETURN new_purchase_id;
   140	END;
   141	
   142	==============================================================
   143	Name: process_purchase
   144	Args: p_supplier_id, uuid
   145	p_invoice_number, character
   146	p_date, date
   147	p_total, numeric
   148	p_payment_status, character
   149	p_payment_method, character
   150	p_notes, text
   151	p_so_number, character
   152	p_due_date, date
   153	p_vat_amount, numeric
   154	p_is_vat_included, boolean
   155	p_items, jsonb
   156	Return: uuid
   157	Language: plpgsql
   158	
   159	
   160	DECLARE
   161	  purchase_id UUID;
   162	BEGIN
   163	  -- Insert purchase record
   164	  INSERT INTO purchases (
   165	    supplier_id, invoice_number, date, total, payment_status, payment_method, 
   166	    notes, so_number, due_date, vat_amount, is_vat_included, created_at
   167	  ) VALUES (
   168	    p_supplier_id, p_invoice_number, p_date, p_total, p_payment_status, p_payment_method, 
   169	    p_notes, p_so_number, p_due_date, p_vat_amount, p_is_vat_included, NOW()
   170	  ) RETURNING id INTO purchase_id;
   171	  
   172	  -- Process items with batch info
   173	  FOR i IN 0..jsonb_array_length(p_items) - 1 LOOP
   174	    INSERT INTO purchase_items (
   175	      purchase_id, medicine_id, quantity, price, subtotal, 
   176	      batch_no, expiry_date, unit, created_at
   177	    ) VALUES (
   178	      purchase_id,
   179	      (p_items->i->>'item_id')::UUID,
   180	      (p_items->i->>'quantity')::INTEGER,
   181	      (p_items->i->>'price')::NUMERIC,
   182	      (p_items->i->>'subtotal')::NUMERIC,
   183	      p_items->i->>'batch_no',
   184	      (p_items->i->>'expiry_date')::DATE,
   185	      p_items->i->>'unit',
   186	      NOW()
   187	    );
   188	  END LOOP;
   189	  
   190	  RETURN purchase_id;
   191	END;
   192	
   193	==============================================================
   194	Name: sync_unit_conversions_to_items
   195	Arg: -
   196	Return: trigger
   197	Language: plpgsql
   198	
   199	DECLARE
   200	  conversions JSONB;
   201	BEGIN
   202	  -- Kumpulkan semua konversi untuk item yang terkait dengan operasi trigger saat ini
   203	  SELECT json_agg(
   204	    json_build_object(
   205	      'id', uc.id,
   206	      'unit_name', uc.unit_name,
   207	      'conversion_rate', uc.conversion_rate,
   208	      'base_price', uc.base_price,
   209	      'created_at', uc.created_at
   210	    )
   211	  )::jsonb INTO conversions
   212	  FROM unit_conversions uc
   213	  WHERE uc.item_id = 
   214	    CASE
   215	      WHEN TG_OP = 'DELETE' THEN OLD.item_id
   216	      ELSE NEW.item_id
   217	    END;
   218	
   219	  -- Gunakan array kosong jika tidak ada konversi
   220	  IF conversions IS NULL THEN
   221	    conversions := '[]'::jsonb;
   222	  END IF;
   223	
   224	  -- Perbarui kolom JSONB di tabel items
   225	  UPDATE items
   226	  SET unit_conversions = conversions
   227	  WHERE id = 
   228	    CASE
   229	      WHEN TG_OP = 'DELETE' THEN OLD.item_id
   230	      ELSE NEW.item_id
   231	    END;
   232	
   233	  -- Kembalikan nilai sesuai jenis operasi trigger
   234	  IF TG_OP = 'DELETE' THEN
   235	    RETURN OLD;
   236	  ELSE
   237	    RETURN NEW;
   238	  END IF;
   239	END;
   240	
   241	==============================================================
   242	Name: update_updated_at_column
   243	Arg: -
   244	Return: trigger
   245	Language: plpgsql
   246	
   247	BEGIN
   248	   NEW.updated_at = now();
   249	   RETURN NEW;
   250	END;


===============================================
= File: ./supabase_data/database_triggers 
===============================================

     1	[
     2	  {
     3	    "name": "after_unit_conversion_delete",
     4	    "table": "unit_conversions",
     5	    "function": "sync_unit_conversions_to_items",
     6	    "events": "AFTER DELETE",
     7	    "orientation": "ROW",
     8	    "enabled": true
     9	  },
    10	  {
    11	    "name": "after_unit_conversion_insert",
    12	    "table": "unit_conversions",
    13	    "function": "sync_unit_conversions_to_items",
    14	    "events": "AFTER INSERT",
    15	    "orientation": "ROW",
    16	    "enabled": true
    17	  },
    18	  {
    19	    "name": "after_unit_conversion_update",
    20	    "table": "unit_conversions",
    21	    "function": "sync_unit_conversions_to_items",
    22	    "events": "AFTER UPDATE",
    23	    "orientation": "ROW",
    24	    "enabled": true
    25	  },
    26	  {
    27	    "name": "before_e_invoice_item_insert",
    28	    "table": "e_invoice_items",
    29	    "function": "process_e_invoice_item",
    30	    "events": "BEFORE INSERT",
    31	    "orientation": "ROW",
    32	    "enabled": true
    33	  },
    34	  {
    35	    "name": "set_updated_at",
    36	    "table": "users",
    37	    "function": "update_updated_at_column",
    38	    "events": "BEFORE UPDATE",
    39	    "orientation": "ROW",
    40	    "enabled": true
    41	  },
    42	  {
    43	    "name": "set_updated_at",
    44	    "table": "item_categories",
    45	    "function": "update_updated_at_column",
    46	    "events": "BEFORE UPDATE",
    47	    "orientation": "ROW",
    48	    "enabled": true
    49	  },
    50	  {
    51	    "name": "set_updated_at",
    52	    "table": "item_units",
    53	    "function": "update_updated_at_column",
    54	    "events": "BEFORE UPDATE",
    55	    "orientation": "ROW",
    56	    "enabled": true
    57	  },
    58	  {
    59	    "name": "set_updated_at",
    60	    "table": "item_types",
    61	    "function": "update_updated_at_column",
    62	    "events": "BEFORE UPDATE",
    63	    "orientation": "ROW",
    64	    "enabled": true
    65	  },
    66	  {
    67	    "name": "set_updated_at",
    68	    "table": "items",
    69	    "function": "update_updated_at_column",
    70	    "events": "BEFORE UPDATE",
    71	    "orientation": "ROW",
    72	    "enabled": true
    73	  },
    74	  {
    75	    "name": "set_updated_at",
    76	    "table": "purchases",
    77	    "function": "update_updated_at_column",
    78	    "events": "BEFORE UPDATE",
    79	    "orientation": "ROW",
    80	    "enabled": true
    81	  },
    82	  {
    83	    "name": "set_updated_at",
    84	    "table": "suppliers",
    85	    "function": "update_updated_at_column",
    86	    "events": "BEFORE UPDATE",
    87	    "orientation": "ROW",
    88	    "enabled": true
    89	  },
    90	  {
    91	    "name": "set_updated_at",
    92	    "table": "purchase_items",
    93	    "function": "update_updated_at_column",
    94	    "events": "BEFORE UPDATE",
    95	    "orientation": "ROW",
    96	    "enabled": true
    97	  },
    98	  {
    99	    "name": "set_updated_at",
   100	    "table": "sales",
   101	    "function": "update_updated_at_column",
   102	    "events": "BEFORE UPDATE",
   103	    "orientation": "ROW",
   104	    "enabled": true
   105	  },
   106	  {
   107	    "name": "set_updated_at",
   108	    "table": "patients",
   109	    "function": "update_updated_at_column",
   110	    "events": "BEFORE UPDATE",
   111	    "orientation": "ROW",
   112	    "enabled": true
   113	  },
   114	  {
   115	    "name": "set_updated_at",
   116	    "table": "sale_items",
   117	    "function": "update_updated_at_column",
   118	    "events": "BEFORE UPDATE",
   119	    "orientation": "ROW",
   120	    "enabled": true
   121	  },
   122	  {
   123	    "name": "set_updated_at_e_invoice",
   124	    "table": "e_invoices",
   125	    "function": "update_updated_at_column",
   126	    "events": "BEFORE UPDATE",
   127	    "orientation": "ROW",
   128	    "enabled": true
   129	  },
   130	  {
   131	    "name": "set_updated_at_e_invoice_items",
   132	    "table": "e_invoice_items",
   133	    "function": "update_updated_at_column",
   134	    "events": "BEFORE UPDATE",
   135	    "orientation": "ROW",
   136	    "enabled": true
   137	  },
   138	  {
   139	    "name": "before_e_invoice_item_insert",
   140	    "table": "e_invoice_items",
   141	    "function": "process_e_invoice_item",
   142	    "events": "BEFORE INSERT",
   143	    "orientation": "ROW",
   144	    "enabled": true
   145	  },
   146	  {
   147	    "name": "set_updated_at_e_invoice_items",
   148	    "table": "e_invoice_items",
   149	    "function": "update_updated_at_column",
   150	    "events": "BEFORE UPDATE",
   151	    "orientation": "ROW",
   152	    "enabled": true
   153	  }
   154	]


===============================================
= File: ./supabase_data/definitions 
===============================================

     1	SQL Definition of doctors
     2	
     3	create table public.doctors (
     4	  id uuid not null default extensions.uuid_generate_v4 (),
     5	  name character varying(100) not null,
     6	  specialization character varying(100) null,
     7	  license_number character varying(50) null,
     8	  phone character varying(20) null,
     9	  email character varying(100) null,
    10	  created_at timestamp with time zone null default now(),
    11	  updated_at timestamp with time zone null default now(),
    12	  constraint doctors_pkey primary key (id)
    13	) TABLESPACE pg_default;
    14	
    15	create trigger set_updated_at BEFORE
    16	update on doctors for EACH row
    17	execute FUNCTION update_updated_at_column ();
    18	
    19	==============================================================
    20	SQL Definition of item_categories
    21	
    22	create table public.item_categories (
    23	  id uuid not null default extensions.uuid_generate_v4 (),
    24	  name character varying(100) not null,
    25	  description text null,
    26	  created_at timestamp with time zone null default now(),
    27	  updated_at timestamp with time zone null default now(),
    28	  constraint medicine_categories_pkey primary key (id)
    29	) TABLESPACE pg_default;
    30	
    31	create trigger set_updated_at BEFORE
    32	update on item_categories for EACH row
    33	execute FUNCTION update_updated_at_column ();
    34	
    35	==============================================================
    36	SQL Definition of item_types
    37	
    38	create table public.item_types (
    39	  id uuid not null default extensions.uuid_generate_v4 (),
    40	  name character varying(100) not null,
    41	  description text null,
    42	  created_at timestamp with time zone null default now(),
    43	  updated_at timestamp with time zone null default now(),
    44	  constraint medicine_types_pkey primary key (id)
    45	) TABLESPACE pg_default;
    46	
    47	create trigger set_updated_at BEFORE
    48	update on item_types for EACH row
    49	execute FUNCTION update_updated_at_column ();
    50	
    51	==============================================================
    52	SQL Definition of item_units
    53	
    54	create table public.item_units (
    55	  id uuid not null default extensions.uuid_generate_v4 (),
    56	  name character varying(50) not null,
    57	  created_at timestamp with time zone null default now(),
    58	  updated_at timestamp with time zone null default now(),
    59	  description text null,
    60	  constraint medicine_units_pkey primary key (id)
    61	) TABLESPACE pg_default;
    62	
    63	create trigger set_updated_at BEFORE
    64	update on item_units for EACH row
    65	execute FUNCTION update_updated_at_column ();
    66	
    67	==============================================================
    68	SQL Definition of items
    69	
    70	create table public.items (
    71	  id uuid not null default extensions.uuid_generate_v4 (),
    72	  name character varying(100) not null,
    73	  sell_price numeric(15, 2) not null default 0,
    74	  stock integer not null default 0,
    75	  min_stock integer null default 10,
    76	  description text null,
    77	  created_at timestamp with time zone null default now(),
    78	  updated_at timestamp with time zone null default now(),
    79	  is_active boolean null default true,
    80	  code character varying null,
    81	  rack character varying null,
    82	  has_expiry_date boolean null default false,
    83	  is_medicine boolean null default true,
    84	  category_id uuid null,
    85	  type_id uuid null,
    86	  unit_id uuid null,
    87	  base_unit text null,
    88	  base_price numeric(15, 2) null default 0,
    89	  unit_conversions jsonb null default '[]'::jsonb,
    90	  constraint medicines_pkey primary key (id),
    91	  constraint medicines_category_id_fkey foreign KEY (category_id) references item_categories (id),
    92	  constraint medicines_type_id_fkey foreign KEY (type_id) references item_types (id),
    93	  constraint medicines_unit_id_fkey foreign KEY (unit_id) references item_units (id),
    94	  constraint check_base_price_not_negative check ((base_price >= (0)::numeric))
    95	) TABLESPACE pg_default;
    96	
    97	create trigger set_updated_at BEFORE
    98	update on items for EACH row
    99	execute FUNCTION update_updated_at_column ();
   100	
   101	==============================================================
   102	SQL Definition of patients
   103	
   104	create table public.patients (
   105	  id uuid not null default extensions.uuid_generate_v4 (),
   106	  name character varying(100) not null,
   107	  gender character varying(10) null,
   108	  birth_date date null,
   109	  address text null,
   110	  phone character varying(20) null,
   111	  email character varying(100) null,
   112	  created_at timestamp with time zone null default now(),
   113	  updated_at timestamp with time zone null default now(),
   114	  constraint patients_pkey primary key (id)
   115	) TABLESPACE pg_default;
   116	
   117	create trigger set_updated_at BEFORE
   118	update on patients for EACH row
   119	execute FUNCTION update_updated_at_column ();
   120	
   121	==============================================================
   122	SQL Definition of purchase_items
   123	
   124	create table public.purchase_items (
   125	  id uuid not null default extensions.uuid_generate_v4 (),
   126	  purchase_id uuid null,
   127	  item_id uuid null,
   128	  quantity integer not null,
   129	  price numeric(15, 2) not null,
   130	  subtotal numeric(15, 2) not null,
   131	  created_at timestamp with time zone null default now(),
   132	  updated_at timestamp with time zone null default now(),
   133	  batch_no character varying(50) null,
   134	  expiry_date date null,
   135	  unit character varying(50) null,
   136	  constraint purchase_items_pkey primary key (id),
   137	  constraint purchase_items_item_id_fkey foreign KEY (item_id) references items (id),
   138	  constraint purchase_items_purchase_id_fkey foreign KEY (purchase_id) references purchases (id) on delete CASCADE
   139	) TABLESPACE pg_default;
   140	
   141	create index IF not exists idx_purchase_items_batch_no on public.purchase_items using btree (batch_no) TABLESPACE pg_default;
   142	
   143	create index IF not exists idx_purchase_items_expiry_date on public.purchase_items using btree (expiry_date) TABLESPACE pg_default;
   144	
   145	create trigger set_updated_at BEFORE
   146	update on purchase_items for EACH row
   147	execute FUNCTION update_updated_at_column ();
   148	
   149	==============================================================
   150	SQL Definition of purchases
   151	
   152	create table public.purchases (
   153	  id uuid not null default extensions.uuid_generate_v4 (),
   154	  supplier_id uuid null,
   155	  invoice_number character varying(50) null,
   156	  date date not null,
   157	  total numeric(15, 2) not null default 0,
   158	  payment_status character varying(20) null default 'unpaid'::character varying,
   159	  payment_method character varying(20) null,
   160	  notes text null,
   161	  created_by uuid null,
   162	  created_at timestamp with time zone null default now(),
   163	  updated_at timestamp with time zone null default now(),
   164	  so_number character varying(50) null,
   165	  due_date date null,
   166	  vat_amount numeric(15, 2) null default 0,
   167	  vat_percentage numeric(5, 2) null default 11.0,
   168	  is_vat_included boolean null default true,
   169	  constraint purchases_pkey primary key (id),
   170	  constraint purchases_created_by_fkey foreign KEY (created_by) references users (id),
   171	  constraint purchases_supplier_id_fkey foreign KEY (supplier_id) references suppliers (id)
   172	) TABLESPACE pg_default;
   173	
   174	create trigger set_updated_at BEFORE
   175	update on purchases for EACH row
   176	execute FUNCTION update_updated_at_column ();
   177	
   178	==============================================================
   179	SQL Definition of sale_items
   180	
   181	create table public.sale_items (
   182	  id uuid not null default extensions.uuid_generate_v4 (),
   183	  sale_id uuid null,
   184	  item_id uuid null,
   185	  quantity integer not null,
   186	  price numeric(15, 2) not null,
   187	  subtotal numeric(15, 2) not null,
   188	  created_at timestamp with time zone null default now(),
   189	  updated_at timestamp with time zone null default now(),
   190	  constraint sale_items_pkey primary key (id),
   191	  constraint sale_items_medicine_id_fkey foreign KEY (item_id) references items (id),
   192	  constraint sale_items_sale_id_fkey foreign KEY (sale_id) references sales (id) on delete CASCADE
   193	) TABLESPACE pg_default;
   194	
   195	create trigger set_updated_at BEFORE
   196	update on sale_items for EACH row
   197	execute FUNCTION update_updated_at_column ();
   198	
   199	==============================================================
   200	SQL Definition of sales
   201	
   202	create table public.sales (
   203	  id uuid not null default extensions.uuid_generate_v4 (),
   204	  patient_id uuid null,
   205	  doctor_id uuid null,
   206	  invoice_number character varying(50) null,
   207	  date date not null,
   208	  total numeric(15, 2) not null default 0,
   209	  payment_method character varying(20) null default 'cash'::character varying,
   210	  created_by uuid null,
   211	  created_at timestamp with time zone null default now(),
   212	  updated_at timestamp with time zone null default now(),
   213	  constraint sales_pkey primary key (id),
   214	  constraint sales_created_by_fkey foreign KEY (created_by) references users (id),
   215	  constraint sales_doctor_id_fkey foreign KEY (doctor_id) references doctors (id),
   216	  constraint sales_patient_id_fkey foreign KEY (patient_id) references patients (id)
   217	) TABLESPACE pg_default;
   218	
   219	create trigger set_updated_at BEFORE
   220	update on sales for EACH row
   221	execute FUNCTION update_updated_at_column ();
   222	
   223	==============================================================
   224	SQL Definition of suppliers
   225	
   226	create table public.suppliers (
   227	  id uuid not null default extensions.uuid_generate_v4 (),
   228	  name character varying(100) not null,
   229	  address text null,
   230	  phone character varying(20) null,
   231	  email character varying(100) null,
   232	  contact_person character varying(100) null,
   233	  created_at timestamp with time zone null default now(),
   234	  updated_at timestamp with time zone null default now(),
   235	  constraint suppliers_pkey primary key (id)
   236	) TABLESPACE pg_default;
   237	
   238	create trigger set_updated_at BEFORE
   239	update on suppliers for EACH row
   240	execute FUNCTION update_updated_at_column ();
   241	
   242	==============================================================
   243	SQL Definition of unit_conversions
   244	
   245	create table public.unit_conversions (
   246	  id uuid not null default gen_random_uuid (),
   247	  item_id uuid null,
   248	  unit_name text not null,
   249	  conversion_rate numeric not null,
   250	  base_price numeric null default 0,
   251	  created_at timestamp with time zone null default now(),
   252	  constraint unit_conversions_pkey primary key (id),
   253	  constraint unit_conversions_item_id_unit_name_key unique (item_id, unit_name),
   254	  constraint unit_conversions_item_id_fkey foreign KEY (item_id) references items (id) on delete CASCADE
   255	) TABLESPACE pg_default;
   256	
   257	create trigger after_unit_conversion_delete
   258	after DELETE on unit_conversions for EACH row
   259	execute FUNCTION sync_unit_conversions_to_items ();
   260	
   261	create trigger after_unit_conversion_insert
   262	after INSERT on unit_conversions for EACH row
   263	execute FUNCTION sync_unit_conversions_to_items ();
   264	
   265	create trigger after_unit_conversion_update
   266	after
   267	update on unit_conversions for EACH row
   268	execute FUNCTION sync_unit_conversions_to_items ();
   269	
   270	==============================================================
   271	SQL Definition of users
   272	
   273	create table public.users (
   274	  id uuid not null,
   275	  name character varying(100) not null,
   276	  email character varying(100) not null,
   277	  role character varying(20) not null default 'staff'::character varying,
   278	  created_at timestamp with time zone null default now(),
   279	  updated_at timestamp with time zone null default now(),
   280	  constraint users_pkey primary key (id),
   281	  constraint users_email_key unique (email),
   282	  constraint users_id_fkey foreign KEY (id) references auth.users (id)
   283	) TABLESPACE pg_default;
   284	
   285	create trigger set_updated_at BEFORE
   286	update on users for EACH row
   287	execute FUNCTION update_updated_at_column ();
   288	
   289	==============================================================
   290	SQL Definition of e_invoices
   291	
   292	create table public.e_invoices (
   293	  id uuid not null default extensions.uuid_generate_v4 (),
   294	  invoice_number character varying(50) not null,
   295	  invoice_date date not null,
   296	  so_number character varying(50) null,
   297	  due_date date null,
   298	  supplier_name character varying(100) not null,
   299	  supplier_address text null,
   300	  pbf_license_number character varying(50) null,
   301	  dak_license_number character varying(50) null,
   302	  cdob_certificate_number character varying(50) null,
   303	  customer_name character varying(150) not null,
   304	  customer_address text null,
   305	  total_price numeric(15, 2) not null default 0,
   306	  ppn numeric(15, 2) null default 0,
   307	  total_invoice numeric(15, 2) not null default 0,
   308	  checked_by character varying(100) null,
   309	  json_data jsonb null,
   310	  is_processed boolean null default false,
   311	  processing_notes text null,
   312	  related_purchase_id uuid null,
   313	  created_at timestamp with time zone null default now(),
   314	  updated_at timestamp with time zone null default now(),
   315	  constraint e_invoices_pkey primary key (id),
   316	  constraint e_invoices_invoice_number_key unique (invoice_number)
   317	) TABLESPACE pg_default;
   318	
   319	create trigger set_updated_at_e_invoice BEFORE
   320	update on e_invoices for EACH row
   321	execute FUNCTION update_updated_at_column ();
   322	
   323	==============================================================
   324	SQL Definition of e_invoice_items
   325	
   326	create table public.e_invoice_items (
   327	  id uuid not null default extensions.uuid_generate_v4 (),
   328	  invoice_id uuid null,
   329	  sku character varying(50) null,
   330	  product_name character varying(200) not null,
   331	  quantity integer not null,
   332	  unit character varying(20) null,
   333	  batch_number character varying(50) null,
   334	  expiry_date character varying(10) null,
   335	  unit_price numeric(15, 2) not null,
   336	  discount numeric(15, 2) null default 0,
   337	  total_price numeric(15, 2) not null,
   338	  created_at timestamp with time zone null default now(),
   339	  updated_at timestamp with time zone null default now(),
   340	  unit_id uuid null,
   341	  item_id uuid null,
   342	  constraint e_invoice_items_pkey primary key (id),
   343	  constraint e_invoice_items_invoice_id_fkey foreign KEY (invoice_id) references e_invoices (id) on delete CASCADE,
   344	  constraint e_invoice_items_item_id_fkey foreign KEY (item_id) references items (id) on delete set null,
   345	  constraint e_invoice_items_unit_id_fkey foreign KEY (unit_id) references item_units (id) on delete set null
   346	) TABLESPACE pg_default;
   347	
   348	create index IF not exists idx_e_invoice_items_unit_id on public.e_invoice_items using btree (unit_id) TABLESPACE pg_default;
   349	
   350	create index IF not exists idx_e_invoice_items_item_id on public.e_invoice_items using btree (item_id) TABLESPACE pg_default;
   351	
   352	create trigger set_updated_at_e_invoice_items BEFORE
   353	update on e_invoice_items for EACH row
   354	execute FUNCTION update_updated_at_column ();
   355	
   356	==============================================================
   357	SQL Definition of company_profiles
   358	
   359	create table public.e_invoice_items (
   360	  id uuid not null default extensions.uuid_generate_v4 (),
   361	  invoice_id uuid null,
   362	  sku character varying(50) null,
   363	  product_name character varying(200) not null,
   364	  quantity integer not null,
   365	  unit character varying(20) null,
   366	  batch_number character varying(50) null,
   367	  expiry_date character varying(10) null,
   368	  unit_price numeric(15, 2) not null,
   369	  discount numeric(15, 2) null default 0,
   370	  total_price numeric(15, 2) not null,
   371	  created_at timestamp with time zone null default now(),
   372	  updated_at timestamp with time zone null default now(),
   373	  unit_id uuid null,
   374	  item_id uuid null,
   375	  constraint e_invoice_items_pkey primary key (id),
   376	  constraint e_invoice_items_invoice_id_fkey foreign KEY (invoice_id) references e_invoices (id) on delete CASCADE,
   377	  constraint e_invoice_items_item_id_fkey foreign KEY (item_id) references items (id) on delete set null,
   378	  constraint e_invoice_items_unit_id_fkey foreign KEY (unit_id) references item_units (id) on delete set null
   379	) TABLESPACE pg_default;
   380	
   381	create index IF not exists idx_e_invoice_items_unit_id on public.e_invoice_items using btree (unit_id) TABLESPACE pg_default;
   382	
   383	create index IF not exists idx_e_invoice_items_item_id on public.e_invoice_items using btree (item_id) TABLESPACE pg_default;
   384	
   385	create trigger before_e_invoice_item_insert BEFORE INSERT on e_invoice_items for EACH row
   386	execute FUNCTION process_e_invoice_item ();
   387	
   388	create trigger set_updated_at_e_invoice_items BEFORE
   389	update on e_invoice_items for EACH row
   390	execute FUNCTION update_updated_at_column ();


===============================================
= File: ./tailwind.config.js 
===============================================

     1	/** @type {import('tailwindcss').Config} */
     2	module.exports = {
     3	  content: [
     4	    "./index.html",
     5	    "./src/**/*.{js,ts,jsx,tsx}",
     6	  ],
     7	  theme: {
     8	    extend: {
     9	      fontFamily: {
    10	        sans: [
    11	          'system-ui',
    12	          'Avenir',
    13	          'Helvetica',
    14	          'Arial',
    15	          'sans-serif',
    16	        ],
    17	      },
    18	      colors: {
    19	        primary: "#1a73e8",
    20	        secondary: "#4285f4",
    21	        accent: "#ea4335",
    22	        neutral: "#fbbc05",
    23	      },
    24	    },
    25	  },
    26	  plugins: [],
    27	}


===============================================
= File: ./test.js 
===============================================

     1	import {
     2	  GoogleGenAI,
     3	  createUserContent,
     4	  createPartFromUri,
     5	} from "@google/genai";
     6	
     7	const ai = new GoogleGenAI({ apiKey: "AIzaSyCmctDKbfbzFwKsKvB97o0wfrLxrA2BWyw" });
     8	
     9	async function main() {
    10	  const image = await ai.files.upload({
    11	    file: "image.png",
    12	  });
    13	  const response = await ai.models.generateContent({
    14	    model: "gemini-2.0-flash",
    15	    contents: [
    16	      createUserContent([
    17	        "Anda adalah asisten yang ahli dalam mengekstrak teks dari gambar faktur farmasi dan mengubahnya menjadi format JSON terstruktur. Anda harus mengekstrak semua informasi yang relevan dari gambar faktur farmasi dengan teliti dan tepat. Tugas Anda adalah mengekstrak detail perusahaan (nama, alamat, nomor lisensi PBF, nomor lisensi DAK, nomor sertifikat CDOB), informasi faktur (nomor, tanggal, nomor SO, tanggal jatuh tempo), informasi pelanggan (nama, alamat), daftar produk (SKU, nama produk, jumlah, unit, nomor batch, tanggal kedaluwarsa, harga per unit, diskon, total harga), ringkasan pembayaran (total harga, PPN, total faktur), dan informasi tambahan (diperiksa oleh). Pastikan Anda mengikuti aturan ekstraksi berikut: 1. Hapus semua tag baris baru (\n) dari hasil ekstraksi, 2. Konversikan semua nilai ke tipe data yang sesuai (string, integer, dll.), 3. Format tanggal harus mengikuti pola yang ditentukan (DD-MM-YYYY untuk tanggal faktur dan MM-YYYY untuk tanggal kedaluwarsa), 4. Pastikan nomor faktur dan nomor SO mengikuti pola TMP-INV-[YYYY/MM/DD]/[kode] dan TMP-SO-[YYYY/MM/DD]/[kode], 5. Pastikan gelar ditulis dengan benar: apt. [nama], S. Farm. (remove 'APJ' word), 6. Nama produk harus menyertakan informasi volume (ekstrak dari deskripsi kemasan jika perlu), 7. Untuk kemasan, gunakan hanya jenis unit (ekstrak kata pertama setelah koma). Contoh: 'DUS, BOTOL PLASTIK @ 60 ML' -> 'BOTOL'. Keluarkan hasil ekstraksi Anda dalam format JSON yang tepat sesuai dengan skema yang telah ditentukan. Pastikan semua informasi yang diperlukan termasuk dan diformat dengan benar.",
    18	        createPartFromUri(image.uri, image.mimeType),
    19	      ]),
    20	    ],
    21	  });
    22	  console.log(response.text);
    23	}
    24	
    25	await main();


===============================================
= File: ./tsconfig.app.json 
===============================================

     1	{
     2	  "compilerOptions": {
     3	    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
     4	    "target": "ES2020",
     5	    "useDefineForClassFields": true,
     6	    "lib": ["ES2020", "DOM", "DOM.Iterable"],
     7	    "module": "ESNext",
     8	    "skipLibCheck": true,
     9	
    10	    /* Bundler mode */
    11	    "moduleResolution": "bundler",
    12	    "allowImportingTsExtensions": true,
    13	    "isolatedModules": true,
    14	    "moduleDetection": "force",
    15	    "noEmit": true,
    16	    "jsx": "react-jsx",
    17	
    18	    /* Linting */
    19	    "strict": true,
    20	    "noUnusedLocals": true,
    21	    "noUnusedParameters": true,
    22	    "noFallthroughCasesInSwitch": true,
    23	    "noUncheckedSideEffectImports": true
    24	  },
    25	  "include": ["src"]
    26	}


===============================================
= File: ./tsconfig.json 
===============================================

     1	{
     2	  "files": [],
     3	  "references": [
     4	    { "path": "./tsconfig.app.json" },
     5	    { "path": "./tsconfig.node.json" }
     6	  ]
     7	}


===============================================
= File: ./tsconfig.node.json 
===============================================

     1	{
     2	  "compilerOptions": {
     3	    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
     4	    "target": "ES2022",
     5	    "lib": ["ES2023"],
     6	    "module": "ESNext",
     7	    "skipLibCheck": true,
     8	
     9	    /* Bundler mode */
    10	    "moduleResolution": "bundler",
    11	    "allowImportingTsExtensions": true,
    12	    "isolatedModules": true,
    13	    "moduleDetection": "force",
    14	    "noEmit": true,
    15	
    16	    /* Linting */
    17	    "strict": true,
    18	    "noUnusedLocals": true,
    19	    "noUnusedParameters": true,
    20	    "noFallthroughCasesInSwitch": true,
    21	    "noUncheckedSideEffectImports": true
    22	  },
    23	  "include": ["vite.config.ts"]
    24	}


===============================================
= File: ./vite.config.ts 
===============================================

     1	import { defineConfig } from 'vite'
     2	import react from '@vitejs/plugin-react'
     3	
     4	// https://vite.dev/config/
     5	export default defineConfig({
     6	  plugins: [react()],
     7	  server: {
     8	    fs: {
     9	      // Allow serving files from one level up from the project root
    10	      allow: ['..']
    11	    }
    12	  }
    13	})
