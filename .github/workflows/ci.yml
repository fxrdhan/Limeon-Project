name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read

jobs:
  # üîç Detect what files changed to optimize CI runs
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      critical: ${{ steps.filter.outputs.critical }}
      needs_build: ${{ steps.filter.outputs.needs_build }}
      config: ${{ steps.filter.outputs.config }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for file changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            # Critical changes that need typecheck + lint + test (but not always build)
            critical:
              - 'src/**'
              - 'scripts/**'
              - 'public/**'
              - 'package.json'
              - 'yarn.lock'
              - '.yarnrc.yml'
              - 'tsconfig*.json'
              - 'vite.config.*'
              - 'vitest.config.*'
              - '.swcrc'
              - 'index.html'
              - '.env'
              - '.env.*'
              - '.github/workflows/**'

            # Subset of critical that actually needs BUILD (excludes test files, scripts, workflows)
            needs_build:
              - 'src/**/!(*.test).{ts,tsx,scss,css}'
              - 'src/**/*.{jpg,jpeg,png,gif,svg,webp}'
              - 'public/**'
              - 'package.json'
              - 'yarn.lock'
              - '.yarnrc.yml'
              - 'tsconfig*.json'
              - 'vite.config.*'
              - '.swcrc'
              - 'index.html'
              - '.env'
              - '.env.*'
              # NOTE: .github/workflows/** excluded - workflow changes don't affect app build

            # Config-only changes that need lint + format only (skip tests & build)
            config:
              - '.mergify.yml'
              - '.github/dependabot.yml'
              - '.prettierrc*'
              - '.prettierignore'
              - 'eslint.config.*'
              - '.eslintrc*'
              - '.eslintignore'
              - 'tailwind.config.*'
              - 'postcss.config.*'
              - '.husky/**'
              - '.gitignore'
              - '.gitattributes'
              - '.mcp.json'
              - '.mcp.json.example'
              - '*.example'

            # Docs & dev-only changes that need format check only (or skip entirely)
            docs:
              - '**/*.md'
              - 'LICENSE'
              - '.github/ISSUE_TEMPLATE/**'
              - '.github/PULL_REQUEST_TEMPLATE.md'
              - 'supabase/**'

  # ‚ö° Fast checks - run in parallel for quick feedback
  typecheck:
    name: TypeScript Check
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.critical == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Check TypeScript
        run: yarn tsc -b --noEmit

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.critical == 'true' ||
      needs.detect-changes.outputs.config == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Lint code
        run: yarn lint

  format:
    name: Check Formatting
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.critical == 'true' ||
      needs.detect-changes.outputs.config == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Check formatting
        run: yarn format:check

  # üß™ Tests with coverage - runs after quick checks pass
  test:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    needs: [detect-changes, typecheck, lint, format]
    if: |
      always() &&
      needs.detect-changes.outputs.critical == 'true' &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    permissions:
      contents: read
      checks: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run tests with coverage
        run: yarn test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: ${{ github.actor != 'dependabot[bot]' }}

  # üèóÔ∏è Build - always runs, but skips actual build if not needed
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [detect-changes, test]
    if: |
      always() &&
      (needs.detect-changes.outputs.critical == 'true' || needs.detect-changes.outputs.needs_build == 'true') &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    permissions:
      contents: read
      actions: write
    steps:
      - name: Check if build is needed
        id: check
        run: |
          if [ "${{ needs.detect-changes.outputs.needs_build }}" == "true" ]; then
            echo "needed=true" >> $GITHUB_OUTPUT
          else
            echo "needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Skip build message
        if: steps.check.outputs.needed == 'false'
        run: |
          echo "‚è≠Ô∏è Build skipped - no build-affecting files changed"
          echo ""
          echo "Changed files don't affect production build:"
          echo "  ‚Ä¢ Test files (*.test.ts, *.test.tsx)"
          echo "  ‚Ä¢ Scripts (scripts/**)"
          echo "  ‚Ä¢ Workflows (.github/workflows/**)"
          echo ""
          echo "‚úÖ All checks passed (typecheck, lint, test)"
          echo "‚ö° Saved ~2 minutes of CI time!"

      - name: Checkout code
        if: steps.check.outputs.needed == 'true'
        uses: actions/checkout@v4

      - name: Enable Corepack
        if: steps.check.outputs.needed == 'true'
        run: corepack enable

      - name: Setup Node.js
        if: steps.check.outputs.needed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        if: steps.check.outputs.needed == 'true'
        run: yarn install --immutable

      - name: Build application
        if: steps.check.outputs.needed == 'true'
        run: yarn build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: Upload build artifacts
        if: steps.check.outputs.needed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist/
          retention-days: 7

  # üìù Lightweight check for docs & dev-only changes
  docs-check:
    name: Documentation & Dev Files Check
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.docs == 'true' &&
      needs.detect-changes.outputs.critical == 'false' &&
      needs.detect-changes.outputs.config == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Check formatting
        run: yarn format:check

      - name: Success message
        run: |
          echo "‚úÖ Documentation/dev files changes look good!"
          echo "üìù Changed: docs, supabase (local dev), or other non-production files"
          echo "‚ö° Skipped heavy checks (typecheck, test, build) to save CI minutes"

  # ‚öôÔ∏è Lightweight check for config-only changes
  config-check:
    name: Configuration Check
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.config == 'true' &&
      needs.detect-changes.outputs.critical == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Lint and format check
        run: |
          yarn lint
          yarn format:check

      - name: Success message
        run: |
          echo "‚úÖ Configuration changes look good!"
          echo "‚ö° Skipped heavy checks (typecheck, test, build) to save CI minutes"
          echo "üìã Only ran lint + format check since no source code changed"
